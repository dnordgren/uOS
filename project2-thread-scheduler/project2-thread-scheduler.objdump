
project2-thread-scheduler.elf:     file format elf32-littlenios2
project2-thread-scheduler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005528 memsz 0x00005528 flags r-x
    LOAD off    0x00006548 vaddr 0x00005548 paddr 0x00006f90 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x000089d8 vaddr 0x000089d8 paddr 0x000089d8 align 2**12
         filesz 0x00000000 memsz 0x0000032c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000052e0  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b4  00005494  00005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00005548  00006f90  00006548  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000032c  000089d8  000089d8  000089d8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  00007fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000e52  00000000  00000000  000088d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a484  00000000  00000000  00009722  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000515d  00000000  00000000  00023ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c334  00000000  00000000  00028d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000116c  00000000  00000000  00035038  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016b5  00000000  00000000  000361a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003500  00000000  00000000  00037859  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003ad5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  0003ad70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003d577  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003d57a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003d57d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003d57e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003d582  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003d586  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003d58a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003d593  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003d59c  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003d5a5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0003d5b0  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  0003d5df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00005494 l    d  .rodata	00000000 .rodata
00005548 l    d  .rwdata	00000000 .rwdata
000089d8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000069c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00005950 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
0000160c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00006f68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005d50 l     O .rwdata	00001060 JTAG_UART
00001cac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001eec l     F .text	00000228 altera_avalon_jtag_uart_irq
00002114 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00002790 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00002990 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002a0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002aec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002efc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000304c l     F .text	000000f8 alt_file_locked
000032d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003dc8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000041ac l     F .text	00000058 std
000042b8 l     F .text	00000008 __fp_lock
000042c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004d78 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00004eb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004fd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005128 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
000052ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00005430 l     F .text	00000060 alt_get_errno
00004c18 g     F .text	00000070 _isatty_r
00001678 g     F .text	0000006c alt_main
00008a74 g     O .bss	00000100 alt_irq
00004c88 g     F .text	00000078 _lseek_r
00006f90 g       *ABS*	00000000 __flash_rwdata_start
00008d04 g       *ABS*	00000000 __alt_heap_start
00004854 g     F .text	00000068 __sseek
00004214 g     F .text	000000a4 __sinit
00003a0c g     F .text	00000130 __swbuf_r
00004314 g     F .text	0000009c __sfmoreglue
00001704 g     F .text	00000020 __malloc_unlock
00004304 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00008a2c g     O .bss	00000030 run_queue
00000000 g     F .entry	0000000c __reset
00000390 g     F .text	00000110 prune_queue
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004ba4 g     F .text	00000074 _fstat_r
000089e8 g     O .bss	00000004 errno
000089f0 g     O .bss	00000004 alt_argv
0000ef58 g       *ABS*	00000000 _gp
000002c4 g     F .text	00000080 mythread_create
00006dd8 g     O .rwdata	00000180 alt_fd_list
000033c8 g     F .text	00000094 alt_find_dev
0000370c g     F .text	000000a0 memcpy
000042f8 g     F .text	0000000c _cleanup_r
00002fd4 g     F .text	00000078 alt_io_redirect
00005494 g       *ABS*	00000000 __DTOR_END__
000033a8 g     F .text	00000020 altera_nios2_irq_init
0000232c g     F .text	00000224 altera_avalon_jtag_uart_read
00000834 g     F .text	00000014 malloc
000007d8 g     F .text	00000008 __udivsi3
00004f10 g     F .text	000000c4 isatty
000089dc g     O .bss	00000004 __malloc_top_pad
00000f88 g     F .text	00000070 _sbrk_r
00004d00 g     F .text	00000078 _read_r
00006f84 g     O .rwdata	00000004 alt_max_fd
00004a80 g     F .text	00000110 _fclose_r
00004178 g     F .text	00000034 fflush
000089e0 g     O .bss	00000004 __malloc_max_sbrked_mem
00005034 g     F .text	000000f4 lseek
00006f64 g     O .rwdata	00000004 _global_impure_ptr
00008d04 g       *ABS*	00000000 __bss_end
00002e04 g     F .text	000000f8 alt_iic_isr_register
00001b10 g     F .text	0000010c alt_tick
0000021c g     F .text	000000a8 mythread
000042e0 g     F .text	00000018 __fp_lock_all
00002dbc g     F .text	00000048 alt_ic_irq_enabled
00008a5c g     O .bss	00000018 alarm
00001a78 g     F .text	00000098 alt_alarm_stop
00008a00 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00006db0 g     O .rwdata	00000028 alt_dev_null
000029f0 g     F .text	0000001c alt_dcache_flush_all
00006f90 g       *ABS*	00000000 __ram_rwdata_end
00006f7c g     O .rwdata	00000008 alt_dev_list
0000530c g     F .text	00000124 write
000038b0 g     F .text	000000e8 _putc_r
00005548 g       *ABS*	00000000 __ram_rodata_end
00004dd8 g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000007e0 g     F .text	00000008 __umodsi3
00008d04 g       *ABS*	00000000 end
00001e2c g     F .text	000000c0 altera_avalon_jtag_uart_init
00005490 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00002800 g     F .text	00000090 alt_avalon_timer_sc_init
00002550 g     F .text	00000240 altera_avalon_jtag_uart_write
00004204 g     F .text	00000004 __sfp_lock_acquire
00001124 g     F .text	00000314 _free_r
00001724 g     F .text	00000258 alt_printf
00003dcc g     F .text	000001b0 __call_exitprocs
00006f5c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
000089f8 g     O .bss	00000004 _alt_tick_rate
000089fc g     O .bss	00000004 _alt_nticks
00005188 g     F .text	00000124 read
00001c50 g     F .text	0000005c alt_sys_init
00003c94 g     F .text	00000134 __register_exitproc
000021c4 g     F .text	00000074 altera_avalon_jtag_uart_close
000007e8 g     F .text	00000038 __mulsi3
00005548 g       *ABS*	00000000 __ram_rwdata_start
00005494 g       *ABS*	00000000 __ram_rodata_start
00008a04 g     O .bss	00000028 __malloc_current_mallinfo
00001ce4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000357c g     F .text	000000d0 alt_get_fd
00004a10 g     F .text	00000070 _close_r
00003698 g     F .text	00000074 memcmp
00001d94 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00008d04 g       *ABS*	00000000 __alt_stack_base
00001ddc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003b58 g     F .text	0000013c __swsetup_r
000043b0 g     F .text	000000f0 __sfp
00005548 g     O .rwdata	00000408 __malloc_av_
00004210 g     F .text	00000004 __sinit_lock_release
00004938 g     F .text	00000060 __sread
0000345c g     F .text	00000120 alt_find_file
00002a38 g     F .text	000000b4 alt_dev_llist_insert
000016e4 g     F .text	00000020 __malloc_lock
000019bc g     F .text	000000bc sbrk
00003f7c g     F .text	000001fc _fflush_r
000089d8 g       *ABS*	00000000 __bss_start
000047b4 g     F .text	00000098 memset
000001f0 g     F .text	0000002c main
000089f4 g     O .bss	00000004 alt_envp
000089e4 g     O .bss	00000004 __malloc_max_total_mem
00001d3c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00003b3c g     F .text	0000001c __swbuf
0000484c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004b90 g     F .text	00000014 fclose
00008b74 g     O .bss	00000190 _atexit0
00000848 g     F .text	00000740 _malloc_r
00006f88 g     O .rwdata	00000004 alt_errno
00004568 g     F .text	000000b8 _fwalk
000037ac g     F .text	00000104 putc
00000718 g     F .text	00000060 __divsi3
00000ff8 g     F .text	0000012c _malloc_trim_r
00005494 g       *ABS*	00000000 __CTOR_END__
00005494 g       *ABS*	00000000 __flash_rodata_start
00005494 g       *ABS*	00000000 __DTOR_LIST__
00000644 g     F .text	00000058 interrupt_handler
00001c1c g     F .text	00000034 alt_irq_init
00003330 g     F .text	00000078 alt_release_fd
0000364c g     F .text	00000014 atexit
00004998 g     F .text	00000078 _write_r
00006f60 g     O .rwdata	00000004 _impure_ptr
000089ec g     O .bss	00000004 alt_argc
00002bb0 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000089d8 g     O .bss	00000004 run_queue_count
000042c8 g     F .text	00000018 __fp_unlock_all
00006f74 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002c30 g     F .text	00000050 alt_ic_isr_register
00006f90 g       *ABS*	00000000 _edata
00008d04 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00002238 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000059c g     F .text	000000a8 prototype_os
00002d1c g     F .text	000000a0 alt_ic_irq_disable
000048bc g     F .text	0000007c __swrite
00006f58 g     O .rwdata	00000004 __malloc_trim_threshold
00003660 g     F .text	00000038 exit
000044a0 g     F .text	000000c8 _fwalk_reent
00000778 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004208 g     F .text	00000004 __sfp_lock_release
00004db8 g     F .text	00000020 _exit
00001438 g     F .text	00000154 alt_alarm_start
00004620 g     F .text	00000194 __smakebuf_r
00003998 g     F .text	00000074 strlen
00003144 g     F .text	0000018c open
0000197c g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
00002c14 g     F .text	0000001c alt_icache_flush_all
00006f8c g     O .rwdata	00000004 alt_priority_mask
00002c80 g     F .text	0000009c alt_ic_irq_enable
00006f6c g     O .rwdata	00000008 alt_alarm_list
00002b4c g     F .text	00000064 _do_ctors
00000344 g     F .text	0000004c mythread_scheduler
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00002890 g     F .text	00000100 close
0000158c g     F .text	00000080 alt_load
00000820 g     F .text	00000014 free
0000420c g     F .text	00000004 __sinit_lock_acquire
000004a0 g     F .text	000000fc prioritize_queue



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e29d04 	addi	r3,r3,-30092
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e29d04 	addi	r3,r3,-30092
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6bbd614 	ori	gp,gp,61272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10a27614 	ori	r2,r2,35288

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18e34114 	ori	r3,r3,36100

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000158c0 	call	158c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00016780 	call	1678 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:

tcb *run_queue[NUM_THREADS];
int run_queue_count;

int main()
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	dfc00115 	stw	ra,4(sp)
     1f8:	df000015 	stw	fp,0(sp)
     1fc:	d839883a 	mov	fp,sp
	// begin execution of the operating system
	prototype_os();
     200:	000059c0 	call	59c <prototype_os>
	return 0;
     204:	0005883a 	mov	r2,zero
}
     208:	e037883a 	mov	sp,fp
     20c:	dfc00117 	ldw	ra,4(sp)
     210:	df000017 	ldw	fp,0(sp)
     214:	dec00204 	addi	sp,sp,8
     218:	f800283a 	ret

0000021c <mythread>:

void mythread(int thread_id)
{
     21c:	defff904 	addi	sp,sp,-28
     220:	dfc00615 	stw	ra,24(sp)
     224:	df000515 	stw	fp,20(sp)
     228:	df000504 	addi	fp,sp,20
     22c:	e13ffe15 	stw	r4,-8(fp)
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
     230:	e0bffe17 	ldw	r2,-8(fp)
     234:	1080004c 	andi	r2,r2,1
     238:	1004c03a 	cmpne	r2,r2,zero
     23c:	1000031e 	bne	r2,zero,24c <mythread+0x30>
     240:	00800284 	movi	r2,10
     244:	e0bfff15 	stw	r2,-4(fp)
     248:	00000206 	br	254 <mythread+0x38>
     24c:	008003c4 	movi	r2,15
     250:	e0bfff15 	stw	r2,-4(fp)
     254:	e0bfff17 	ldw	r2,-4(fp)
     258:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++)
     25c:	e03ffd15 	stw	zero,-12(fp)
     260:	00001006 	br	2a4 <mythread+0x88>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
     264:	01000034 	movhi	r4,0
     268:	21152504 	addi	r4,r4,21652
     26c:	e17ffd17 	ldw	r5,-12(fp)
     270:	e1bffe17 	ldw	r6,-8(fp)
     274:	00017240 	call	1724 <alt_printf>
		for (j = 0; j < MAX; j++);
     278:	e03ffc15 	stw	zero,-16(fp)
     27c:	00000306 	br	28c <mythread+0x70>
     280:	e0bffc17 	ldw	r2,-16(fp)
     284:	10800044 	addi	r2,r2,1
     288:	e0bffc15 	stw	r2,-16(fp)
     28c:	e0bffc17 	ldw	r2,-16(fp)
     290:	1089c410 	cmplti	r2,r2,10000
     294:	103ffa1e 	bne	r2,zero,280 <mythread+0x64>

void mythread(int thread_id)
{
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
	for (i = 0; i < n; i++)
     298:	e0bffd17 	ldw	r2,-12(fp)
     29c:	10800044 	addi	r2,r2,1
     2a0:	e0bffd15 	stw	r2,-12(fp)
     2a4:	e0fffd17 	ldw	r3,-12(fp)
     2a8:	e0bffb17 	ldw	r2,-20(fp)
     2ac:	18bfed16 	blt	r3,r2,264 <mythread+0x48>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
		for (j = 0; j < MAX; j++);
	}
}
     2b0:	e037883a 	mov	sp,fp
     2b4:	dfc00117 	ldw	ra,4(sp)
     2b8:	df000017 	ldw	fp,0(sp)
     2bc:	dec00204 	addi	sp,sp,8
     2c0:	f800283a 	ret

000002c4 <mythread_create>:

void mythread_create(int thread_id, tcb *instance)
{
     2c4:	defffb04 	addi	sp,sp,-20
     2c8:	dfc00415 	stw	ra,16(sp)
     2cc:	df000315 	stw	fp,12(sp)
     2d0:	df000304 	addi	fp,sp,12
     2d4:	e13ffe15 	stw	r4,-8(fp)
     2d8:	e17fff15 	stw	r5,-4(fp)
	tcb *thread = (tcb *)malloc(sizeof(tcb));
     2dc:	01000404 	movi	r4,16
     2e0:	00008340 	call	834 <malloc>
     2e4:	e0bffd15 	stw	r2,-12(fp)
	thread->thread_id = thread_id;
     2e8:	e0fffd17 	ldw	r3,-12(fp)
     2ec:	e0bffe17 	ldw	r2,-8(fp)
     2f0:	18800015 	stw	r2,0(r3)
	// add thread to run_queue
	run_queue[thread_id] = thread;
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	00c00074 	movhi	r3,1
     2fc:	18e28b04 	addi	r3,r3,-30164
     300:	1085883a 	add	r2,r2,r2
     304:	1085883a 	add	r2,r2,r2
     308:	10c7883a 	add	r3,r2,r3
     30c:	e0bffd17 	ldw	r2,-12(fp)
     310:	18800015 	stw	r2,0(r3)
	run_queue_count++;
     314:	d0a6a017 	ldw	r2,-25984(gp)
     318:	10800044 	addi	r2,r2,1
     31c:	d0a6a015 	stw	r2,-25984(gp)
	// thread has been added to queue; set its status to scheduled
	thread->status = scheduled;
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	10000215 	stw	zero,8(r2)
	instance = thread;
     328:	e0bffd17 	ldw	r2,-12(fp)
     32c:	e0bfff15 	stw	r2,-4(fp)
}
     330:	e037883a 	mov	sp,fp
     334:	dfc00117 	ldw	ra,4(sp)
     338:	df000017 	ldw	fp,0(sp)
     33c:	dec00204 	addi	sp,sp,8
     340:	f800283a 	ret

00000344 <mythread_scheduler>:

void * mythread_scheduler(void *context)
{
     344:	defffd04 	addi	sp,sp,-12
     348:	dfc00215 	stw	ra,8(sp)
     34c:	df000115 	stw	fp,4(sp)
     350:	df000104 	addi	fp,sp,4
     354:	e13fff15 	stw	r4,-4(fp)
	// do the necessary setup
	if(run_queue_count > 0)
     358:	d0a6a017 	ldw	r2,-25984(gp)
     35c:	10800050 	cmplti	r2,r2,1
     360:	1000031e 	bne	r2,zero,370 <mythread_scheduler+0x2c>
	{
		// suspend the current thread and schedule a new thread

		// remove completed threads from the queue
		prune_queue();
     364:	00003900 	call	390 <prune_queue>
		// reprioritize the queue
		prioritize_queue();
     368:	00004a00 	call	4a0 <prioritize_queue>
     36c:	00000306 	br	37c <mythread_scheduler+0x38>

		// schedule the new highest priority thread
	}
	else
	{
		alt_printf("Interrupted by the DE2 timer!\n");
     370:	01000034 	movhi	r4,0
     374:	21152e04 	addi	r4,r4,21688
     378:	00017240 	call	1724 <alt_printf>
	}
	// do whatever we need to do
}
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <prune_queue>:

void prune_queue()
{
     390:	defffb04 	addi	sp,sp,-20
     394:	dfc00415 	stw	ra,16(sp)
     398:	df000315 	stw	fp,12(sp)
     39c:	df000304 	addi	fp,sp,12
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     3a0:	e03fff15 	stw	zero,-4(fp)
     3a4:	00003606 	br	480 <prune_queue+0xf0>
	{
		tcb *thread = run_queue[i];
     3a8:	e0bfff17 	ldw	r2,-4(fp)
     3ac:	00c00074 	movhi	r3,1
     3b0:	18e28b04 	addi	r3,r3,-30164
     3b4:	1085883a 	add	r2,r2,r2
     3b8:	1085883a 	add	r2,r2,r2
     3bc:	10c5883a 	add	r2,r2,r3
     3c0:	10800017 	ldw	r2,0(r2)
     3c4:	e0bffd15 	stw	r2,-12(fp)
		// thread has finished and exited
		if (thread->status == finished)
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	10800217 	ldw	r2,8(r2)
     3d0:	10800098 	cmpnei	r2,r2,2
     3d4:	1000271e 	bne	r2,zero,474 <prune_queue+0xe4>
		{
			// remove the completed thread from the queue
			run_queue[i] = NULL;
     3d8:	e0bfff17 	ldw	r2,-4(fp)
     3dc:	00c00074 	movhi	r3,1
     3e0:	18e28b04 	addi	r3,r3,-30164
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	10c5883a 	add	r2,r2,r3
     3f0:	10000015 	stw	zero,0(r2)
			run_queue_count--;
     3f4:	d0a6a017 	ldw	r2,-25984(gp)
     3f8:	10bfffc4 	addi	r2,r2,-1
     3fc:	d0a6a015 	stw	r2,-25984(gp)
			// destroy the thread
			free(thread);
     400:	e13ffd17 	ldw	r4,-12(fp)
     404:	00008200 	call	820 <free>
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	e0bffe15 	stw	r2,-8(fp)
     410:	00001206 	br	45c <prune_queue+0xcc>
			{
				run_queue[j] = run_queue[j+1];
     414:	e17ffe17 	ldw	r5,-8(fp)
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	10800044 	addi	r2,r2,1
     420:	00c00074 	movhi	r3,1
     424:	18e28b04 	addi	r3,r3,-30164
     428:	1085883a 	add	r2,r2,r2
     42c:	1085883a 	add	r2,r2,r2
     430:	10c5883a 	add	r2,r2,r3
     434:	11000017 	ldw	r4,0(r2)
     438:	00c00074 	movhi	r3,1
     43c:	18e28b04 	addi	r3,r3,-30164
     440:	2945883a 	add	r2,r5,r5
     444:	1085883a 	add	r2,r2,r2
     448:	10c5883a 	add	r2,r2,r3
     44c:	11000015 	stw	r4,0(r2)
			run_queue[i] = NULL;
			run_queue_count--;
			// destroy the thread
			free(thread);
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	10800044 	addi	r2,r2,1
     458:	e0bffe15 	stw	r2,-8(fp)
     45c:	e0bffe17 	ldw	r2,-8(fp)
     460:	108002d0 	cmplti	r2,r2,11
     464:	103feb1e 	bne	r2,zero,414 <prune_queue+0x84>
			{
				run_queue[j] = run_queue[j+1];
			}
			// insert an empty slot at the end of the queue
			run_queue[NUM_THREADS-1] = NULL;
     468:	00800074 	movhi	r2,1
     46c:	10a28b04 	addi	r2,r2,-30164
     470:	10000b15 	stw	zero,44(r2)

void prune_queue()
{
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800310 	cmplti	r2,r2,12
     488:	103fc71e 	bne	r2,zero,3a8 <prune_queue+0x18>
			}
			// insert an empty slot at the end of the queue
			run_queue[NUM_THREADS-1] = NULL;
		}
	}
}
     48c:	e037883a 	mov	sp,fp
     490:	dfc00117 	ldw	ra,4(sp)
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00204 	addi	sp,sp,8
     49c:	f800283a 	ret

000004a0 <prioritize_queue>:

void prioritize_queue()
{
     4a0:	defffc04 	addi	sp,sp,-16
     4a4:	dfc00315 	stw	ra,12(sp)
     4a8:	df000215 	stw	fp,8(sp)
     4ac:	df000204 	addi	fp,sp,8
	// determine how many open spots are available in the queue
	// snapshot the current highest priority thread
	tcb *current_thread = run_queue[0];
     4b0:	00800074 	movhi	r2,1
     4b4:	10a28b04 	addi	r2,r2,-30164
     4b8:	10800017 	ldw	r2,0(r2)
     4bc:	e0bfff15 	stw	r2,-4(fp)
	if (current_thread == NULL)
     4c0:	e0bfff17 	ldw	r2,-4(fp)
     4c4:	1004c03a 	cmpne	r2,r2,zero
     4c8:	1000041e 	bne	r2,zero,4dc <prioritize_queue+0x3c>
	{
		alt_printf("run queue is empty");
     4cc:	01000034 	movhi	r4,0
     4d0:	21153604 	addi	r4,r4,21720
     4d4:	00017240 	call	1724 <alt_printf>
		return;
     4d8:	00002b06 	br	588 <prioritize_queue+0xe8>
	}
	// make the highest priority slot available
	run_queue[0] = NULL;
     4dc:	00800074 	movhi	r2,1
     4e0:	10a28b04 	addi	r2,r2,-30164
     4e4:	10000015 	stw	zero,0(r2)
	int i;
	for(i = 0; i < NUM_THREADS-1; i++)
     4e8:	e03ffe15 	stw	zero,-8(fp)
     4ec:	00001b06 	br	55c <prioritize_queue+0xbc>
	{
		// the rest of the queue is empty slots
		if (run_queue[i] == NULL)
     4f0:	e0bffe17 	ldw	r2,-8(fp)
     4f4:	00c00074 	movhi	r3,1
     4f8:	18e28b04 	addi	r3,r3,-30164
     4fc:	1085883a 	add	r2,r2,r2
     500:	1085883a 	add	r2,r2,r2
     504:	10c5883a 	add	r2,r2,r3
     508:	10800017 	ldw	r2,0(r2)
     50c:	1005003a 	cmpeq	r2,r2,zero
     510:	1000151e 	bne	r2,zero,568 <prioritize_queue+0xc8>
		{
			break;
		}
		run_queue[i] = run_queue[i+1];
     514:	e17ffe17 	ldw	r5,-8(fp)
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800044 	addi	r2,r2,1
     520:	00c00074 	movhi	r3,1
     524:	18e28b04 	addi	r3,r3,-30164
     528:	1085883a 	add	r2,r2,r2
     52c:	1085883a 	add	r2,r2,r2
     530:	10c5883a 	add	r2,r2,r3
     534:	11000017 	ldw	r4,0(r2)
     538:	00c00074 	movhi	r3,1
     53c:	18e28b04 	addi	r3,r3,-30164
     540:	2945883a 	add	r2,r5,r5
     544:	1085883a 	add	r2,r2,r2
     548:	10c5883a 	add	r2,r2,r3
     54c:	11000015 	stw	r4,0(r2)
		return;
	}
	// make the highest priority slot available
	run_queue[0] = NULL;
	int i;
	for(i = 0; i < NUM_THREADS-1; i++)
     550:	e0bffe17 	ldw	r2,-8(fp)
     554:	10800044 	addi	r2,r2,1
     558:	e0bffe15 	stw	r2,-8(fp)
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	108002d0 	cmplti	r2,r2,11
     564:	103fe21e 	bne	r2,zero,4f0 <prioritize_queue+0x50>
			break;
		}
		run_queue[i] = run_queue[i+1];
	}
	// insert the former highest priority thread at the back of the queue
	run_queue[i] = current_thread;
     568:	e0bffe17 	ldw	r2,-8(fp)
     56c:	00c00074 	movhi	r3,1
     570:	18e28b04 	addi	r3,r3,-30164
     574:	1085883a 	add	r2,r2,r2
     578:	1085883a 	add	r2,r2,r2
     57c:	10c7883a 	add	r3,r2,r3
     580:	e0bfff17 	ldw	r2,-4(fp)
     584:	18800015 	stw	r2,0(r3)
}
     588:	e037883a 	mov	sp,fp
     58c:	dfc00117 	ldw	ra,4(sp)
     590:	df000017 	ldw	fp,0(sp)
     594:	dec00204 	addi	sp,sp,8
     598:	f800283a 	ret

0000059c <prototype_os>:

void prototype_os()
{
     59c:	defffd04 	addi	sp,sp,-12
     5a0:	dfc00215 	stw	ra,8(sp)
     5a4:	df000115 	stw	fp,4(sp)
     5a8:	df000104 	addi	fp,sp,4
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     5ac:	00800074 	movhi	r2,1
     5b0:	10a27e04 	addi	r2,r2,-30216
     5b4:	10800017 	ldw	r2,0(r2)
     5b8:	100b883a 	mov	r5,r2
	int i;
	// initialize the alarm to interrupt after 1 second and set the alarm's callback function
	alt_alarm_start(&alarm, alt_ticks_per_second(), interrupt_handler, NULL);
     5bc:	01000074 	movhi	r4,1
     5c0:	21229704 	addi	r4,r4,-30116
     5c4:	01800034 	movhi	r6,0
     5c8:	31819104 	addi	r6,r6,1604
     5cc:	000f883a 	mov	r7,zero
     5d0:	00014380 	call	1438 <alt_alarm_start>

	// do all the necessary setup
	for (i = 0; i < NUM_THREADS; i++)
     5d4:	e03fff15 	stw	zero,-4(fp)
     5d8:	00000306 	br	5e8 <prototype_os+0x4c>
     5dc:	e0bfff17 	ldw	r2,-4(fp)
     5e0:	10800044 	addi	r2,r2,1
     5e4:	e0bfff15 	stw	r2,-4(fp)
     5e8:	e0bfff17 	ldw	r2,-4(fp)
     5ec:	10800310 	cmplti	r2,r2,12
     5f0:	103ffa1e 	bne	r2,zero,5dc <prototype_os+0x40>
	{
		// create the threads
	}

	for (i = 0; i < NUM_THREADS; i++)
     5f4:	e03fff15 	stw	zero,-4(fp)
     5f8:	00000306 	br	608 <prototype_os+0x6c>
     5fc:	e0bfff17 	ldw	r2,-4(fp)
     600:	10800044 	addi	r2,r2,1
     604:	e0bfff15 	stw	r2,-4(fp)
     608:	e0bfff17 	ldw	r2,-4(fp)
     60c:	10800310 	cmplti	r2,r2,12
     610:	103ffa1e 	bne	r2,zero,5fc <prototype_os+0x60>
	}

	// loop endlessly
	while(1)
	{
		alt_printf("Hello from uOS!\n");
     614:	01000034 	movhi	r4,0
     618:	21153b04 	addi	r4,r4,21740
     61c:	00017240 	call	1724 <alt_printf>

		// loop; will be interrupted
		for (i = 0; i < 10000; i++);
     620:	e03fff15 	stw	zero,-4(fp)
     624:	00000306 	br	634 <prototype_os+0x98>
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800044 	addi	r2,r2,1
     630:	e0bfff15 	stw	r2,-4(fp)
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	1089c410 	cmplti	r2,r2,10000
     63c:	103ffa1e 	bne	r2,zero,628 <prototype_os+0x8c>
	}
     640:	003ff406 	br	614 <prototype_os+0x78>

00000644 <interrupt_handler>:
}

alt_u32 interrupt_handler(void* context)
{
     644:	defffd04 	addi	sp,sp,-12
     648:	dfc00215 	stw	ra,8(sp)
     64c:	df000115 	stw	fp,4(sp)
     650:	df000104 	addi	fp,sp,4
     654:	e13fff15 	stw	r4,-4(fp)
	alt_printf("Interrupted by timer!\n");
     658:	01000034 	movhi	r4,0
     65c:	21154004 	addi	r4,r4,21760
     660:	00017240 	call	1724 <alt_printf>
     664:	00800074 	movhi	r2,1
     668:	10a27e04 	addi	r2,r2,-30216
     66c:	10800017 	ldw	r2,0(r2)
     670:	1009883a 	mov	r4,r2
	// reset the alarm to interrupt next in 0.5 seconds
	return ALARMTICKS(5);
     674:	01400144 	movi	r5,5
     678:	00007e80 	call	7e8 <__mulsi3>
     67c:	1009883a 	mov	r4,r2
     680:	01400284 	movi	r5,10
     684:	00007d80 	call	7d8 <__udivsi3>
}
     688:	e037883a 	mov	sp,fp
     68c:	dfc00117 	ldw	ra,4(sp)
     690:	df000017 	ldw	fp,0(sp)
     694:	dec00204 	addi	sp,sp,8
     698:	f800283a 	ret

0000069c <udivmodsi4>:
     69c:	29001b2e 	bgeu	r5,r4,70c <udivmodsi4+0x70>
     6a0:	28001a16 	blt	r5,zero,70c <udivmodsi4+0x70>
     6a4:	00800044 	movi	r2,1
     6a8:	0007883a 	mov	r3,zero
     6ac:	01c007c4 	movi	r7,31
     6b0:	00000306 	br	6c0 <udivmodsi4+0x24>
     6b4:	19c01326 	beq	r3,r7,704 <udivmodsi4+0x68>
     6b8:	18c00044 	addi	r3,r3,1
     6bc:	28000416 	blt	r5,zero,6d0 <udivmodsi4+0x34>
     6c0:	294b883a 	add	r5,r5,r5
     6c4:	1085883a 	add	r2,r2,r2
     6c8:	293ffa36 	bltu	r5,r4,6b4 <udivmodsi4+0x18>
     6cc:	10000d26 	beq	r2,zero,704 <udivmodsi4+0x68>
     6d0:	0007883a 	mov	r3,zero
     6d4:	21400236 	bltu	r4,r5,6e0 <udivmodsi4+0x44>
     6d8:	2149c83a 	sub	r4,r4,r5
     6dc:	1886b03a 	or	r3,r3,r2
     6e0:	1004d07a 	srli	r2,r2,1
     6e4:	280ad07a 	srli	r5,r5,1
     6e8:	103ffa1e 	bne	r2,zero,6d4 <udivmodsi4+0x38>
     6ec:	30000226 	beq	r6,zero,6f8 <udivmodsi4+0x5c>
     6f0:	2005883a 	mov	r2,r4
     6f4:	f800283a 	ret
     6f8:	1809883a 	mov	r4,r3
     6fc:	2005883a 	mov	r2,r4
     700:	f800283a 	ret
     704:	0007883a 	mov	r3,zero
     708:	003ff806 	br	6ec <udivmodsi4+0x50>
     70c:	00800044 	movi	r2,1
     710:	0007883a 	mov	r3,zero
     714:	003fef06 	br	6d4 <udivmodsi4+0x38>

00000718 <__divsi3>:
     718:	defffe04 	addi	sp,sp,-8
     71c:	dc000015 	stw	r16,0(sp)
     720:	dfc00115 	stw	ra,4(sp)
     724:	0021883a 	mov	r16,zero
     728:	20000c16 	blt	r4,zero,75c <__divsi3+0x44>
     72c:	000d883a 	mov	r6,zero
     730:	28000e16 	blt	r5,zero,76c <__divsi3+0x54>
     734:	000069c0 	call	69c <udivmodsi4>
     738:	1007883a 	mov	r3,r2
     73c:	8005003a 	cmpeq	r2,r16,zero
     740:	1000011e 	bne	r2,zero,748 <__divsi3+0x30>
     744:	00c7c83a 	sub	r3,zero,r3
     748:	1805883a 	mov	r2,r3
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	dc000017 	ldw	r16,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret
     75c:	0109c83a 	sub	r4,zero,r4
     760:	04000044 	movi	r16,1
     764:	000d883a 	mov	r6,zero
     768:	283ff20e 	bge	r5,zero,734 <__divsi3+0x1c>
     76c:	014bc83a 	sub	r5,zero,r5
     770:	8021003a 	cmpeq	r16,r16,zero
     774:	003fef06 	br	734 <__divsi3+0x1c>

00000778 <__modsi3>:
     778:	deffff04 	addi	sp,sp,-4
     77c:	dfc00015 	stw	ra,0(sp)
     780:	01800044 	movi	r6,1
     784:	2807883a 	mov	r3,r5
     788:	20000416 	blt	r4,zero,79c <__modsi3+0x24>
     78c:	28000c16 	blt	r5,zero,7c0 <__modsi3+0x48>
     790:	dfc00017 	ldw	ra,0(sp)
     794:	dec00104 	addi	sp,sp,4
     798:	000069c1 	jmpi	69c <udivmodsi4>
     79c:	0109c83a 	sub	r4,zero,r4
     7a0:	28000b16 	blt	r5,zero,7d0 <__modsi3+0x58>
     7a4:	180b883a 	mov	r5,r3
     7a8:	01800044 	movi	r6,1
     7ac:	000069c0 	call	69c <udivmodsi4>
     7b0:	0085c83a 	sub	r2,zero,r2
     7b4:	dfc00017 	ldw	ra,0(sp)
     7b8:	dec00104 	addi	sp,sp,4
     7bc:	f800283a 	ret
     7c0:	014bc83a 	sub	r5,zero,r5
     7c4:	dfc00017 	ldw	ra,0(sp)
     7c8:	dec00104 	addi	sp,sp,4
     7cc:	000069c1 	jmpi	69c <udivmodsi4>
     7d0:	0147c83a 	sub	r3,zero,r5
     7d4:	003ff306 	br	7a4 <__modsi3+0x2c>

000007d8 <__udivsi3>:
     7d8:	000d883a 	mov	r6,zero
     7dc:	000069c1 	jmpi	69c <udivmodsi4>

000007e0 <__umodsi3>:
     7e0:	01800044 	movi	r6,1
     7e4:	000069c1 	jmpi	69c <udivmodsi4>

000007e8 <__mulsi3>:
     7e8:	20000a26 	beq	r4,zero,814 <__mulsi3+0x2c>
     7ec:	0007883a 	mov	r3,zero
     7f0:	2080004c 	andi	r2,r4,1
     7f4:	1005003a 	cmpeq	r2,r2,zero
     7f8:	2008d07a 	srli	r4,r4,1
     7fc:	1000011e 	bne	r2,zero,804 <__mulsi3+0x1c>
     800:	1947883a 	add	r3,r3,r5
     804:	294b883a 	add	r5,r5,r5
     808:	203ff91e 	bne	r4,zero,7f0 <__mulsi3+0x8>
     80c:	1805883a 	mov	r2,r3
     810:	f800283a 	ret
     814:	0007883a 	mov	r3,zero
     818:	1805883a 	mov	r2,r3
     81c:	f800283a 	ret

00000820 <free>:
     820:	00800034 	movhi	r2,0
     824:	109bd804 	addi	r2,r2,28512
     828:	200b883a 	mov	r5,r4
     82c:	11000017 	ldw	r4,0(r2)
     830:	00011241 	jmpi	1124 <_free_r>

00000834 <malloc>:
     834:	00800034 	movhi	r2,0
     838:	109bd804 	addi	r2,r2,28512
     83c:	200b883a 	mov	r5,r4
     840:	11000017 	ldw	r4,0(r2)
     844:	00008481 	jmpi	848 <_malloc_r>

00000848 <_malloc_r>:
     848:	defff604 	addi	sp,sp,-40
     84c:	28c002c4 	addi	r3,r5,11
     850:	00800584 	movi	r2,22
     854:	dc800215 	stw	r18,8(sp)
     858:	dfc00915 	stw	ra,36(sp)
     85c:	df000815 	stw	fp,32(sp)
     860:	ddc00715 	stw	r23,28(sp)
     864:	dd800615 	stw	r22,24(sp)
     868:	dd400515 	stw	r21,20(sp)
     86c:	dd000415 	stw	r20,16(sp)
     870:	dcc00315 	stw	r19,12(sp)
     874:	dc400115 	stw	r17,4(sp)
     878:	dc000015 	stw	r16,0(sp)
     87c:	2025883a 	mov	r18,r4
     880:	10c01236 	bltu	r2,r3,8cc <_malloc_r+0x84>
     884:	04400404 	movi	r17,16
     888:	8940142e 	bgeu	r17,r5,8dc <_malloc_r+0x94>
     88c:	00800304 	movi	r2,12
     890:	0007883a 	mov	r3,zero
     894:	90800015 	stw	r2,0(r18)
     898:	1805883a 	mov	r2,r3
     89c:	dfc00917 	ldw	ra,36(sp)
     8a0:	df000817 	ldw	fp,32(sp)
     8a4:	ddc00717 	ldw	r23,28(sp)
     8a8:	dd800617 	ldw	r22,24(sp)
     8ac:	dd400517 	ldw	r21,20(sp)
     8b0:	dd000417 	ldw	r20,16(sp)
     8b4:	dcc00317 	ldw	r19,12(sp)
     8b8:	dc800217 	ldw	r18,8(sp)
     8bc:	dc400117 	ldw	r17,4(sp)
     8c0:	dc000017 	ldw	r16,0(sp)
     8c4:	dec00a04 	addi	sp,sp,40
     8c8:	f800283a 	ret
     8cc:	00bffe04 	movi	r2,-8
     8d0:	18a2703a 	and	r17,r3,r2
     8d4:	883fed16 	blt	r17,zero,88c <_malloc_r+0x44>
     8d8:	897fec36 	bltu	r17,r5,88c <_malloc_r+0x44>
     8dc:	9009883a 	mov	r4,r18
     8e0:	00016e40 	call	16e4 <__malloc_lock>
     8e4:	00807dc4 	movi	r2,503
     8e8:	14402b2e 	bgeu	r2,r17,998 <_malloc_r+0x150>
     8ec:	8806d27a 	srli	r3,r17,9
     8f0:	18003f1e 	bne	r3,zero,9f0 <_malloc_r+0x1a8>
     8f4:	880cd0fa 	srli	r6,r17,3
     8f8:	300490fa 	slli	r2,r6,3
     8fc:	02c00034 	movhi	r11,0
     900:	5ad55204 	addi	r11,r11,21832
     904:	12cb883a 	add	r5,r2,r11
     908:	2c000317 	ldw	r16,12(r5)
     90c:	580f883a 	mov	r7,r11
     910:	2c00041e 	bne	r5,r16,924 <_malloc_r+0xdc>
     914:	00000a06 	br	940 <_malloc_r+0xf8>
     918:	1800860e 	bge	r3,zero,b34 <_malloc_r+0x2ec>
     91c:	84000317 	ldw	r16,12(r16)
     920:	2c000726 	beq	r5,r16,940 <_malloc_r+0xf8>
     924:	80800117 	ldw	r2,4(r16)
     928:	00ffff04 	movi	r3,-4
     92c:	10c8703a 	and	r4,r2,r3
     930:	2447c83a 	sub	r3,r4,r17
     934:	008003c4 	movi	r2,15
     938:	10fff70e 	bge	r2,r3,918 <_malloc_r+0xd0>
     93c:	31bfffc4 	addi	r6,r6,-1
     940:	32400044 	addi	r9,r6,1
     944:	02800034 	movhi	r10,0
     948:	52955404 	addi	r10,r10,21840
     94c:	54000217 	ldw	r16,8(r10)
     950:	8280a026 	beq	r16,r10,bd4 <_malloc_r+0x38c>
     954:	80800117 	ldw	r2,4(r16)
     958:	00ffff04 	movi	r3,-4
     95c:	10ca703a 	and	r5,r2,r3
     960:	2c4dc83a 	sub	r6,r5,r17
     964:	008003c4 	movi	r2,15
     968:	11808316 	blt	r2,r6,b78 <_malloc_r+0x330>
     96c:	52800315 	stw	r10,12(r10)
     970:	52800215 	stw	r10,8(r10)
     974:	30002916 	blt	r6,zero,a1c <_malloc_r+0x1d4>
     978:	8147883a 	add	r3,r16,r5
     97c:	18800117 	ldw	r2,4(r3)
     980:	9009883a 	mov	r4,r18
     984:	10800054 	ori	r2,r2,1
     988:	18800115 	stw	r2,4(r3)
     98c:	00017040 	call	1704 <__malloc_unlock>
     990:	80c00204 	addi	r3,r16,8
     994:	003fc006 	br	898 <_malloc_r+0x50>
     998:	02c00034 	movhi	r11,0
     99c:	5ad55204 	addi	r11,r11,21832
     9a0:	8ac5883a 	add	r2,r17,r11
     9a4:	14000317 	ldw	r16,12(r2)
     9a8:	580f883a 	mov	r7,r11
     9ac:	8806d0fa 	srli	r3,r17,3
     9b0:	14006c26 	beq	r2,r16,b64 <_malloc_r+0x31c>
     9b4:	80c00117 	ldw	r3,4(r16)
     9b8:	00bfff04 	movi	r2,-4
     9bc:	81800317 	ldw	r6,12(r16)
     9c0:	1886703a 	and	r3,r3,r2
     9c4:	80c7883a 	add	r3,r16,r3
     9c8:	18800117 	ldw	r2,4(r3)
     9cc:	81400217 	ldw	r5,8(r16)
     9d0:	9009883a 	mov	r4,r18
     9d4:	10800054 	ori	r2,r2,1
     9d8:	18800115 	stw	r2,4(r3)
     9dc:	31400215 	stw	r5,8(r6)
     9e0:	29800315 	stw	r6,12(r5)
     9e4:	00017040 	call	1704 <__malloc_unlock>
     9e8:	80c00204 	addi	r3,r16,8
     9ec:	003faa06 	br	898 <_malloc_r+0x50>
     9f0:	00800104 	movi	r2,4
     9f4:	10c0052e 	bgeu	r2,r3,a0c <_malloc_r+0x1c4>
     9f8:	00800504 	movi	r2,20
     9fc:	10c07836 	bltu	r2,r3,be0 <_malloc_r+0x398>
     a00:	198016c4 	addi	r6,r3,91
     a04:	300490fa 	slli	r2,r6,3
     a08:	003fbc06 	br	8fc <_malloc_r+0xb4>
     a0c:	8804d1ba 	srli	r2,r17,6
     a10:	11800e04 	addi	r6,r2,56
     a14:	300490fa 	slli	r2,r6,3
     a18:	003fb806 	br	8fc <_malloc_r+0xb4>
     a1c:	00807fc4 	movi	r2,511
     a20:	1140bb36 	bltu	r2,r5,d10 <_malloc_r+0x4c8>
     a24:	2806d0fa 	srli	r3,r5,3
     a28:	573ffe04 	addi	fp,r10,-8
     a2c:	00800044 	movi	r2,1
     a30:	180890fa 	slli	r4,r3,3
     a34:	1807d0ba 	srai	r3,r3,2
     a38:	e1c00117 	ldw	r7,4(fp)
     a3c:	5909883a 	add	r4,r11,r4
     a40:	21400217 	ldw	r5,8(r4)
     a44:	10c4983a 	sll	r2,r2,r3
     a48:	81000315 	stw	r4,12(r16)
     a4c:	81400215 	stw	r5,8(r16)
     a50:	388eb03a 	or	r7,r7,r2
     a54:	2c000315 	stw	r16,12(r5)
     a58:	24000215 	stw	r16,8(r4)
     a5c:	e1c00115 	stw	r7,4(fp)
     a60:	4807883a 	mov	r3,r9
     a64:	4800cd16 	blt	r9,zero,d9c <_malloc_r+0x554>
     a68:	1807d0ba 	srai	r3,r3,2
     a6c:	00800044 	movi	r2,1
     a70:	10c8983a 	sll	r4,r2,r3
     a74:	39004436 	bltu	r7,r4,b88 <_malloc_r+0x340>
     a78:	21c4703a 	and	r2,r4,r7
     a7c:	10000a1e 	bne	r2,zero,aa8 <_malloc_r+0x260>
     a80:	2109883a 	add	r4,r4,r4
     a84:	00bfff04 	movi	r2,-4
     a88:	4884703a 	and	r2,r9,r2
     a8c:	3906703a 	and	r3,r7,r4
     a90:	12400104 	addi	r9,r2,4
     a94:	1800041e 	bne	r3,zero,aa8 <_malloc_r+0x260>
     a98:	2109883a 	add	r4,r4,r4
     a9c:	3904703a 	and	r2,r7,r4
     aa0:	4a400104 	addi	r9,r9,4
     aa4:	103ffc26 	beq	r2,zero,a98 <_malloc_r+0x250>
     aa8:	480490fa 	slli	r2,r9,3
     aac:	4819883a 	mov	r12,r9
     ab0:	023fff04 	movi	r8,-4
     ab4:	589b883a 	add	r13,r11,r2
     ab8:	6807883a 	mov	r3,r13
     abc:	014003c4 	movi	r5,15
     ac0:	1c000317 	ldw	r16,12(r3)
     ac4:	1c00041e 	bne	r3,r16,ad8 <_malloc_r+0x290>
     ac8:	0000a706 	br	d68 <_malloc_r+0x520>
     acc:	3000ab0e 	bge	r6,zero,d7c <_malloc_r+0x534>
     ad0:	84000317 	ldw	r16,12(r16)
     ad4:	1c00a426 	beq	r3,r16,d68 <_malloc_r+0x520>
     ad8:	80800117 	ldw	r2,4(r16)
     adc:	1204703a 	and	r2,r2,r8
     ae0:	144dc83a 	sub	r6,r2,r17
     ae4:	29bff90e 	bge	r5,r6,acc <_malloc_r+0x284>
     ae8:	81000317 	ldw	r4,12(r16)
     aec:	80c00217 	ldw	r3,8(r16)
     af0:	89400054 	ori	r5,r17,1
     af4:	8445883a 	add	r2,r16,r17
     af8:	20c00215 	stw	r3,8(r4)
     afc:	19000315 	stw	r4,12(r3)
     b00:	81400115 	stw	r5,4(r16)
     b04:	1187883a 	add	r3,r2,r6
     b08:	31000054 	ori	r4,r6,1
     b0c:	50800315 	stw	r2,12(r10)
     b10:	50800215 	stw	r2,8(r10)
     b14:	19800015 	stw	r6,0(r3)
     b18:	11000115 	stw	r4,4(r2)
     b1c:	12800215 	stw	r10,8(r2)
     b20:	12800315 	stw	r10,12(r2)
     b24:	9009883a 	mov	r4,r18
     b28:	00017040 	call	1704 <__malloc_unlock>
     b2c:	80c00204 	addi	r3,r16,8
     b30:	003f5906 	br	898 <_malloc_r+0x50>
     b34:	8109883a 	add	r4,r16,r4
     b38:	20800117 	ldw	r2,4(r4)
     b3c:	80c00217 	ldw	r3,8(r16)
     b40:	81400317 	ldw	r5,12(r16)
     b44:	10800054 	ori	r2,r2,1
     b48:	20800115 	stw	r2,4(r4)
     b4c:	28c00215 	stw	r3,8(r5)
     b50:	19400315 	stw	r5,12(r3)
     b54:	9009883a 	mov	r4,r18
     b58:	00017040 	call	1704 <__malloc_unlock>
     b5c:	80c00204 	addi	r3,r16,8
     b60:	003f4d06 	br	898 <_malloc_r+0x50>
     b64:	80800204 	addi	r2,r16,8
     b68:	14000317 	ldw	r16,12(r2)
     b6c:	143f911e 	bne	r2,r16,9b4 <_malloc_r+0x16c>
     b70:	1a400084 	addi	r9,r3,2
     b74:	003f7306 	br	944 <_malloc_r+0xfc>
     b78:	88c00054 	ori	r3,r17,1
     b7c:	8445883a 	add	r2,r16,r17
     b80:	80c00115 	stw	r3,4(r16)
     b84:	003fdf06 	br	b04 <_malloc_r+0x2bc>
     b88:	e4000217 	ldw	r16,8(fp)
     b8c:	00bfff04 	movi	r2,-4
     b90:	80c00117 	ldw	r3,4(r16)
     b94:	802d883a 	mov	r22,r16
     b98:	18aa703a 	and	r21,r3,r2
     b9c:	ac401636 	bltu	r21,r17,bf8 <_malloc_r+0x3b0>
     ba0:	ac49c83a 	sub	r4,r21,r17
     ba4:	008003c4 	movi	r2,15
     ba8:	1100130e 	bge	r2,r4,bf8 <_malloc_r+0x3b0>
     bac:	88800054 	ori	r2,r17,1
     bb0:	8447883a 	add	r3,r16,r17
     bb4:	80800115 	stw	r2,4(r16)
     bb8:	20800054 	ori	r2,r4,1
     bbc:	18800115 	stw	r2,4(r3)
     bc0:	e0c00215 	stw	r3,8(fp)
     bc4:	9009883a 	mov	r4,r18
     bc8:	00017040 	call	1704 <__malloc_unlock>
     bcc:	80c00204 	addi	r3,r16,8
     bd0:	003f3106 	br	898 <_malloc_r+0x50>
     bd4:	39c00117 	ldw	r7,4(r7)
     bd8:	573ffe04 	addi	fp,r10,-8
     bdc:	003fa006 	br	a60 <_malloc_r+0x218>
     be0:	00801504 	movi	r2,84
     be4:	10c06736 	bltu	r2,r3,d84 <_malloc_r+0x53c>
     be8:	8804d33a 	srli	r2,r17,12
     bec:	11801b84 	addi	r6,r2,110
     bf0:	300490fa 	slli	r2,r6,3
     bf4:	003f4106 	br	8fc <_malloc_r+0xb4>
     bf8:	d0a6a117 	ldw	r2,-25980(gp)
     bfc:	d0e00117 	ldw	r3,-32764(gp)
     c00:	053fffc4 	movi	r20,-1
     c04:	10800404 	addi	r2,r2,16
     c08:	88a7883a 	add	r19,r17,r2
     c0c:	1d000326 	beq	r3,r20,c1c <_malloc_r+0x3d4>
     c10:	98c3ffc4 	addi	r3,r19,4095
     c14:	00bc0004 	movi	r2,-4096
     c18:	18a6703a 	and	r19,r3,r2
     c1c:	9009883a 	mov	r4,r18
     c20:	980b883a 	mov	r5,r19
     c24:	0000f880 	call	f88 <_sbrk_r>
     c28:	1009883a 	mov	r4,r2
     c2c:	15000426 	beq	r2,r20,c40 <_malloc_r+0x3f8>
     c30:	854b883a 	add	r5,r16,r21
     c34:	1029883a 	mov	r20,r2
     c38:	11405a2e 	bgeu	r2,r5,da4 <_malloc_r+0x55c>
     c3c:	87000c26 	beq	r16,fp,c70 <_malloc_r+0x428>
     c40:	e4000217 	ldw	r16,8(fp)
     c44:	80c00117 	ldw	r3,4(r16)
     c48:	00bfff04 	movi	r2,-4
     c4c:	1884703a 	and	r2,r3,r2
     c50:	14400336 	bltu	r2,r17,c60 <_malloc_r+0x418>
     c54:	1449c83a 	sub	r4,r2,r17
     c58:	008003c4 	movi	r2,15
     c5c:	113fd316 	blt	r2,r4,bac <_malloc_r+0x364>
     c60:	9009883a 	mov	r4,r18
     c64:	00017040 	call	1704 <__malloc_unlock>
     c68:	0007883a 	mov	r3,zero
     c6c:	003f0a06 	br	898 <_malloc_r+0x50>
     c70:	05c00074 	movhi	r23,1
     c74:	bde28104 	addi	r23,r23,-30204
     c78:	b8800017 	ldw	r2,0(r23)
     c7c:	988d883a 	add	r6,r19,r2
     c80:	b9800015 	stw	r6,0(r23)
     c84:	d0e00117 	ldw	r3,-32764(gp)
     c88:	00bfffc4 	movi	r2,-1
     c8c:	18808e26 	beq	r3,r2,ec8 <_malloc_r+0x680>
     c90:	2145c83a 	sub	r2,r4,r5
     c94:	3085883a 	add	r2,r6,r2
     c98:	b8800015 	stw	r2,0(r23)
     c9c:	20c001cc 	andi	r3,r4,7
     ca0:	18005f1e 	bne	r3,zero,e20 <_malloc_r+0x5d8>
     ca4:	000b883a 	mov	r5,zero
     ca8:	a4c5883a 	add	r2,r20,r19
     cac:	1083ffcc 	andi	r2,r2,4095
     cb0:	00c40004 	movi	r3,4096
     cb4:	1887c83a 	sub	r3,r3,r2
     cb8:	28e7883a 	add	r19,r5,r3
     cbc:	9009883a 	mov	r4,r18
     cc0:	980b883a 	mov	r5,r19
     cc4:	0000f880 	call	f88 <_sbrk_r>
     cc8:	1007883a 	mov	r3,r2
     ccc:	00bfffc4 	movi	r2,-1
     cd0:	18807a26 	beq	r3,r2,ebc <_malloc_r+0x674>
     cd4:	1d05c83a 	sub	r2,r3,r20
     cd8:	9885883a 	add	r2,r19,r2
     cdc:	10c00054 	ori	r3,r2,1
     ce0:	b8800017 	ldw	r2,0(r23)
     ce4:	a021883a 	mov	r16,r20
     ce8:	a0c00115 	stw	r3,4(r20)
     cec:	9885883a 	add	r2,r19,r2
     cf0:	b8800015 	stw	r2,0(r23)
     cf4:	e5000215 	stw	r20,8(fp)
     cf8:	b7003626 	beq	r22,fp,dd4 <_malloc_r+0x58c>
     cfc:	018003c4 	movi	r6,15
     d00:	35404b36 	bltu	r6,r21,e30 <_malloc_r+0x5e8>
     d04:	00800044 	movi	r2,1
     d08:	a0800115 	stw	r2,4(r20)
     d0c:	003fcd06 	br	c44 <_malloc_r+0x3fc>
     d10:	2808d27a 	srli	r4,r5,9
     d14:	2000371e 	bne	r4,zero,df4 <_malloc_r+0x5ac>
     d18:	2808d0fa 	srli	r4,r5,3
     d1c:	200690fa 	slli	r3,r4,3
     d20:	1ad1883a 	add	r8,r3,r11
     d24:	41800217 	ldw	r6,8(r8)
     d28:	41805b26 	beq	r8,r6,e98 <_malloc_r+0x650>
     d2c:	30800117 	ldw	r2,4(r6)
     d30:	00ffff04 	movi	r3,-4
     d34:	10c4703a 	and	r2,r2,r3
     d38:	2880022e 	bgeu	r5,r2,d44 <_malloc_r+0x4fc>
     d3c:	31800217 	ldw	r6,8(r6)
     d40:	41bffa1e 	bne	r8,r6,d2c <_malloc_r+0x4e4>
     d44:	32000317 	ldw	r8,12(r6)
     d48:	39c00117 	ldw	r7,4(r7)
     d4c:	82000315 	stw	r8,12(r16)
     d50:	81800215 	stw	r6,8(r16)
     d54:	07000034 	movhi	fp,0
     d58:	e7155204 	addi	fp,fp,21832
     d5c:	34000315 	stw	r16,12(r6)
     d60:	44000215 	stw	r16,8(r8)
     d64:	003f3e06 	br	a60 <_malloc_r+0x218>
     d68:	63000044 	addi	r12,r12,1
     d6c:	608000cc 	andi	r2,r12,3
     d70:	10005d26 	beq	r2,zero,ee8 <_malloc_r+0x6a0>
     d74:	18c00204 	addi	r3,r3,8
     d78:	003f5106 	br	ac0 <_malloc_r+0x278>
     d7c:	8089883a 	add	r4,r16,r2
     d80:	003f6d06 	br	b38 <_malloc_r+0x2f0>
     d84:	00805504 	movi	r2,340
     d88:	10c02036 	bltu	r2,r3,e0c <_malloc_r+0x5c4>
     d8c:	8804d3fa 	srli	r2,r17,15
     d90:	11801dc4 	addi	r6,r2,119
     d94:	300490fa 	slli	r2,r6,3
     d98:	003ed806 	br	8fc <_malloc_r+0xb4>
     d9c:	48c000c4 	addi	r3,r9,3
     da0:	003f3106 	br	a68 <_malloc_r+0x220>
     da4:	05c00074 	movhi	r23,1
     da8:	bde28104 	addi	r23,r23,-30204
     dac:	b8800017 	ldw	r2,0(r23)
     db0:	988d883a 	add	r6,r19,r2
     db4:	b9800015 	stw	r6,0(r23)
     db8:	293fb21e 	bne	r5,r4,c84 <_malloc_r+0x43c>
     dbc:	2083ffcc 	andi	r2,r4,4095
     dc0:	103fb01e 	bne	r2,zero,c84 <_malloc_r+0x43c>
     dc4:	e4000217 	ldw	r16,8(fp)
     dc8:	9d45883a 	add	r2,r19,r21
     dcc:	10800054 	ori	r2,r2,1
     dd0:	80800115 	stw	r2,4(r16)
     dd4:	b8c00017 	ldw	r3,0(r23)
     dd8:	d0a6a217 	ldw	r2,-25976(gp)
     ddc:	10c0012e 	bgeu	r2,r3,de4 <_malloc_r+0x59c>
     de0:	d0e6a215 	stw	r3,-25976(gp)
     de4:	d0a6a317 	ldw	r2,-25972(gp)
     de8:	10ff962e 	bgeu	r2,r3,c44 <_malloc_r+0x3fc>
     dec:	d0e6a315 	stw	r3,-25972(gp)
     df0:	003f9406 	br	c44 <_malloc_r+0x3fc>
     df4:	00800104 	movi	r2,4
     df8:	11001e36 	bltu	r2,r4,e74 <_malloc_r+0x62c>
     dfc:	2804d1ba 	srli	r2,r5,6
     e00:	11000e04 	addi	r4,r2,56
     e04:	200690fa 	slli	r3,r4,3
     e08:	003fc506 	br	d20 <_malloc_r+0x4d8>
     e0c:	00815504 	movi	r2,1364
     e10:	10c01d2e 	bgeu	r2,r3,e88 <_malloc_r+0x640>
     e14:	01801f84 	movi	r6,126
     e18:	0080fc04 	movi	r2,1008
     e1c:	003eb706 	br	8fc <_malloc_r+0xb4>
     e20:	00800204 	movi	r2,8
     e24:	10cbc83a 	sub	r5,r2,r3
     e28:	2169883a 	add	r20,r4,r5
     e2c:	003f9e06 	br	ca8 <_malloc_r+0x460>
     e30:	00bffe04 	movi	r2,-8
     e34:	a93ffd04 	addi	r4,r21,-12
     e38:	2088703a 	and	r4,r4,r2
     e3c:	b10b883a 	add	r5,r22,r4
     e40:	00c00144 	movi	r3,5
     e44:	28c00215 	stw	r3,8(r5)
     e48:	28c00115 	stw	r3,4(r5)
     e4c:	b0800117 	ldw	r2,4(r22)
     e50:	1080004c 	andi	r2,r2,1
     e54:	2084b03a 	or	r2,r4,r2
     e58:	b0800115 	stw	r2,4(r22)
     e5c:	313fdd2e 	bgeu	r6,r4,dd4 <_malloc_r+0x58c>
     e60:	b1400204 	addi	r5,r22,8
     e64:	9009883a 	mov	r4,r18
     e68:	00011240 	call	1124 <_free_r>
     e6c:	e4000217 	ldw	r16,8(fp)
     e70:	003fd806 	br	dd4 <_malloc_r+0x58c>
     e74:	00800504 	movi	r2,20
     e78:	11001536 	bltu	r2,r4,ed0 <_malloc_r+0x688>
     e7c:	210016c4 	addi	r4,r4,91
     e80:	200690fa 	slli	r3,r4,3
     e84:	003fa606 	br	d20 <_malloc_r+0x4d8>
     e88:	8804d4ba 	srli	r2,r17,18
     e8c:	11801f04 	addi	r6,r2,124
     e90:	300490fa 	slli	r2,r6,3
     e94:	003e9906 	br	8fc <_malloc_r+0xb4>
     e98:	2009d0ba 	srai	r4,r4,2
     e9c:	01400034 	movhi	r5,0
     ea0:	29555204 	addi	r5,r5,21832
     ea4:	00c00044 	movi	r3,1
     ea8:	28800117 	ldw	r2,4(r5)
     eac:	1906983a 	sll	r3,r3,r4
     eb0:	10c4b03a 	or	r2,r2,r3
     eb4:	28800115 	stw	r2,4(r5)
     eb8:	003fa306 	br	d48 <_malloc_r+0x500>
     ebc:	0027883a 	mov	r19,zero
     ec0:	00c00044 	movi	r3,1
     ec4:	003f8606 	br	ce0 <_malloc_r+0x498>
     ec8:	d1200115 	stw	r4,-32764(gp)
     ecc:	003f7306 	br	c9c <_malloc_r+0x454>
     ed0:	00801504 	movi	r2,84
     ed4:	11001936 	bltu	r2,r4,f3c <_malloc_r+0x6f4>
     ed8:	2804d33a 	srli	r2,r5,12
     edc:	11001b84 	addi	r4,r2,110
     ee0:	200690fa 	slli	r3,r4,3
     ee4:	003f8e06 	br	d20 <_malloc_r+0x4d8>
     ee8:	480b883a 	mov	r5,r9
     eec:	6807883a 	mov	r3,r13
     ef0:	288000cc 	andi	r2,r5,3
     ef4:	18fffe04 	addi	r3,r3,-8
     ef8:	297fffc4 	addi	r5,r5,-1
     efc:	10001526 	beq	r2,zero,f54 <_malloc_r+0x70c>
     f00:	18800217 	ldw	r2,8(r3)
     f04:	10fffa26 	beq	r2,r3,ef0 <_malloc_r+0x6a8>
     f08:	2109883a 	add	r4,r4,r4
     f0c:	393f1e36 	bltu	r7,r4,b88 <_malloc_r+0x340>
     f10:	203f1d26 	beq	r4,zero,b88 <_malloc_r+0x340>
     f14:	21c4703a 	and	r2,r4,r7
     f18:	10000226 	beq	r2,zero,f24 <_malloc_r+0x6dc>
     f1c:	6013883a 	mov	r9,r12
     f20:	003ee106 	br	aa8 <_malloc_r+0x260>
     f24:	2109883a 	add	r4,r4,r4
     f28:	3904703a 	and	r2,r7,r4
     f2c:	63000104 	addi	r12,r12,4
     f30:	103ffc26 	beq	r2,zero,f24 <_malloc_r+0x6dc>
     f34:	6013883a 	mov	r9,r12
     f38:	003edb06 	br	aa8 <_malloc_r+0x260>
     f3c:	00805504 	movi	r2,340
     f40:	11000836 	bltu	r2,r4,f64 <_malloc_r+0x71c>
     f44:	2804d3fa 	srli	r2,r5,15
     f48:	11001dc4 	addi	r4,r2,119
     f4c:	200690fa 	slli	r3,r4,3
     f50:	003f7306 	br	d20 <_malloc_r+0x4d8>
     f54:	0104303a 	nor	r2,zero,r4
     f58:	388e703a 	and	r7,r7,r2
     f5c:	e1c00115 	stw	r7,4(fp)
     f60:	003fe906 	br	f08 <_malloc_r+0x6c0>
     f64:	00815504 	movi	r2,1364
     f68:	1100032e 	bgeu	r2,r4,f78 <_malloc_r+0x730>
     f6c:	01001f84 	movi	r4,126
     f70:	00c0fc04 	movi	r3,1008
     f74:	003f6a06 	br	d20 <_malloc_r+0x4d8>
     f78:	2804d4ba 	srli	r2,r5,18
     f7c:	11001f04 	addi	r4,r2,124
     f80:	200690fa 	slli	r3,r4,3
     f84:	003f6606 	br	d20 <_malloc_r+0x4d8>

00000f88 <_sbrk_r>:
     f88:	defffd04 	addi	sp,sp,-12
     f8c:	dc000015 	stw	r16,0(sp)
     f90:	04000074 	movhi	r16,1
     f94:	84227a04 	addi	r16,r16,-30232
     f98:	dc400115 	stw	r17,4(sp)
     f9c:	80000015 	stw	zero,0(r16)
     fa0:	2023883a 	mov	r17,r4
     fa4:	2809883a 	mov	r4,r5
     fa8:	dfc00215 	stw	ra,8(sp)
     fac:	00019bc0 	call	19bc <sbrk>
     fb0:	1007883a 	mov	r3,r2
     fb4:	00bfffc4 	movi	r2,-1
     fb8:	18800626 	beq	r3,r2,fd4 <_sbrk_r+0x4c>
     fbc:	1805883a 	mov	r2,r3
     fc0:	dfc00217 	ldw	ra,8(sp)
     fc4:	dc400117 	ldw	r17,4(sp)
     fc8:	dc000017 	ldw	r16,0(sp)
     fcc:	dec00304 	addi	sp,sp,12
     fd0:	f800283a 	ret
     fd4:	80800017 	ldw	r2,0(r16)
     fd8:	103ff826 	beq	r2,zero,fbc <_sbrk_r+0x34>
     fdc:	88800015 	stw	r2,0(r17)
     fe0:	1805883a 	mov	r2,r3
     fe4:	dfc00217 	ldw	ra,8(sp)
     fe8:	dc400117 	ldw	r17,4(sp)
     fec:	dc000017 	ldw	r16,0(sp)
     ff0:	dec00304 	addi	sp,sp,12
     ff4:	f800283a 	ret

00000ff8 <_malloc_trim_r>:
     ff8:	defffb04 	addi	sp,sp,-20
     ffc:	dcc00315 	stw	r19,12(sp)
    1000:	04c00034 	movhi	r19,0
    1004:	9cd55204 	addi	r19,r19,21832
    1008:	dc800215 	stw	r18,8(sp)
    100c:	dc400115 	stw	r17,4(sp)
    1010:	dc000015 	stw	r16,0(sp)
    1014:	2823883a 	mov	r17,r5
    1018:	2025883a 	mov	r18,r4
    101c:	dfc00415 	stw	ra,16(sp)
    1020:	00016e40 	call	16e4 <__malloc_lock>
    1024:	98800217 	ldw	r2,8(r19)
    1028:	9009883a 	mov	r4,r18
    102c:	000b883a 	mov	r5,zero
    1030:	10c00117 	ldw	r3,4(r2)
    1034:	00bfff04 	movi	r2,-4
    1038:	18a0703a 	and	r16,r3,r2
    103c:	8463c83a 	sub	r17,r16,r17
    1040:	8c43fbc4 	addi	r17,r17,4079
    1044:	8822d33a 	srli	r17,r17,12
    1048:	0083ffc4 	movi	r2,4095
    104c:	8c7fffc4 	addi	r17,r17,-1
    1050:	8822933a 	slli	r17,r17,12
    1054:	1440060e 	bge	r2,r17,1070 <_malloc_trim_r+0x78>
    1058:	0000f880 	call	f88 <_sbrk_r>
    105c:	98c00217 	ldw	r3,8(r19)
    1060:	9009883a 	mov	r4,r18
    1064:	044bc83a 	sub	r5,zero,r17
    1068:	80c7883a 	add	r3,r16,r3
    106c:	10c00926 	beq	r2,r3,1094 <_malloc_trim_r+0x9c>
    1070:	00017040 	call	1704 <__malloc_unlock>
    1074:	0005883a 	mov	r2,zero
    1078:	dfc00417 	ldw	ra,16(sp)
    107c:	dcc00317 	ldw	r19,12(sp)
    1080:	dc800217 	ldw	r18,8(sp)
    1084:	dc400117 	ldw	r17,4(sp)
    1088:	dc000017 	ldw	r16,0(sp)
    108c:	dec00504 	addi	sp,sp,20
    1090:	f800283a 	ret
    1094:	9009883a 	mov	r4,r18
    1098:	0000f880 	call	f88 <_sbrk_r>
    109c:	844dc83a 	sub	r6,r16,r17
    10a0:	00ffffc4 	movi	r3,-1
    10a4:	9009883a 	mov	r4,r18
    10a8:	000b883a 	mov	r5,zero
    10ac:	01c00074 	movhi	r7,1
    10b0:	39e28104 	addi	r7,r7,-30204
    10b4:	31800054 	ori	r6,r6,1
    10b8:	10c00926 	beq	r2,r3,10e0 <_malloc_trim_r+0xe8>
    10bc:	38800017 	ldw	r2,0(r7)
    10c0:	98c00217 	ldw	r3,8(r19)
    10c4:	9009883a 	mov	r4,r18
    10c8:	1445c83a 	sub	r2,r2,r17
    10cc:	38800015 	stw	r2,0(r7)
    10d0:	19800115 	stw	r6,4(r3)
    10d4:	00017040 	call	1704 <__malloc_unlock>
    10d8:	00800044 	movi	r2,1
    10dc:	003fe606 	br	1078 <_malloc_trim_r+0x80>
    10e0:	0000f880 	call	f88 <_sbrk_r>
    10e4:	99800217 	ldw	r6,8(r19)
    10e8:	100f883a 	mov	r7,r2
    10ec:	9009883a 	mov	r4,r18
    10f0:	1187c83a 	sub	r3,r2,r6
    10f4:	008003c4 	movi	r2,15
    10f8:	19400054 	ori	r5,r3,1
    10fc:	10ffdc0e 	bge	r2,r3,1070 <_malloc_trim_r+0x78>
    1100:	00800034 	movhi	r2,0
    1104:	109bd704 	addi	r2,r2,28508
    1108:	10c00017 	ldw	r3,0(r2)
    110c:	00800074 	movhi	r2,1
    1110:	10a28104 	addi	r2,r2,-30204
    1114:	31400115 	stw	r5,4(r6)
    1118:	38c7c83a 	sub	r3,r7,r3
    111c:	10c00015 	stw	r3,0(r2)
    1120:	003fd306 	br	1070 <_malloc_trim_r+0x78>

00001124 <_free_r>:
    1124:	defffd04 	addi	sp,sp,-12
    1128:	dc400115 	stw	r17,4(sp)
    112c:	dc000015 	stw	r16,0(sp)
    1130:	dfc00215 	stw	ra,8(sp)
    1134:	2821883a 	mov	r16,r5
    1138:	2023883a 	mov	r17,r4
    113c:	28005a26 	beq	r5,zero,12a8 <_free_r+0x184>
    1140:	00016e40 	call	16e4 <__malloc_lock>
    1144:	823ffe04 	addi	r8,r16,-8
    1148:	41400117 	ldw	r5,4(r8)
    114c:	00bfff84 	movi	r2,-2
    1150:	02800034 	movhi	r10,0
    1154:	52955204 	addi	r10,r10,21832
    1158:	288e703a 	and	r7,r5,r2
    115c:	41cd883a 	add	r6,r8,r7
    1160:	30c00117 	ldw	r3,4(r6)
    1164:	51000217 	ldw	r4,8(r10)
    1168:	00bfff04 	movi	r2,-4
    116c:	1892703a 	and	r9,r3,r2
    1170:	5017883a 	mov	r11,r10
    1174:	31006726 	beq	r6,r4,1314 <_free_r+0x1f0>
    1178:	2880004c 	andi	r2,r5,1
    117c:	1005003a 	cmpeq	r2,r2,zero
    1180:	32400115 	stw	r9,4(r6)
    1184:	10001a1e 	bne	r2,zero,11f0 <_free_r+0xcc>
    1188:	000b883a 	mov	r5,zero
    118c:	3247883a 	add	r3,r6,r9
    1190:	18800117 	ldw	r2,4(r3)
    1194:	1080004c 	andi	r2,r2,1
    1198:	1000231e 	bne	r2,zero,1228 <_free_r+0x104>
    119c:	280ac03a 	cmpne	r5,r5,zero
    11a0:	3a4f883a 	add	r7,r7,r9
    11a4:	2800451e 	bne	r5,zero,12bc <_free_r+0x198>
    11a8:	31000217 	ldw	r4,8(r6)
    11ac:	00800034 	movhi	r2,0
    11b0:	10955404 	addi	r2,r2,21840
    11b4:	20807b26 	beq	r4,r2,13a4 <_free_r+0x280>
    11b8:	30800317 	ldw	r2,12(r6)
    11bc:	3a07883a 	add	r3,r7,r8
    11c0:	19c00015 	stw	r7,0(r3)
    11c4:	11000215 	stw	r4,8(r2)
    11c8:	20800315 	stw	r2,12(r4)
    11cc:	38800054 	ori	r2,r7,1
    11d0:	40800115 	stw	r2,4(r8)
    11d4:	28001a26 	beq	r5,zero,1240 <_free_r+0x11c>
    11d8:	8809883a 	mov	r4,r17
    11dc:	dfc00217 	ldw	ra,8(sp)
    11e0:	dc400117 	ldw	r17,4(sp)
    11e4:	dc000017 	ldw	r16,0(sp)
    11e8:	dec00304 	addi	sp,sp,12
    11ec:	00017041 	jmpi	1704 <__malloc_unlock>
    11f0:	80bffe17 	ldw	r2,-8(r16)
    11f4:	50c00204 	addi	r3,r10,8
    11f8:	4091c83a 	sub	r8,r8,r2
    11fc:	41000217 	ldw	r4,8(r8)
    1200:	388f883a 	add	r7,r7,r2
    1204:	20c06126 	beq	r4,r3,138c <_free_r+0x268>
    1208:	40800317 	ldw	r2,12(r8)
    120c:	3247883a 	add	r3,r6,r9
    1210:	000b883a 	mov	r5,zero
    1214:	11000215 	stw	r4,8(r2)
    1218:	20800315 	stw	r2,12(r4)
    121c:	18800117 	ldw	r2,4(r3)
    1220:	1080004c 	andi	r2,r2,1
    1224:	103fdd26 	beq	r2,zero,119c <_free_r+0x78>
    1228:	38800054 	ori	r2,r7,1
    122c:	3a07883a 	add	r3,r7,r8
    1230:	280ac03a 	cmpne	r5,r5,zero
    1234:	40800115 	stw	r2,4(r8)
    1238:	19c00015 	stw	r7,0(r3)
    123c:	283fe61e 	bne	r5,zero,11d8 <_free_r+0xb4>
    1240:	00807fc4 	movi	r2,511
    1244:	11c01f2e 	bgeu	r2,r7,12c4 <_free_r+0x1a0>
    1248:	3806d27a 	srli	r3,r7,9
    124c:	1800481e 	bne	r3,zero,1370 <_free_r+0x24c>
    1250:	3804d0fa 	srli	r2,r7,3
    1254:	100690fa 	slli	r3,r2,3
    1258:	1acd883a 	add	r6,r3,r11
    125c:	31400217 	ldw	r5,8(r6)
    1260:	31405926 	beq	r6,r5,13c8 <_free_r+0x2a4>
    1264:	28800117 	ldw	r2,4(r5)
    1268:	00ffff04 	movi	r3,-4
    126c:	10c4703a 	and	r2,r2,r3
    1270:	3880022e 	bgeu	r7,r2,127c <_free_r+0x158>
    1274:	29400217 	ldw	r5,8(r5)
    1278:	317ffa1e 	bne	r6,r5,1264 <_free_r+0x140>
    127c:	29800317 	ldw	r6,12(r5)
    1280:	41800315 	stw	r6,12(r8)
    1284:	41400215 	stw	r5,8(r8)
    1288:	8809883a 	mov	r4,r17
    128c:	2a000315 	stw	r8,12(r5)
    1290:	32000215 	stw	r8,8(r6)
    1294:	dfc00217 	ldw	ra,8(sp)
    1298:	dc400117 	ldw	r17,4(sp)
    129c:	dc000017 	ldw	r16,0(sp)
    12a0:	dec00304 	addi	sp,sp,12
    12a4:	00017041 	jmpi	1704 <__malloc_unlock>
    12a8:	dfc00217 	ldw	ra,8(sp)
    12ac:	dc400117 	ldw	r17,4(sp)
    12b0:	dc000017 	ldw	r16,0(sp)
    12b4:	dec00304 	addi	sp,sp,12
    12b8:	f800283a 	ret
    12bc:	31000217 	ldw	r4,8(r6)
    12c0:	003fbd06 	br	11b8 <_free_r+0x94>
    12c4:	3806d0fa 	srli	r3,r7,3
    12c8:	00800044 	movi	r2,1
    12cc:	51400117 	ldw	r5,4(r10)
    12d0:	180890fa 	slli	r4,r3,3
    12d4:	1807d0ba 	srai	r3,r3,2
    12d8:	22c9883a 	add	r4,r4,r11
    12dc:	21800217 	ldw	r6,8(r4)
    12e0:	10c4983a 	sll	r2,r2,r3
    12e4:	41000315 	stw	r4,12(r8)
    12e8:	41800215 	stw	r6,8(r8)
    12ec:	288ab03a 	or	r5,r5,r2
    12f0:	22000215 	stw	r8,8(r4)
    12f4:	8809883a 	mov	r4,r17
    12f8:	51400115 	stw	r5,4(r10)
    12fc:	32000315 	stw	r8,12(r6)
    1300:	dfc00217 	ldw	ra,8(sp)
    1304:	dc400117 	ldw	r17,4(sp)
    1308:	dc000017 	ldw	r16,0(sp)
    130c:	dec00304 	addi	sp,sp,12
    1310:	00017041 	jmpi	1704 <__malloc_unlock>
    1314:	2880004c 	andi	r2,r5,1
    1318:	3a4d883a 	add	r6,r7,r9
    131c:	1000071e 	bne	r2,zero,133c <_free_r+0x218>
    1320:	80bffe17 	ldw	r2,-8(r16)
    1324:	4091c83a 	sub	r8,r8,r2
    1328:	41000317 	ldw	r4,12(r8)
    132c:	40c00217 	ldw	r3,8(r8)
    1330:	308d883a 	add	r6,r6,r2
    1334:	20c00215 	stw	r3,8(r4)
    1338:	19000315 	stw	r4,12(r3)
    133c:	00800034 	movhi	r2,0
    1340:	109bd604 	addi	r2,r2,28504
    1344:	11000017 	ldw	r4,0(r2)
    1348:	30c00054 	ori	r3,r6,1
    134c:	52000215 	stw	r8,8(r10)
    1350:	40c00115 	stw	r3,4(r8)
    1354:	313fa036 	bltu	r6,r4,11d8 <_free_r+0xb4>
    1358:	00800074 	movhi	r2,1
    135c:	10a27704 	addi	r2,r2,-30244
    1360:	11400017 	ldw	r5,0(r2)
    1364:	8809883a 	mov	r4,r17
    1368:	0000ff80 	call	ff8 <_malloc_trim_r>
    136c:	003f9a06 	br	11d8 <_free_r+0xb4>
    1370:	00800104 	movi	r2,4
    1374:	10c0072e 	bgeu	r2,r3,1394 <_free_r+0x270>
    1378:	00800504 	movi	r2,20
    137c:	10c01936 	bltu	r2,r3,13e4 <_free_r+0x2c0>
    1380:	188016c4 	addi	r2,r3,91
    1384:	100690fa 	slli	r3,r2,3
    1388:	003fb306 	br	1258 <_free_r+0x134>
    138c:	01400044 	movi	r5,1
    1390:	003f7e06 	br	118c <_free_r+0x68>
    1394:	3804d1ba 	srli	r2,r7,6
    1398:	10800e04 	addi	r2,r2,56
    139c:	100690fa 	slli	r3,r2,3
    13a0:	003fad06 	br	1258 <_free_r+0x134>
    13a4:	22000315 	stw	r8,12(r4)
    13a8:	22000215 	stw	r8,8(r4)
    13ac:	3a05883a 	add	r2,r7,r8
    13b0:	38c00054 	ori	r3,r7,1
    13b4:	11c00015 	stw	r7,0(r2)
    13b8:	41000215 	stw	r4,8(r8)
    13bc:	40c00115 	stw	r3,4(r8)
    13c0:	41000315 	stw	r4,12(r8)
    13c4:	003f8406 	br	11d8 <_free_r+0xb4>
    13c8:	1005d0ba 	srai	r2,r2,2
    13cc:	00c00044 	movi	r3,1
    13d0:	51000117 	ldw	r4,4(r10)
    13d4:	1886983a 	sll	r3,r3,r2
    13d8:	20c8b03a 	or	r4,r4,r3
    13dc:	51000115 	stw	r4,4(r10)
    13e0:	003fa706 	br	1280 <_free_r+0x15c>
    13e4:	00801504 	movi	r2,84
    13e8:	10c00436 	bltu	r2,r3,13fc <_free_r+0x2d8>
    13ec:	3804d33a 	srli	r2,r7,12
    13f0:	10801b84 	addi	r2,r2,110
    13f4:	100690fa 	slli	r3,r2,3
    13f8:	003f9706 	br	1258 <_free_r+0x134>
    13fc:	00805504 	movi	r2,340
    1400:	10c00436 	bltu	r2,r3,1414 <_free_r+0x2f0>
    1404:	3804d3fa 	srli	r2,r7,15
    1408:	10801dc4 	addi	r2,r2,119
    140c:	100690fa 	slli	r3,r2,3
    1410:	003f9106 	br	1258 <_free_r+0x134>
    1414:	00815504 	movi	r2,1364
    1418:	10c0032e 	bgeu	r2,r3,1428 <_free_r+0x304>
    141c:	00801f84 	movi	r2,126
    1420:	00c0fc04 	movi	r3,1008
    1424:	003f8c06 	br	1258 <_free_r+0x134>
    1428:	3804d4ba 	srli	r2,r7,18
    142c:	10801f04 	addi	r2,r2,124
    1430:	100690fa 	slli	r3,r2,3
    1434:	003f8806 	br	1258 <_free_r+0x134>

00001438 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1438:	defff404 	addi	sp,sp,-48
    143c:	df000b15 	stw	fp,44(sp)
    1440:	df000b04 	addi	fp,sp,44
    1444:	e13ffb15 	stw	r4,-20(fp)
    1448:	e17ffc15 	stw	r5,-16(fp)
    144c:	e1bffd15 	stw	r6,-12(fp)
    1450:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1454:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1458:	00800074 	movhi	r2,1
    145c:	10a27e04 	addi	r2,r2,-30216
    1460:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1464:	1005003a 	cmpeq	r2,r2,zero
    1468:	1000411e 	bne	r2,zero,1570 <alt_alarm_start+0x138>
  {
    if (alarm)
    146c:	e0bffb17 	ldw	r2,-20(fp)
    1470:	1005003a 	cmpeq	r2,r2,zero
    1474:	10003b1e 	bne	r2,zero,1564 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    1478:	e0fffb17 	ldw	r3,-20(fp)
    147c:	e0bffd17 	ldw	r2,-12(fp)
    1480:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    1484:	e0fffb17 	ldw	r3,-20(fp)
    1488:	e0bffe17 	ldw	r2,-8(fp)
    148c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1490:	0005303a 	rdctl	r2,status
    1494:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1498:	e0fff817 	ldw	r3,-32(fp)
    149c:	00bfff84 	movi	r2,-2
    14a0:	1884703a 	and	r2,r3,r2
    14a4:	1001703a 	wrctl	status,r2
  
  return context;
    14a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    14ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    14b0:	00800074 	movhi	r2,1
    14b4:	10a27f04 	addi	r2,r2,-30212
    14b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    14bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    14c0:	e0fffc17 	ldw	r3,-16(fp)
    14c4:	e0bff917 	ldw	r2,-28(fp)
    14c8:	1885883a 	add	r2,r3,r2
    14cc:	10c00044 	addi	r3,r2,1
    14d0:	e0bffb17 	ldw	r2,-20(fp)
    14d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    14d8:	e0bffb17 	ldw	r2,-20(fp)
    14dc:	10c00217 	ldw	r3,8(r2)
    14e0:	e0bff917 	ldw	r2,-28(fp)
    14e4:	1880042e 	bgeu	r3,r2,14f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    14e8:	e0fffb17 	ldw	r3,-20(fp)
    14ec:	00800044 	movi	r2,1
    14f0:	18800405 	stb	r2,16(r3)
    14f4:	00000206 	br	1500 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    14f8:	e0bffb17 	ldw	r2,-20(fp)
    14fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1500:	e0fffb17 	ldw	r3,-20(fp)
    1504:	00800034 	movhi	r2,0
    1508:	109bdb04 	addi	r2,r2,28524
    150c:	e0bff615 	stw	r2,-40(fp)
    1510:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1514:	e0fff717 	ldw	r3,-36(fp)
    1518:	e0bff617 	ldw	r2,-40(fp)
    151c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1520:	e0bff617 	ldw	r2,-40(fp)
    1524:	10c00017 	ldw	r3,0(r2)
    1528:	e0bff717 	ldw	r2,-36(fp)
    152c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1530:	e0bff617 	ldw	r2,-40(fp)
    1534:	10c00017 	ldw	r3,0(r2)
    1538:	e0bff717 	ldw	r2,-36(fp)
    153c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1540:	e0fff617 	ldw	r3,-40(fp)
    1544:	e0bff717 	ldw	r2,-36(fp)
    1548:	18800015 	stw	r2,0(r3)
    154c:	e0bffa17 	ldw	r2,-24(fp)
    1550:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1554:	e0bff517 	ldw	r2,-44(fp)
    1558:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    155c:	e03fff15 	stw	zero,-4(fp)
    1560:	00000506 	br	1578 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    1564:	00bffa84 	movi	r2,-22
    1568:	e0bfff15 	stw	r2,-4(fp)
    156c:	00000206 	br	1578 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    1570:	00bfde84 	movi	r2,-134
    1574:	e0bfff15 	stw	r2,-4(fp)
    1578:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    157c:	e037883a 	mov	sp,fp
    1580:	df000017 	ldw	fp,0(sp)
    1584:	dec00104 	addi	sp,sp,4
    1588:	f800283a 	ret

0000158c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    158c:	defffe04 	addi	sp,sp,-8
    1590:	dfc00115 	stw	ra,4(sp)
    1594:	df000015 	stw	fp,0(sp)
    1598:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    159c:	01000034 	movhi	r4,0
    15a0:	211be404 	addi	r4,r4,28560
    15a4:	01400034 	movhi	r5,0
    15a8:	29555204 	addi	r5,r5,21832
    15ac:	01800034 	movhi	r6,0
    15b0:	319be404 	addi	r6,r6,28560
    15b4:	000160c0 	call	160c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    15b8:	01000034 	movhi	r4,0
    15bc:	21000804 	addi	r4,r4,32
    15c0:	01400034 	movhi	r5,0
    15c4:	29400804 	addi	r5,r5,32
    15c8:	01800034 	movhi	r6,0
    15cc:	31806d04 	addi	r6,r6,436
    15d0:	000160c0 	call	160c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    15d4:	01000034 	movhi	r4,0
    15d8:	21152504 	addi	r4,r4,21652
    15dc:	01400034 	movhi	r5,0
    15e0:	29552504 	addi	r5,r5,21652
    15e4:	01800034 	movhi	r6,0
    15e8:	31955204 	addi	r6,r6,21832
    15ec:	000160c0 	call	160c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    15f0:	00029f00 	call	29f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    15f4:	0002c140 	call	2c14 <alt_icache_flush_all>
}
    15f8:	e037883a 	mov	sp,fp
    15fc:	dfc00117 	ldw	ra,4(sp)
    1600:	df000017 	ldw	fp,0(sp)
    1604:	dec00204 	addi	sp,sp,8
    1608:	f800283a 	ret

0000160c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    160c:	defffc04 	addi	sp,sp,-16
    1610:	df000315 	stw	fp,12(sp)
    1614:	df000304 	addi	fp,sp,12
    1618:	e13ffd15 	stw	r4,-12(fp)
    161c:	e17ffe15 	stw	r5,-8(fp)
    1620:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1624:	e0fffe17 	ldw	r3,-8(fp)
    1628:	e0bffd17 	ldw	r2,-12(fp)
    162c:	18800e26 	beq	r3,r2,1668 <alt_load_section+0x5c>
  {
    while( to != end )
    1630:	00000a06 	br	165c <alt_load_section+0x50>
    {
      *to++ = *from++;
    1634:	e0bffd17 	ldw	r2,-12(fp)
    1638:	10c00017 	ldw	r3,0(r2)
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	10c00015 	stw	r3,0(r2)
    1644:	e0bffe17 	ldw	r2,-8(fp)
    1648:	10800104 	addi	r2,r2,4
    164c:	e0bffe15 	stw	r2,-8(fp)
    1650:	e0bffd17 	ldw	r2,-12(fp)
    1654:	10800104 	addi	r2,r2,4
    1658:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    165c:	e0fffe17 	ldw	r3,-8(fp)
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	18bff31e 	bne	r3,r2,1634 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1668:	e037883a 	mov	sp,fp
    166c:	df000017 	ldw	fp,0(sp)
    1670:	dec00104 	addi	sp,sp,4
    1674:	f800283a 	ret

00001678 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1678:	defffd04 	addi	sp,sp,-12
    167c:	dfc00215 	stw	ra,8(sp)
    1680:	df000115 	stw	fp,4(sp)
    1684:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1688:	0009883a 	mov	r4,zero
    168c:	0001c1c0 	call	1c1c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1690:	0001c500 	call	1c50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1694:	01000034 	movhi	r4,0
    1698:	21154704 	addi	r4,r4,21788
    169c:	01400034 	movhi	r5,0
    16a0:	29554704 	addi	r5,r5,21788
    16a4:	01800034 	movhi	r6,0
    16a8:	31954704 	addi	r6,r6,21788
    16ac:	0002fd40 	call	2fd4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    16b0:	0002b4c0 	call	2b4c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    16b4:	01000034 	movhi	r4,0
    16b8:	210aec04 	addi	r4,r4,11184
    16bc:	000364c0 	call	364c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    16c0:	d126a517 	ldw	r4,-25964(gp)
    16c4:	d166a617 	ldw	r5,-25960(gp)
    16c8:	d1a6a717 	ldw	r6,-25956(gp)
    16cc:	00001f00 	call	1f0 <main>
    16d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    16d4:	01000044 	movi	r4,1
    16d8:	00028900 	call	2890 <close>
  exit (result);
    16dc:	e13fff17 	ldw	r4,-4(fp)
    16e0:	00036600 	call	3660 <exit>

000016e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    16e4:	defffe04 	addi	sp,sp,-8
    16e8:	df000115 	stw	fp,4(sp)
    16ec:	df000104 	addi	fp,sp,4
    16f0:	e13fff15 	stw	r4,-4(fp)
}
    16f4:	e037883a 	mov	sp,fp
    16f8:	df000017 	ldw	fp,0(sp)
    16fc:	dec00104 	addi	sp,sp,4
    1700:	f800283a 	ret

00001704 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    1704:	defffe04 	addi	sp,sp,-8
    1708:	df000115 	stw	fp,4(sp)
    170c:	df000104 	addi	fp,sp,4
    1710:	e13fff15 	stw	r4,-4(fp)
}
    1714:	e037883a 	mov	sp,fp
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00104 	addi	sp,sp,4
    1720:	f800283a 	ret

00001724 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1724:	defff204 	addi	sp,sp,-56
    1728:	dfc00a15 	stw	ra,40(sp)
    172c:	df000915 	stw	fp,36(sp)
    1730:	df000904 	addi	fp,sp,36
    1734:	e1400215 	stw	r5,8(fp)
    1738:	e1800315 	stw	r6,12(fp)
    173c:	e1c00415 	stw	r7,16(fp)
    1740:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    1744:	e0800204 	addi	r2,fp,8
    1748:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    174c:	e0bfff17 	ldw	r2,-4(fp)
    1750:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    1754:	00007806 	br	1938 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1758:	e0bffc07 	ldb	r2,-16(fp)
    175c:	10800960 	cmpeqi	r2,r2,37
    1760:	1000031e 	bne	r2,zero,1770 <alt_printf+0x4c>
        {
            alt_putchar(c);
    1764:	e13ffc07 	ldb	r4,-16(fp)
    1768:	000197c0 	call	197c <alt_putchar>
    176c:	00007206 	br	1938 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1770:	e0bffd17 	ldw	r2,-12(fp)
    1774:	10800003 	ldbu	r2,0(r2)
    1778:	e0bffc05 	stb	r2,-16(fp)
    177c:	e0bffc07 	ldb	r2,-16(fp)
    1780:	1004c03a 	cmpne	r2,r2,zero
    1784:	1007883a 	mov	r3,r2
    1788:	e0bffd17 	ldw	r2,-12(fp)
    178c:	10800044 	addi	r2,r2,1
    1790:	e0bffd15 	stw	r2,-12(fp)
    1794:	18803fcc 	andi	r2,r3,255
    1798:	1005003a 	cmpeq	r2,r2,zero
    179c:	1000721e 	bne	r2,zero,1968 <alt_printf+0x244>
            {
                if (c == '%')
    17a0:	e0bffc07 	ldb	r2,-16(fp)
    17a4:	10800958 	cmpnei	r2,r2,37
    17a8:	1000031e 	bne	r2,zero,17b8 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    17ac:	e13ffc07 	ldb	r4,-16(fp)
    17b0:	000197c0 	call	197c <alt_putchar>
    17b4:	00006006 	br	1938 <alt_printf+0x214>
                } 
                else if (c == 'c')
    17b8:	e0bffc07 	ldb	r2,-16(fp)
    17bc:	108018d8 	cmpnei	r2,r2,99
    17c0:	1000091e 	bne	r2,zero,17e8 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    17c4:	e0fffe17 	ldw	r3,-8(fp)
    17c8:	18800104 	addi	r2,r3,4
    17cc:	e0bffe15 	stw	r2,-8(fp)
    17d0:	1805883a 	mov	r2,r3
    17d4:	10800017 	ldw	r2,0(r2)
    17d8:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    17dc:	e13ffb17 	ldw	r4,-20(fp)
    17e0:	000197c0 	call	197c <alt_putchar>
    17e4:	00005406 	br	1938 <alt_printf+0x214>
                }
                else if (c == 'x')
    17e8:	e0bffc07 	ldb	r2,-16(fp)
    17ec:	10801e18 	cmpnei	r2,r2,120
    17f0:	1000371e 	bne	r2,zero,18d0 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    17f4:	e0fffe17 	ldw	r3,-8(fp)
    17f8:	18800104 	addi	r2,r3,4
    17fc:	e0bffe15 	stw	r2,-8(fp)
    1800:	1805883a 	mov	r2,r3
    1804:	10800017 	ldw	r2,0(r2)
    1808:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    180c:	e0bffa17 	ldw	r2,-24(fp)
    1810:	1004c03a 	cmpne	r2,r2,zero
    1814:	1000031e 	bne	r2,zero,1824 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    1818:	01000c04 	movi	r4,48
    181c:	000197c0 	call	197c <alt_putchar>
                        continue;
    1820:	00004506 	br	1938 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    1824:	00800704 	movi	r2,28
    1828:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    182c:	00000306 	br	183c <alt_printf+0x118>
                        digit_shift -= 4;
    1830:	e0bff817 	ldw	r2,-32(fp)
    1834:	10bfff04 	addi	r2,r2,-4
    1838:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    183c:	00c003c4 	movi	r3,15
    1840:	e0bff817 	ldw	r2,-32(fp)
    1844:	1884983a 	sll	r2,r3,r2
    1848:	1007883a 	mov	r3,r2
    184c:	e0bffa17 	ldw	r2,-24(fp)
    1850:	1884703a 	and	r2,r3,r2
    1854:	1005003a 	cmpeq	r2,r2,zero
    1858:	103ff51e 	bne	r2,zero,1830 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    185c:	00001806 	br	18c0 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1860:	00c003c4 	movi	r3,15
    1864:	e0bff817 	ldw	r2,-32(fp)
    1868:	1884983a 	sll	r2,r3,r2
    186c:	1007883a 	mov	r3,r2
    1870:	e0bffa17 	ldw	r2,-24(fp)
    1874:	1886703a 	and	r3,r3,r2
    1878:	e0bff817 	ldw	r2,-32(fp)
    187c:	1884d83a 	srl	r2,r3,r2
    1880:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    1884:	e0bff917 	ldw	r2,-28(fp)
    1888:	108002a8 	cmpgeui	r2,r2,10
    188c:	1000041e 	bne	r2,zero,18a0 <alt_printf+0x17c>
                            c = '0' + digit;
    1890:	e0bff917 	ldw	r2,-28(fp)
    1894:	10800c04 	addi	r2,r2,48
    1898:	e0bffc05 	stb	r2,-16(fp)
    189c:	00000306 	br	18ac <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    18a0:	e0bff917 	ldw	r2,-28(fp)
    18a4:	108015c4 	addi	r2,r2,87
    18a8:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    18ac:	e13ffc07 	ldb	r4,-16(fp)
    18b0:	000197c0 	call	197c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    18b4:	e0bff817 	ldw	r2,-32(fp)
    18b8:	10bfff04 	addi	r2,r2,-4
    18bc:	e0bff815 	stw	r2,-32(fp)
    18c0:	e0bff817 	ldw	r2,-32(fp)
    18c4:	1004403a 	cmpge	r2,r2,zero
    18c8:	103fe51e 	bne	r2,zero,1860 <alt_printf+0x13c>
    18cc:	00001a06 	br	1938 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    18d0:	e0bffc07 	ldb	r2,-16(fp)
    18d4:	10801cd8 	cmpnei	r2,r2,115
    18d8:	1000171e 	bne	r2,zero,1938 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    18dc:	e0fffe17 	ldw	r3,-8(fp)
    18e0:	18800104 	addi	r2,r3,4
    18e4:	e0bffe15 	stw	r2,-8(fp)
    18e8:	1805883a 	mov	r2,r3
    18ec:	10800017 	ldw	r2,0(r2)
    18f0:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    18f4:	00000906 	br	191c <alt_printf+0x1f8>
                      alt_putchar(*s++);
    18f8:	e0bff717 	ldw	r2,-36(fp)
    18fc:	10800003 	ldbu	r2,0(r2)
    1900:	11003fcc 	andi	r4,r2,255
    1904:	2100201c 	xori	r4,r4,128
    1908:	213fe004 	addi	r4,r4,-128
    190c:	e0bff717 	ldw	r2,-36(fp)
    1910:	10800044 	addi	r2,r2,1
    1914:	e0bff715 	stw	r2,-36(fp)
    1918:	000197c0 	call	197c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    191c:	e0bff717 	ldw	r2,-36(fp)
    1920:	10800003 	ldbu	r2,0(r2)
    1924:	10803fcc 	andi	r2,r2,255
    1928:	1080201c 	xori	r2,r2,128
    192c:	10bfe004 	addi	r2,r2,-128
    1930:	1004c03a 	cmpne	r2,r2,zero
    1934:	103ff01e 	bne	r2,zero,18f8 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1938:	e0bffd17 	ldw	r2,-12(fp)
    193c:	10800003 	ldbu	r2,0(r2)
    1940:	e0bffc05 	stb	r2,-16(fp)
    1944:	e0bffc07 	ldb	r2,-16(fp)
    1948:	1004c03a 	cmpne	r2,r2,zero
    194c:	1007883a 	mov	r3,r2
    1950:	e0bffd17 	ldw	r2,-12(fp)
    1954:	10800044 	addi	r2,r2,1
    1958:	e0bffd15 	stw	r2,-12(fp)
    195c:	18803fcc 	andi	r2,r3,255
    1960:	1004c03a 	cmpne	r2,r2,zero
    1964:	103f7c1e 	bne	r2,zero,1758 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    1968:	e037883a 	mov	sp,fp
    196c:	dfc00117 	ldw	ra,4(sp)
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00504 	addi	sp,sp,20
    1978:	f800283a 	ret

0000197c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    197c:	defffd04 	addi	sp,sp,-12
    1980:	dfc00215 	stw	ra,8(sp)
    1984:	df000115 	stw	fp,4(sp)
    1988:	df000104 	addi	fp,sp,4
    198c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    1990:	00800034 	movhi	r2,0
    1994:	109bd804 	addi	r2,r2,28512
    1998:	10800017 	ldw	r2,0(r2)
    199c:	11400217 	ldw	r5,8(r2)
    19a0:	e13fff17 	ldw	r4,-4(fp)
    19a4:	00037ac0 	call	37ac <putc>
#endif
}
    19a8:	e037883a 	mov	sp,fp
    19ac:	dfc00117 	ldw	ra,4(sp)
    19b0:	df000017 	ldw	fp,0(sp)
    19b4:	dec00204 	addi	sp,sp,8
    19b8:	f800283a 	ret

000019bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    19bc:	defff804 	addi	sp,sp,-32
    19c0:	df000715 	stw	fp,28(sp)
    19c4:	df000704 	addi	fp,sp,28
    19c8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    19cc:	0005303a 	rdctl	r2,status
    19d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    19d4:	e0fffb17 	ldw	r3,-20(fp)
    19d8:	00bfff84 	movi	r2,-2
    19dc:	1884703a 	and	r2,r3,r2
    19e0:	1001703a 	wrctl	status,r2
  
  return context;
    19e4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    19e8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    19ec:	d0a00417 	ldw	r2,-32752(gp)
    19f0:	10c000c4 	addi	r3,r2,3
    19f4:	00bfff04 	movi	r2,-4
    19f8:	1884703a 	and	r2,r3,r2
    19fc:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1a00:	d0e00417 	ldw	r3,-32752(gp)
    1a04:	e0bffe17 	ldw	r2,-8(fp)
    1a08:	1887883a 	add	r3,r3,r2
    1a0c:	00802034 	movhi	r2,128
    1a10:	10800004 	addi	r2,r2,0
    1a14:	10c0072e 	bgeu	r2,r3,1a34 <sbrk+0x78>
    1a18:	e0bffd17 	ldw	r2,-12(fp)
    1a1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a20:	e0bffa17 	ldw	r2,-24(fp)
    1a24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    1a28:	00bfffc4 	movi	r2,-1
    1a2c:	e0bfff15 	stw	r2,-4(fp)
    1a30:	00000c06 	br	1a64 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    1a34:	d0a00417 	ldw	r2,-32752(gp)
    1a38:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    1a3c:	d0e00417 	ldw	r3,-32752(gp)
    1a40:	e0bffe17 	ldw	r2,-8(fp)
    1a44:	1885883a 	add	r2,r3,r2
    1a48:	d0a00415 	stw	r2,-32752(gp)
    1a4c:	e0bffd17 	ldw	r2,-12(fp)
    1a50:	e0bff915 	stw	r2,-28(fp)
    1a54:	e0bff917 	ldw	r2,-28(fp)
    1a58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1a5c:	e0bffc17 	ldw	r2,-16(fp)
    1a60:	e0bfff15 	stw	r2,-4(fp)
    1a64:	e0bfff17 	ldw	r2,-4(fp)
} 
    1a68:	e037883a 	mov	sp,fp
    1a6c:	df000017 	ldw	fp,0(sp)
    1a70:	dec00104 	addi	sp,sp,4
    1a74:	f800283a 	ret

00001a78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1a78:	defffa04 	addi	sp,sp,-24
    1a7c:	df000515 	stw	fp,20(sp)
    1a80:	df000504 	addi	fp,sp,20
    1a84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a88:	0005303a 	rdctl	r2,status
    1a8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a90:	e0fffd17 	ldw	r3,-12(fp)
    1a94:	00bfff84 	movi	r2,-2
    1a98:	1884703a 	and	r2,r3,r2
    1a9c:	1001703a 	wrctl	status,r2
  
  return context;
    1aa0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1aa4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1ab0:	e0bffc17 	ldw	r2,-16(fp)
    1ab4:	10c00017 	ldw	r3,0(r2)
    1ab8:	e0bffc17 	ldw	r2,-16(fp)
    1abc:	10800117 	ldw	r2,4(r2)
    1ac0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    1ac4:	e0bffc17 	ldw	r2,-16(fp)
    1ac8:	10c00117 	ldw	r3,4(r2)
    1acc:	e0bffc17 	ldw	r2,-16(fp)
    1ad0:	10800017 	ldw	r2,0(r2)
    1ad4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1ad8:	e0fffc17 	ldw	r3,-16(fp)
    1adc:	e0bffc17 	ldw	r2,-16(fp)
    1ae0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    1ae4:	e0fffc17 	ldw	r3,-16(fp)
    1ae8:	e0bffc17 	ldw	r2,-16(fp)
    1aec:	18800015 	stw	r2,0(r3)
    1af0:	e0bffe17 	ldw	r2,-8(fp)
    1af4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1af8:	e0bffb17 	ldw	r2,-20(fp)
    1afc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1b00:	e037883a 	mov	sp,fp
    1b04:	df000017 	ldw	fp,0(sp)
    1b08:	dec00104 	addi	sp,sp,4
    1b0c:	f800283a 	ret

00001b10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1b10:	defffb04 	addi	sp,sp,-20
    1b14:	dfc00415 	stw	ra,16(sp)
    1b18:	df000315 	stw	fp,12(sp)
    1b1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1b20:	d0a00517 	ldw	r2,-32748(gp)
    1b24:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1b28:	d0a6a917 	ldw	r2,-25948(gp)
    1b2c:	10800044 	addi	r2,r2,1
    1b30:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1b34:	00003106 	br	1bfc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    1b38:	e0bffe17 	ldw	r2,-8(fp)
    1b3c:	10800017 	ldw	r2,0(r2)
    1b40:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1b44:	e0bffe17 	ldw	r2,-8(fp)
    1b48:	10800403 	ldbu	r2,16(r2)
    1b4c:	10803fcc 	andi	r2,r2,255
    1b50:	1005003a 	cmpeq	r2,r2,zero
    1b54:	1000051e 	bne	r2,zero,1b6c <alt_tick+0x5c>
    1b58:	d0a6a917 	ldw	r2,-25948(gp)
    1b5c:	1004c03a 	cmpne	r2,r2,zero
    1b60:	1000021e 	bne	r2,zero,1b6c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    1b64:	e0bffe17 	ldw	r2,-8(fp)
    1b68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1b6c:	e0bffe17 	ldw	r2,-8(fp)
    1b70:	10c00217 	ldw	r3,8(r2)
    1b74:	d0a6a917 	ldw	r2,-25948(gp)
    1b78:	10c01e36 	bltu	r2,r3,1bf4 <alt_tick+0xe4>
    1b7c:	e0bffe17 	ldw	r2,-8(fp)
    1b80:	10800403 	ldbu	r2,16(r2)
    1b84:	10803fcc 	andi	r2,r2,255
    1b88:	1004c03a 	cmpne	r2,r2,zero
    1b8c:	1000191e 	bne	r2,zero,1bf4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    1b90:	e0bffe17 	ldw	r2,-8(fp)
    1b94:	10c00317 	ldw	r3,12(r2)
    1b98:	e0bffe17 	ldw	r2,-8(fp)
    1b9c:	11000517 	ldw	r4,20(r2)
    1ba0:	183ee83a 	callr	r3
    1ba4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1ba8:	e0bffd17 	ldw	r2,-12(fp)
    1bac:	1004c03a 	cmpne	r2,r2,zero
    1bb0:	1000031e 	bne	r2,zero,1bc0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    1bb4:	e13ffe17 	ldw	r4,-8(fp)
    1bb8:	0001a780 	call	1a78 <alt_alarm_stop>
    1bbc:	00000d06 	br	1bf4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    1bc0:	e0bffe17 	ldw	r2,-8(fp)
    1bc4:	10c00217 	ldw	r3,8(r2)
    1bc8:	e0bffd17 	ldw	r2,-12(fp)
    1bcc:	1887883a 	add	r3,r3,r2
    1bd0:	e0bffe17 	ldw	r2,-8(fp)
    1bd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1bd8:	e0bffe17 	ldw	r2,-8(fp)
    1bdc:	10c00217 	ldw	r3,8(r2)
    1be0:	d0a6a917 	ldw	r2,-25948(gp)
    1be4:	1880032e 	bgeu	r3,r2,1bf4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    1be8:	e0fffe17 	ldw	r3,-8(fp)
    1bec:	00800044 	movi	r2,1
    1bf0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    1bf4:	e0bfff17 	ldw	r2,-4(fp)
    1bf8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1bfc:	d0e00504 	addi	r3,gp,-32748
    1c00:	e0bffe17 	ldw	r2,-8(fp)
    1c04:	10ffcc1e 	bne	r2,r3,1b38 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1c08:	e037883a 	mov	sp,fp
    1c0c:	dfc00117 	ldw	ra,4(sp)
    1c10:	df000017 	ldw	fp,0(sp)
    1c14:	dec00204 	addi	sp,sp,8
    1c18:	f800283a 	ret

00001c1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1c1c:	defffd04 	addi	sp,sp,-12
    1c20:	dfc00215 	stw	ra,8(sp)
    1c24:	df000115 	stw	fp,4(sp)
    1c28:	df000104 	addi	fp,sp,4
    1c2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    1c30:	00033a80 	call	33a8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1c34:	00800044 	movi	r2,1
    1c38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1c3c:	e037883a 	mov	sp,fp
    1c40:	dfc00117 	ldw	ra,4(sp)
    1c44:	df000017 	ldw	fp,0(sp)
    1c48:	dec00204 	addi	sp,sp,8
    1c4c:	f800283a 	ret

00001c50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1c50:	defffe04 	addi	sp,sp,-8
    1c54:	dfc00115 	stw	ra,4(sp)
    1c58:	df000015 	stw	fp,0(sp)
    1c5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    1c60:	01040034 	movhi	r4,4096
    1c64:	21080004 	addi	r4,r4,8192
    1c68:	000b883a 	mov	r5,zero
    1c6c:	000d883a 	mov	r6,zero
    1c70:	01c00204 	movi	r7,8
    1c74:	00028000 	call	2800 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1c78:	01000034 	movhi	r4,0
    1c7c:	21175e04 	addi	r4,r4,23928
    1c80:	000b883a 	mov	r5,zero
    1c84:	01800204 	movi	r6,8
    1c88:	0001e2c0 	call	1e2c <altera_avalon_jtag_uart_init>
    1c8c:	01000034 	movhi	r4,0
    1c90:	21175404 	addi	r4,r4,23888
    1c94:	0001cac0 	call	1cac <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    1c98:	e037883a 	mov	sp,fp
    1c9c:	dfc00117 	ldw	ra,4(sp)
    1ca0:	df000017 	ldw	fp,0(sp)
    1ca4:	dec00204 	addi	sp,sp,8
    1ca8:	f800283a 	ret

00001cac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1cac:	defffd04 	addi	sp,sp,-12
    1cb0:	dfc00215 	stw	ra,8(sp)
    1cb4:	df000115 	stw	fp,4(sp)
    1cb8:	df000104 	addi	fp,sp,4
    1cbc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1cc0:	e13fff17 	ldw	r4,-4(fp)
    1cc4:	01400034 	movhi	r5,0
    1cc8:	295bdf04 	addi	r5,r5,28540
    1ccc:	0002a380 	call	2a38 <alt_dev_llist_insert>
}
    1cd0:	e037883a 	mov	sp,fp
    1cd4:	dfc00117 	ldw	ra,4(sp)
    1cd8:	df000017 	ldw	fp,0(sp)
    1cdc:	dec00204 	addi	sp,sp,8
    1ce0:	f800283a 	ret

00001ce4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1ce4:	defffa04 	addi	sp,sp,-24
    1ce8:	dfc00515 	stw	ra,20(sp)
    1cec:	df000415 	stw	fp,16(sp)
    1cf0:	df000404 	addi	fp,sp,16
    1cf4:	e13ffd15 	stw	r4,-12(fp)
    1cf8:	e17ffe15 	stw	r5,-8(fp)
    1cfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1d00:	e0bffd17 	ldw	r2,-12(fp)
    1d04:	10800017 	ldw	r2,0(r2)
    1d08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1d0c:	e0bffc17 	ldw	r2,-16(fp)
    1d10:	11000a04 	addi	r4,r2,40
    1d14:	e0bffd17 	ldw	r2,-12(fp)
    1d18:	11c00217 	ldw	r7,8(r2)
    1d1c:	e17ffe17 	ldw	r5,-8(fp)
    1d20:	e1bfff17 	ldw	r6,-4(fp)
    1d24:	000232c0 	call	232c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1d28:	e037883a 	mov	sp,fp
    1d2c:	dfc00117 	ldw	ra,4(sp)
    1d30:	df000017 	ldw	fp,0(sp)
    1d34:	dec00204 	addi	sp,sp,8
    1d38:	f800283a 	ret

00001d3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1d3c:	defffa04 	addi	sp,sp,-24
    1d40:	dfc00515 	stw	ra,20(sp)
    1d44:	df000415 	stw	fp,16(sp)
    1d48:	df000404 	addi	fp,sp,16
    1d4c:	e13ffd15 	stw	r4,-12(fp)
    1d50:	e17ffe15 	stw	r5,-8(fp)
    1d54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1d58:	e0bffd17 	ldw	r2,-12(fp)
    1d5c:	10800017 	ldw	r2,0(r2)
    1d60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1d64:	e0bffc17 	ldw	r2,-16(fp)
    1d68:	11000a04 	addi	r4,r2,40
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	11c00217 	ldw	r7,8(r2)
    1d74:	e17ffe17 	ldw	r5,-8(fp)
    1d78:	e1bfff17 	ldw	r6,-4(fp)
    1d7c:	00025500 	call	2550 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1d80:	e037883a 	mov	sp,fp
    1d84:	dfc00117 	ldw	ra,4(sp)
    1d88:	df000017 	ldw	fp,0(sp)
    1d8c:	dec00204 	addi	sp,sp,8
    1d90:	f800283a 	ret

00001d94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1d94:	defffc04 	addi	sp,sp,-16
    1d98:	dfc00315 	stw	ra,12(sp)
    1d9c:	df000215 	stw	fp,8(sp)
    1da0:	df000204 	addi	fp,sp,8
    1da4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1da8:	e0bfff17 	ldw	r2,-4(fp)
    1dac:	10800017 	ldw	r2,0(r2)
    1db0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1db4:	e0bffe17 	ldw	r2,-8(fp)
    1db8:	11000a04 	addi	r4,r2,40
    1dbc:	e0bfff17 	ldw	r2,-4(fp)
    1dc0:	11400217 	ldw	r5,8(r2)
    1dc4:	00021c40 	call	21c4 <altera_avalon_jtag_uart_close>
}
    1dc8:	e037883a 	mov	sp,fp
    1dcc:	dfc00117 	ldw	ra,4(sp)
    1dd0:	df000017 	ldw	fp,0(sp)
    1dd4:	dec00204 	addi	sp,sp,8
    1dd8:	f800283a 	ret

00001ddc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1ddc:	defffa04 	addi	sp,sp,-24
    1de0:	dfc00515 	stw	ra,20(sp)
    1de4:	df000415 	stw	fp,16(sp)
    1de8:	df000404 	addi	fp,sp,16
    1dec:	e13ffd15 	stw	r4,-12(fp)
    1df0:	e17ffe15 	stw	r5,-8(fp)
    1df4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1df8:	e0bffd17 	ldw	r2,-12(fp)
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1e04:	e0bffc17 	ldw	r2,-16(fp)
    1e08:	11000a04 	addi	r4,r2,40
    1e0c:	e17ffe17 	ldw	r5,-8(fp)
    1e10:	e1bfff17 	ldw	r6,-4(fp)
    1e14:	00022380 	call	2238 <altera_avalon_jtag_uart_ioctl>
}
    1e18:	e037883a 	mov	sp,fp
    1e1c:	dfc00117 	ldw	ra,4(sp)
    1e20:	df000017 	ldw	fp,0(sp)
    1e24:	dec00204 	addi	sp,sp,8
    1e28:	f800283a 	ret

00001e2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1e2c:	defffa04 	addi	sp,sp,-24
    1e30:	dfc00515 	stw	ra,20(sp)
    1e34:	df000415 	stw	fp,16(sp)
    1e38:	df000404 	addi	fp,sp,16
    1e3c:	e13ffd15 	stw	r4,-12(fp)
    1e40:	e17ffe15 	stw	r5,-8(fp)
    1e44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1e48:	e0fffd17 	ldw	r3,-12(fp)
    1e4c:	00800044 	movi	r2,1
    1e50:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	10800017 	ldw	r2,0(r2)
    1e5c:	11000104 	addi	r4,r2,4
    1e60:	e0bffd17 	ldw	r2,-12(fp)
    1e64:	10800817 	ldw	r2,32(r2)
    1e68:	1007883a 	mov	r3,r2
    1e6c:	2005883a 	mov	r2,r4
    1e70:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1e74:	e13ffe17 	ldw	r4,-8(fp)
    1e78:	e17fff17 	ldw	r5,-4(fp)
    1e7c:	d8000015 	stw	zero,0(sp)
    1e80:	01800034 	movhi	r6,0
    1e84:	3187bb04 	addi	r6,r6,7916
    1e88:	e1fffd17 	ldw	r7,-12(fp)
    1e8c:	0002c300 	call	2c30 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1e90:	e0bffd17 	ldw	r2,-12(fp)
    1e94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1e98:	e0bffd17 	ldw	r2,-12(fp)
    1e9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1ea0:	00800074 	movhi	r2,1
    1ea4:	10a27e04 	addi	r2,r2,-30216
    1ea8:	10800017 	ldw	r2,0(r2)
    1eac:	100b883a 	mov	r5,r2
    1eb0:	01800034 	movhi	r6,0
    1eb4:	31884504 	addi	r6,r6,8468
    1eb8:	e1fffd17 	ldw	r7,-12(fp)
    1ebc:	00014380 	call	1438 <alt_alarm_start>
    1ec0:	1004403a 	cmpge	r2,r2,zero
    1ec4:	1000041e 	bne	r2,zero,1ed8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1ec8:	e0fffd17 	ldw	r3,-12(fp)
    1ecc:	00a00034 	movhi	r2,32768
    1ed0:	10bfffc4 	addi	r2,r2,-1
    1ed4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1ed8:	e037883a 	mov	sp,fp
    1edc:	dfc00117 	ldw	ra,4(sp)
    1ee0:	df000017 	ldw	fp,0(sp)
    1ee4:	dec00204 	addi	sp,sp,8
    1ee8:	f800283a 	ret

00001eec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1eec:	defff804 	addi	sp,sp,-32
    1ef0:	df000715 	stw	fp,28(sp)
    1ef4:	df000704 	addi	fp,sp,28
    1ef8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1efc:	e0bfff17 	ldw	r2,-4(fp)
    1f00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    1f04:	e0bffe17 	ldw	r2,-8(fp)
    1f08:	10800017 	ldw	r2,0(r2)
    1f0c:	e0bffd15 	stw	r2,-12(fp)
    1f10:	00000006 	br	1f14 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1f14:	e0bffd17 	ldw	r2,-12(fp)
    1f18:	10800104 	addi	r2,r2,4
    1f1c:	10800037 	ldwio	r2,0(r2)
    1f20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1f24:	e0bffc17 	ldw	r2,-16(fp)
    1f28:	1080c00c 	andi	r2,r2,768
    1f2c:	1005003a 	cmpeq	r2,r2,zero
    1f30:	1000741e 	bne	r2,zero,2104 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1f34:	e0bffc17 	ldw	r2,-16(fp)
    1f38:	1080400c 	andi	r2,r2,256
    1f3c:	1005003a 	cmpeq	r2,r2,zero
    1f40:	1000351e 	bne	r2,zero,2018 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1f44:	00800074 	movhi	r2,1
    1f48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
    1f50:	10800a17 	ldw	r2,40(r2)
    1f54:	10800044 	addi	r2,r2,1
    1f58:	1081ffcc 	andi	r2,r2,2047
    1f5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    1f60:	e0bffe17 	ldw	r2,-8(fp)
    1f64:	10c00b17 	ldw	r3,44(r2)
    1f68:	e0bffa17 	ldw	r2,-24(fp)
    1f6c:	18801626 	beq	r3,r2,1fc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1f70:	e0bffd17 	ldw	r2,-12(fp)
    1f74:	10800037 	ldwio	r2,0(r2)
    1f78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1f7c:	e0bffb17 	ldw	r2,-20(fp)
    1f80:	10a0000c 	andi	r2,r2,32768
    1f84:	1005003a 	cmpeq	r2,r2,zero
    1f88:	10000f1e 	bne	r2,zero,1fc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1f8c:	e0bffe17 	ldw	r2,-8(fp)
    1f90:	10c00a17 	ldw	r3,40(r2)
    1f94:	e0bffb17 	ldw	r2,-20(fp)
    1f98:	1009883a 	mov	r4,r2
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	1885883a 	add	r2,r3,r2
    1fa4:	10800e04 	addi	r2,r2,56
    1fa8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1fac:	e0bffe17 	ldw	r2,-8(fp)
    1fb0:	10800a17 	ldw	r2,40(r2)
    1fb4:	10800044 	addi	r2,r2,1
    1fb8:	10c1ffcc 	andi	r3,r2,2047
    1fbc:	e0bffe17 	ldw	r2,-8(fp)
    1fc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1fc4:	003fe106 	br	1f4c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1fc8:	e0bffb17 	ldw	r2,-20(fp)
    1fcc:	10bfffec 	andhi	r2,r2,65535
    1fd0:	1005003a 	cmpeq	r2,r2,zero
    1fd4:	1000101e 	bne	r2,zero,2018 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1fd8:	e0bffe17 	ldw	r2,-8(fp)
    1fdc:	10c00817 	ldw	r3,32(r2)
    1fe0:	00bfff84 	movi	r2,-2
    1fe4:	1886703a 	and	r3,r3,r2
    1fe8:	e0bffe17 	ldw	r2,-8(fp)
    1fec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1ff0:	e0bffd17 	ldw	r2,-12(fp)
    1ff4:	11000104 	addi	r4,r2,4
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
    1ffc:	10800817 	ldw	r2,32(r2)
    2000:	1007883a 	mov	r3,r2
    2004:	2005883a 	mov	r2,r4
    2008:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    200c:	e0bffd17 	ldw	r2,-12(fp)
    2010:	10800104 	addi	r2,r2,4
    2014:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    2018:	e0bffc17 	ldw	r2,-16(fp)
    201c:	1080800c 	andi	r2,r2,512
    2020:	1005003a 	cmpeq	r2,r2,zero
    2024:	103fbb1e 	bne	r2,zero,1f14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    2028:	e0bffc17 	ldw	r2,-16(fp)
    202c:	10bfffec 	andhi	r2,r2,65535
    2030:	1004d43a 	srli	r2,r2,16
    2034:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    2038:	00001506 	br	2090 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    203c:	e13ffd17 	ldw	r4,-12(fp)
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	10c00d17 	ldw	r3,52(r2)
    2048:	e0bffe17 	ldw	r2,-8(fp)
    204c:	1885883a 	add	r2,r3,r2
    2050:	10820e04 	addi	r2,r2,2104
    2054:	10800003 	ldbu	r2,0(r2)
    2058:	10c03fcc 	andi	r3,r2,255
    205c:	18c0201c 	xori	r3,r3,128
    2060:	18ffe004 	addi	r3,r3,-128
    2064:	2005883a 	mov	r2,r4
    2068:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    206c:	e0bffe17 	ldw	r2,-8(fp)
    2070:	10800d17 	ldw	r2,52(r2)
    2074:	10800044 	addi	r2,r2,1
    2078:	10c1ffcc 	andi	r3,r2,2047
    207c:	e0bffe17 	ldw	r2,-8(fp)
    2080:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2084:	e0bff917 	ldw	r2,-28(fp)
    2088:	10bfffc4 	addi	r2,r2,-1
    208c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    2090:	e0bff917 	ldw	r2,-28(fp)
    2094:	1005003a 	cmpeq	r2,r2,zero
    2098:	1000051e 	bne	r2,zero,20b0 <altera_avalon_jtag_uart_irq+0x1c4>
    209c:	e0bffe17 	ldw	r2,-8(fp)
    20a0:	10c00d17 	ldw	r3,52(r2)
    20a4:	e0bffe17 	ldw	r2,-8(fp)
    20a8:	10800c17 	ldw	r2,48(r2)
    20ac:	18bfe31e 	bne	r3,r2,203c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    20b0:	e0bff917 	ldw	r2,-28(fp)
    20b4:	1005003a 	cmpeq	r2,r2,zero
    20b8:	103f961e 	bne	r2,zero,1f14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	10c00817 	ldw	r3,32(r2)
    20c4:	00bfff44 	movi	r2,-3
    20c8:	1886703a 	and	r3,r3,r2
    20cc:	e0bffe17 	ldw	r2,-8(fp)
    20d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    20d4:	e0bffe17 	ldw	r2,-8(fp)
    20d8:	10800017 	ldw	r2,0(r2)
    20dc:	11000104 	addi	r4,r2,4
    20e0:	e0bffe17 	ldw	r2,-8(fp)
    20e4:	10800817 	ldw	r2,32(r2)
    20e8:	1007883a 	mov	r3,r2
    20ec:	2005883a 	mov	r2,r4
    20f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    20f4:	e0bffd17 	ldw	r2,-12(fp)
    20f8:	10800104 	addi	r2,r2,4
    20fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    2100:	003f8406 	br	1f14 <altera_avalon_jtag_uart_irq+0x28>
}
    2104:	e037883a 	mov	sp,fp
    2108:	df000017 	ldw	fp,0(sp)
    210c:	dec00104 	addi	sp,sp,4
    2110:	f800283a 	ret

00002114 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    2114:	defffc04 	addi	sp,sp,-16
    2118:	df000315 	stw	fp,12(sp)
    211c:	df000304 	addi	fp,sp,12
    2120:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    2124:	e0bfff17 	ldw	r2,-4(fp)
    2128:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    212c:	e0bffe17 	ldw	r2,-8(fp)
    2130:	10800017 	ldw	r2,0(r2)
    2134:	10800104 	addi	r2,r2,4
    2138:	10800037 	ldwio	r2,0(r2)
    213c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    2140:	e0bffd17 	ldw	r2,-12(fp)
    2144:	1081000c 	andi	r2,r2,1024
    2148:	1005003a 	cmpeq	r2,r2,zero
    214c:	10000c1e 	bne	r2,zero,2180 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    2150:	e0bffe17 	ldw	r2,-8(fp)
    2154:	10800017 	ldw	r2,0(r2)
    2158:	11000104 	addi	r4,r2,4
    215c:	e0bffe17 	ldw	r2,-8(fp)
    2160:	10800817 	ldw	r2,32(r2)
    2164:	10810014 	ori	r2,r2,1024
    2168:	1007883a 	mov	r3,r2
    216c:	2005883a 	mov	r2,r4
    2170:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    2174:	e0bffe17 	ldw	r2,-8(fp)
    2178:	10000915 	stw	zero,36(r2)
    217c:	00000a06 	br	21a8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    2180:	e0bffe17 	ldw	r2,-8(fp)
    2184:	10c00917 	ldw	r3,36(r2)
    2188:	00a00034 	movhi	r2,32768
    218c:	10bfff04 	addi	r2,r2,-4
    2190:	10c00536 	bltu	r2,r3,21a8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    2194:	e0bffe17 	ldw	r2,-8(fp)
    2198:	10800917 	ldw	r2,36(r2)
    219c:	10c00044 	addi	r3,r2,1
    21a0:	e0bffe17 	ldw	r2,-8(fp)
    21a4:	10c00915 	stw	r3,36(r2)
    21a8:	00800074 	movhi	r2,1
    21ac:	10a27e04 	addi	r2,r2,-30216
    21b0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    21b4:	e037883a 	mov	sp,fp
    21b8:	df000017 	ldw	fp,0(sp)
    21bc:	dec00104 	addi	sp,sp,4
    21c0:	f800283a 	ret

000021c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    21c4:	defffc04 	addi	sp,sp,-16
    21c8:	df000315 	stw	fp,12(sp)
    21cc:	df000304 	addi	fp,sp,12
    21d0:	e13ffd15 	stw	r4,-12(fp)
    21d4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    21d8:	00000706 	br	21f8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    21dc:	e0bffe17 	ldw	r2,-8(fp)
    21e0:	1090000c 	andi	r2,r2,16384
    21e4:	1005003a 	cmpeq	r2,r2,zero
    21e8:	1000031e 	bne	r2,zero,21f8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    21ec:	00bffd44 	movi	r2,-11
    21f0:	e0bfff15 	stw	r2,-4(fp)
    21f4:	00000b06 	br	2224 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    21f8:	e0bffd17 	ldw	r2,-12(fp)
    21fc:	10c00d17 	ldw	r3,52(r2)
    2200:	e0bffd17 	ldw	r2,-12(fp)
    2204:	10800c17 	ldw	r2,48(r2)
    2208:	18800526 	beq	r3,r2,2220 <altera_avalon_jtag_uart_close+0x5c>
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	10c00917 	ldw	r3,36(r2)
    2214:	e0bffd17 	ldw	r2,-12(fp)
    2218:	10800117 	ldw	r2,4(r2)
    221c:	18bfef36 	bltu	r3,r2,21dc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    2220:	e03fff15 	stw	zero,-4(fp)
    2224:	e0bfff17 	ldw	r2,-4(fp)
}
    2228:	e037883a 	mov	sp,fp
    222c:	df000017 	ldw	fp,0(sp)
    2230:	dec00104 	addi	sp,sp,4
    2234:	f800283a 	ret

00002238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    2238:	defff804 	addi	sp,sp,-32
    223c:	df000715 	stw	fp,28(sp)
    2240:	df000704 	addi	fp,sp,28
    2244:	e13ffb15 	stw	r4,-20(fp)
    2248:	e17ffc15 	stw	r5,-16(fp)
    224c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    2250:	00bff9c4 	movi	r2,-25
    2254:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    2258:	e0bffc17 	ldw	r2,-16(fp)
    225c:	e0bfff15 	stw	r2,-4(fp)
    2260:	e0ffff17 	ldw	r3,-4(fp)
    2264:	189a8060 	cmpeqi	r2,r3,27137
    2268:	1000041e 	bne	r2,zero,227c <altera_avalon_jtag_uart_ioctl+0x44>
    226c:	e0ffff17 	ldw	r3,-4(fp)
    2270:	189a80a0 	cmpeqi	r2,r3,27138
    2274:	10001b1e 	bne	r2,zero,22e4 <altera_avalon_jtag_uart_ioctl+0xac>
    2278:	00002706 	br	2318 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    227c:	e0bffb17 	ldw	r2,-20(fp)
    2280:	10c00117 	ldw	r3,4(r2)
    2284:	00a00034 	movhi	r2,32768
    2288:	10bfffc4 	addi	r2,r2,-1
    228c:	18802226 	beq	r3,r2,2318 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    2290:	e0bffd17 	ldw	r2,-12(fp)
    2294:	10800017 	ldw	r2,0(r2)
    2298:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    229c:	e0bff917 	ldw	r2,-28(fp)
    22a0:	10800090 	cmplti	r2,r2,2
    22a4:	1000071e 	bne	r2,zero,22c4 <altera_avalon_jtag_uart_ioctl+0x8c>
    22a8:	e0fff917 	ldw	r3,-28(fp)
    22ac:	00a00034 	movhi	r2,32768
    22b0:	10bfffc4 	addi	r2,r2,-1
    22b4:	18800326 	beq	r3,r2,22c4 <altera_avalon_jtag_uart_ioctl+0x8c>
    22b8:	e0bff917 	ldw	r2,-28(fp)
    22bc:	e0bffe15 	stw	r2,-8(fp)
    22c0:	00000306 	br	22d0 <altera_avalon_jtag_uart_ioctl+0x98>
    22c4:	00e00034 	movhi	r3,32768
    22c8:	18ffff84 	addi	r3,r3,-2
    22cc:	e0fffe15 	stw	r3,-8(fp)
    22d0:	e0bffb17 	ldw	r2,-20(fp)
    22d4:	e0fffe17 	ldw	r3,-8(fp)
    22d8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    22dc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    22e0:	00000d06 	br	2318 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    22e4:	e0bffb17 	ldw	r2,-20(fp)
    22e8:	10c00117 	ldw	r3,4(r2)
    22ec:	00a00034 	movhi	r2,32768
    22f0:	10bfffc4 	addi	r2,r2,-1
    22f4:	18800826 	beq	r3,r2,2318 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    22f8:	e13ffd17 	ldw	r4,-12(fp)
    22fc:	e0bffb17 	ldw	r2,-20(fp)
    2300:	10c00917 	ldw	r3,36(r2)
    2304:	e0bffb17 	ldw	r2,-20(fp)
    2308:	10800117 	ldw	r2,4(r2)
    230c:	1885803a 	cmpltu	r2,r3,r2
    2310:	20800015 	stw	r2,0(r4)
      rc = 0;
    2314:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    2318:	e0bffa17 	ldw	r2,-24(fp)
}
    231c:	e037883a 	mov	sp,fp
    2320:	df000017 	ldw	fp,0(sp)
    2324:	dec00104 	addi	sp,sp,4
    2328:	f800283a 	ret

0000232c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    232c:	defff204 	addi	sp,sp,-56
    2330:	dfc00d15 	stw	ra,52(sp)
    2334:	df000c15 	stw	fp,48(sp)
    2338:	df000c04 	addi	fp,sp,48
    233c:	e13ffb15 	stw	r4,-20(fp)
    2340:	e17ffc15 	stw	r5,-16(fp)
    2344:	e1bffd15 	stw	r6,-12(fp)
    2348:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    234c:	e0bffc17 	ldw	r2,-16(fp)
    2350:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2354:	00004806 	br	2478 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2358:	e0bffb17 	ldw	r2,-20(fp)
    235c:	10800a17 	ldw	r2,40(r2)
    2360:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    2364:	e0bffb17 	ldw	r2,-20(fp)
    2368:	10800b17 	ldw	r2,44(r2)
    236c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    2370:	e0fff717 	ldw	r3,-36(fp)
    2374:	e0bff617 	ldw	r2,-40(fp)
    2378:	18800536 	bltu	r3,r2,2390 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    237c:	e0bff717 	ldw	r2,-36(fp)
    2380:	e0fff617 	ldw	r3,-40(fp)
    2384:	10c5c83a 	sub	r2,r2,r3
    2388:	e0bff815 	stw	r2,-32(fp)
    238c:	00000406 	br	23a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    2390:	00820004 	movi	r2,2048
    2394:	e0fff617 	ldw	r3,-40(fp)
    2398:	10c5c83a 	sub	r2,r2,r3
    239c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    23a0:	e0bff817 	ldw	r2,-32(fp)
    23a4:	1005003a 	cmpeq	r2,r2,zero
    23a8:	10001f1e 	bne	r2,zero,2428 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    23ac:	e0fffd17 	ldw	r3,-12(fp)
    23b0:	e0bff817 	ldw	r2,-32(fp)
    23b4:	1880022e 	bgeu	r3,r2,23c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    23b8:	e0bffd17 	ldw	r2,-12(fp)
    23bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    23c0:	e0bffb17 	ldw	r2,-20(fp)
    23c4:	10c00e04 	addi	r3,r2,56
    23c8:	e0bff617 	ldw	r2,-40(fp)
    23cc:	1887883a 	add	r3,r3,r2
    23d0:	e0bffa17 	ldw	r2,-24(fp)
    23d4:	1009883a 	mov	r4,r2
    23d8:	180b883a 	mov	r5,r3
    23dc:	e1bff817 	ldw	r6,-32(fp)
    23e0:	000370c0 	call	370c <memcpy>
      ptr   += n;
    23e4:	e0fff817 	ldw	r3,-32(fp)
    23e8:	e0bffa17 	ldw	r2,-24(fp)
    23ec:	10c5883a 	add	r2,r2,r3
    23f0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    23f4:	e0fffd17 	ldw	r3,-12(fp)
    23f8:	e0bff817 	ldw	r2,-32(fp)
    23fc:	1885c83a 	sub	r2,r3,r2
    2400:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2404:	e0fff617 	ldw	r3,-40(fp)
    2408:	e0bff817 	ldw	r2,-32(fp)
    240c:	1885883a 	add	r2,r3,r2
    2410:	10c1ffcc 	andi	r3,r2,2047
    2414:	e0bffb17 	ldw	r2,-20(fp)
    2418:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    241c:	e0bffd17 	ldw	r2,-12(fp)
    2420:	10800048 	cmpgei	r2,r2,1
    2424:	103fcc1e 	bne	r2,zero,2358 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    2428:	e0fffa17 	ldw	r3,-24(fp)
    242c:	e0bffc17 	ldw	r2,-16(fp)
    2430:	1880141e 	bne	r3,r2,2484 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    2434:	e0bffe17 	ldw	r2,-8(fp)
    2438:	1090000c 	andi	r2,r2,16384
    243c:	1004c03a 	cmpne	r2,r2,zero
    2440:	1000101e 	bne	r2,zero,2484 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    2444:	e0bffb17 	ldw	r2,-20(fp)
    2448:	10c00a17 	ldw	r3,40(r2)
    244c:	e0bff717 	ldw	r2,-36(fp)
    2450:	1880051e 	bne	r3,r2,2468 <altera_avalon_jtag_uart_read+0x13c>
    2454:	e0bffb17 	ldw	r2,-20(fp)
    2458:	10c00917 	ldw	r3,36(r2)
    245c:	e0bffb17 	ldw	r2,-20(fp)
    2460:	10800117 	ldw	r2,4(r2)
    2464:	18bff736 	bltu	r3,r2,2444 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    2468:	e0bffb17 	ldw	r2,-20(fp)
    246c:	10c00a17 	ldw	r3,40(r2)
    2470:	e0bff717 	ldw	r2,-36(fp)
    2474:	18800326 	beq	r3,r2,2484 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2478:	e0bffd17 	ldw	r2,-12(fp)
    247c:	10800048 	cmpgei	r2,r2,1
    2480:	103fb51e 	bne	r2,zero,2358 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    2484:	e0fffa17 	ldw	r3,-24(fp)
    2488:	e0bffc17 	ldw	r2,-16(fp)
    248c:	18801926 	beq	r3,r2,24f4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2490:	0005303a 	rdctl	r2,status
    2494:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2498:	e0fff517 	ldw	r3,-44(fp)
    249c:	00bfff84 	movi	r2,-2
    24a0:	1884703a 	and	r2,r3,r2
    24a4:	1001703a 	wrctl	status,r2
  
  return context;
    24a8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    24ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    24b0:	e0bffb17 	ldw	r2,-20(fp)
    24b4:	10800817 	ldw	r2,32(r2)
    24b8:	10c00054 	ori	r3,r2,1
    24bc:	e0bffb17 	ldw	r2,-20(fp)
    24c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    24c4:	e0bffb17 	ldw	r2,-20(fp)
    24c8:	10800017 	ldw	r2,0(r2)
    24cc:	11000104 	addi	r4,r2,4
    24d0:	e0bffb17 	ldw	r2,-20(fp)
    24d4:	10800817 	ldw	r2,32(r2)
    24d8:	1007883a 	mov	r3,r2
    24dc:	2005883a 	mov	r2,r4
    24e0:	10c00035 	stwio	r3,0(r2)
    24e4:	e0bff917 	ldw	r2,-28(fp)
    24e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24ec:	e0bff417 	ldw	r2,-48(fp)
    24f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    24f4:	e0fffa17 	ldw	r3,-24(fp)
    24f8:	e0bffc17 	ldw	r2,-16(fp)
    24fc:	18800526 	beq	r3,r2,2514 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    2500:	e0fffa17 	ldw	r3,-24(fp)
    2504:	e0bffc17 	ldw	r2,-16(fp)
    2508:	1887c83a 	sub	r3,r3,r2
    250c:	e0ffff15 	stw	r3,-4(fp)
    2510:	00000906 	br	2538 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    2514:	e0bffe17 	ldw	r2,-8(fp)
    2518:	1090000c 	andi	r2,r2,16384
    251c:	1005003a 	cmpeq	r2,r2,zero
    2520:	1000031e 	bne	r2,zero,2530 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    2524:	00bffd44 	movi	r2,-11
    2528:	e0bfff15 	stw	r2,-4(fp)
    252c:	00000206 	br	2538 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    2530:	00bffec4 	movi	r2,-5
    2534:	e0bfff15 	stw	r2,-4(fp)
    2538:	e0bfff17 	ldw	r2,-4(fp)
}
    253c:	e037883a 	mov	sp,fp
    2540:	dfc00117 	ldw	ra,4(sp)
    2544:	df000017 	ldw	fp,0(sp)
    2548:	dec00204 	addi	sp,sp,8
    254c:	f800283a 	ret

00002550 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2550:	defff204 	addi	sp,sp,-56
    2554:	dfc00d15 	stw	ra,52(sp)
    2558:	df000c15 	stw	fp,48(sp)
    255c:	df000c04 	addi	fp,sp,48
    2560:	e13ffb15 	stw	r4,-20(fp)
    2564:	e17ffc15 	stw	r5,-16(fp)
    2568:	e1bffd15 	stw	r6,-12(fp)
    256c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2570:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2574:	e0bffc17 	ldw	r2,-16(fp)
    2578:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    257c:	00003a06 	br	2668 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2580:	e0bffb17 	ldw	r2,-20(fp)
    2584:	10800c17 	ldw	r2,48(r2)
    2588:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    258c:	e0bffb17 	ldw	r2,-20(fp)
    2590:	10800d17 	ldw	r2,52(r2)
    2594:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    2598:	e0fffa17 	ldw	r3,-24(fp)
    259c:	e0bff917 	ldw	r2,-28(fp)
    25a0:	1880062e 	bgeu	r3,r2,25bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    25a4:	e0fff917 	ldw	r3,-28(fp)
    25a8:	e0bffa17 	ldw	r2,-24(fp)
    25ac:	1885c83a 	sub	r2,r3,r2
    25b0:	10bfffc4 	addi	r2,r2,-1
    25b4:	e0bff815 	stw	r2,-32(fp)
    25b8:	00000c06 	br	25ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    25bc:	e0bff917 	ldw	r2,-28(fp)
    25c0:	1005003a 	cmpeq	r2,r2,zero
    25c4:	1000051e 	bne	r2,zero,25dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    25c8:	00820004 	movi	r2,2048
    25cc:	e0fffa17 	ldw	r3,-24(fp)
    25d0:	10c5c83a 	sub	r2,r2,r3
    25d4:	e0bff815 	stw	r2,-32(fp)
    25d8:	00000406 	br	25ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    25dc:	0081ffc4 	movi	r2,2047
    25e0:	e0fffa17 	ldw	r3,-24(fp)
    25e4:	10c5c83a 	sub	r2,r2,r3
    25e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    25ec:	e0bff817 	ldw	r2,-32(fp)
    25f0:	1005003a 	cmpeq	r2,r2,zero
    25f4:	10001f1e 	bne	r2,zero,2674 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    25f8:	e0fffd17 	ldw	r3,-12(fp)
    25fc:	e0bff817 	ldw	r2,-32(fp)
    2600:	1880022e 	bgeu	r3,r2,260c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    2604:	e0bffd17 	ldw	r2,-12(fp)
    2608:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    260c:	e0bffb17 	ldw	r2,-20(fp)
    2610:	10c20e04 	addi	r3,r2,2104
    2614:	e0bffa17 	ldw	r2,-24(fp)
    2618:	1885883a 	add	r2,r3,r2
    261c:	e0fffc17 	ldw	r3,-16(fp)
    2620:	1009883a 	mov	r4,r2
    2624:	180b883a 	mov	r5,r3
    2628:	e1bff817 	ldw	r6,-32(fp)
    262c:	000370c0 	call	370c <memcpy>
      ptr   += n;
    2630:	e0fff817 	ldw	r3,-32(fp)
    2634:	e0bffc17 	ldw	r2,-16(fp)
    2638:	10c5883a 	add	r2,r2,r3
    263c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    2640:	e0fffd17 	ldw	r3,-12(fp)
    2644:	e0bff817 	ldw	r2,-32(fp)
    2648:	1885c83a 	sub	r2,r3,r2
    264c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2650:	e0fffa17 	ldw	r3,-24(fp)
    2654:	e0bff817 	ldw	r2,-32(fp)
    2658:	1885883a 	add	r2,r3,r2
    265c:	10c1ffcc 	andi	r3,r2,2047
    2660:	e0bffb17 	ldw	r2,-20(fp)
    2664:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2668:	e0bffd17 	ldw	r2,-12(fp)
    266c:	10800048 	cmpgei	r2,r2,1
    2670:	103fc31e 	bne	r2,zero,2580 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2674:	0005303a 	rdctl	r2,status
    2678:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    267c:	e0fff517 	ldw	r3,-44(fp)
    2680:	00bfff84 	movi	r2,-2
    2684:	1884703a 	and	r2,r3,r2
    2688:	1001703a 	wrctl	status,r2
  
  return context;
    268c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    2690:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2694:	e0bffb17 	ldw	r2,-20(fp)
    2698:	10800817 	ldw	r2,32(r2)
    269c:	10c00094 	ori	r3,r2,2
    26a0:	e0bffb17 	ldw	r2,-20(fp)
    26a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    26a8:	e0bffb17 	ldw	r2,-20(fp)
    26ac:	10800017 	ldw	r2,0(r2)
    26b0:	11000104 	addi	r4,r2,4
    26b4:	e0bffb17 	ldw	r2,-20(fp)
    26b8:	10800817 	ldw	r2,32(r2)
    26bc:	1007883a 	mov	r3,r2
    26c0:	2005883a 	mov	r2,r4
    26c4:	10c00035 	stwio	r3,0(r2)
    26c8:	e0bff717 	ldw	r2,-36(fp)
    26cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26d0:	e0bff417 	ldw	r2,-48(fp)
    26d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    26d8:	e0bffd17 	ldw	r2,-12(fp)
    26dc:	10800050 	cmplti	r2,r2,1
    26e0:	1000111e 	bne	r2,zero,2728 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    26e4:	e0bffe17 	ldw	r2,-8(fp)
    26e8:	1090000c 	andi	r2,r2,16384
    26ec:	1004c03a 	cmpne	r2,r2,zero
    26f0:	1000101e 	bne	r2,zero,2734 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    26f4:	e0bffb17 	ldw	r2,-20(fp)
    26f8:	10c00d17 	ldw	r3,52(r2)
    26fc:	e0bff917 	ldw	r2,-28(fp)
    2700:	1880051e 	bne	r3,r2,2718 <altera_avalon_jtag_uart_write+0x1c8>
    2704:	e0bffb17 	ldw	r2,-20(fp)
    2708:	10c00917 	ldw	r3,36(r2)
    270c:	e0bffb17 	ldw	r2,-20(fp)
    2710:	10800117 	ldw	r2,4(r2)
    2714:	18bff736 	bltu	r3,r2,26f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    2718:	e0bffb17 	ldw	r2,-20(fp)
    271c:	10c00d17 	ldw	r3,52(r2)
    2720:	e0bff917 	ldw	r2,-28(fp)
    2724:	18800326 	beq	r3,r2,2734 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    2728:	e0bffd17 	ldw	r2,-12(fp)
    272c:	10800048 	cmpgei	r2,r2,1
    2730:	103fcd1e 	bne	r2,zero,2668 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2734:	e0fffc17 	ldw	r3,-16(fp)
    2738:	e0bff617 	ldw	r2,-40(fp)
    273c:	18800526 	beq	r3,r2,2754 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    2740:	e0fffc17 	ldw	r3,-16(fp)
    2744:	e0bff617 	ldw	r2,-40(fp)
    2748:	1887c83a 	sub	r3,r3,r2
    274c:	e0ffff15 	stw	r3,-4(fp)
    2750:	00000906 	br	2778 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    2754:	e0bffe17 	ldw	r2,-8(fp)
    2758:	1090000c 	andi	r2,r2,16384
    275c:	1005003a 	cmpeq	r2,r2,zero
    2760:	1000031e 	bne	r2,zero,2770 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    2764:	00bffd44 	movi	r2,-11
    2768:	e0bfff15 	stw	r2,-4(fp)
    276c:	00000206 	br	2778 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    2770:	00bffec4 	movi	r2,-5
    2774:	e0bfff15 	stw	r2,-4(fp)
    2778:	e0bfff17 	ldw	r2,-4(fp)
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    2790:	defffa04 	addi	sp,sp,-24
    2794:	dfc00515 	stw	ra,20(sp)
    2798:	df000415 	stw	fp,16(sp)
    279c:	df000404 	addi	fp,sp,16
    27a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    27a4:	e0bfff17 	ldw	r2,-4(fp)
    27a8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    27ac:	e0bfff17 	ldw	r2,-4(fp)
    27b0:	10800104 	addi	r2,r2,4
    27b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27b8:	0005303a 	rdctl	r2,status
    27bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27c0:	e0fffd17 	ldw	r3,-12(fp)
    27c4:	00bfff84 	movi	r2,-2
    27c8:	1884703a 	and	r2,r3,r2
    27cc:	1001703a 	wrctl	status,r2
  
  return context;
    27d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    27d4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    27d8:	0001b100 	call	1b10 <alt_tick>
    27dc:	e0bffe17 	ldw	r2,-8(fp)
    27e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27e4:	e0bffc17 	ldw	r2,-16(fp)
    27e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    27ec:	e037883a 	mov	sp,fp
    27f0:	dfc00117 	ldw	ra,4(sp)
    27f4:	df000017 	ldw	fp,0(sp)
    27f8:	dec00204 	addi	sp,sp,8
    27fc:	f800283a 	ret

00002800 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    2800:	defff804 	addi	sp,sp,-32
    2804:	dfc00715 	stw	ra,28(sp)
    2808:	df000615 	stw	fp,24(sp)
    280c:	df000604 	addi	fp,sp,24
    2810:	e13ffc15 	stw	r4,-16(fp)
    2814:	e17ffd15 	stw	r5,-12(fp)
    2818:	e1bffe15 	stw	r6,-8(fp)
    281c:	e1ffff15 	stw	r7,-4(fp)
    2820:	e0bfff17 	ldw	r2,-4(fp)
    2824:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    2828:	00800074 	movhi	r2,1
    282c:	10a27e04 	addi	r2,r2,-30216
    2830:	10800017 	ldw	r2,0(r2)
    2834:	1004c03a 	cmpne	r2,r2,zero
    2838:	1000041e 	bne	r2,zero,284c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    283c:	00c00074 	movhi	r3,1
    2840:	18e27e04 	addi	r3,r3,-30216
    2844:	e0bffb17 	ldw	r2,-20(fp)
    2848:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    284c:	e0bffc17 	ldw	r2,-16(fp)
    2850:	10800104 	addi	r2,r2,4
    2854:	1007883a 	mov	r3,r2
    2858:	008001c4 	movi	r2,7
    285c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    2860:	d8000015 	stw	zero,0(sp)
    2864:	e13ffd17 	ldw	r4,-12(fp)
    2868:	e17ffe17 	ldw	r5,-8(fp)
    286c:	01800034 	movhi	r6,0
    2870:	3189e404 	addi	r6,r6,10128
    2874:	e1fffc17 	ldw	r7,-16(fp)
    2878:	0002c300 	call	2c30 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    287c:	e037883a 	mov	sp,fp
    2880:	dfc00117 	ldw	ra,4(sp)
    2884:	df000017 	ldw	fp,0(sp)
    2888:	dec00204 	addi	sp,sp,8
    288c:	f800283a 	ret

00002890 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2890:	defff804 	addi	sp,sp,-32
    2894:	dfc00715 	stw	ra,28(sp)
    2898:	df000615 	stw	fp,24(sp)
    289c:	df000604 	addi	fp,sp,24
    28a0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    28a4:	e0bffc17 	ldw	r2,-16(fp)
    28a8:	1004803a 	cmplt	r2,r2,zero
    28ac:	1000091e 	bne	r2,zero,28d4 <close+0x44>
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	01400304 	movi	r5,12
    28b8:	00007e80 	call	7e8 <__mulsi3>
    28bc:	1007883a 	mov	r3,r2
    28c0:	00800034 	movhi	r2,0
    28c4:	109b7604 	addi	r2,r2,28120
    28c8:	1887883a 	add	r3,r3,r2
    28cc:	e0ffff15 	stw	r3,-4(fp)
    28d0:	00000106 	br	28d8 <close+0x48>
    28d4:	e03fff15 	stw	zero,-4(fp)
    28d8:	e0bfff17 	ldw	r2,-4(fp)
    28dc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    28e0:	e0bffb17 	ldw	r2,-20(fp)
    28e4:	1005003a 	cmpeq	r2,r2,zero
    28e8:	10001d1e 	bne	r2,zero,2960 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    28ec:	e0bffb17 	ldw	r2,-20(fp)
    28f0:	10800017 	ldw	r2,0(r2)
    28f4:	10800417 	ldw	r2,16(r2)
    28f8:	1005003a 	cmpeq	r2,r2,zero
    28fc:	1000071e 	bne	r2,zero,291c <close+0x8c>
    2900:	e0bffb17 	ldw	r2,-20(fp)
    2904:	10800017 	ldw	r2,0(r2)
    2908:	10800417 	ldw	r2,16(r2)
    290c:	e13ffb17 	ldw	r4,-20(fp)
    2910:	103ee83a 	callr	r2
    2914:	e0bffe15 	stw	r2,-8(fp)
    2918:	00000106 	br	2920 <close+0x90>
    291c:	e03ffe15 	stw	zero,-8(fp)
    2920:	e0bffe17 	ldw	r2,-8(fp)
    2924:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2928:	e13ffc17 	ldw	r4,-16(fp)
    292c:	00033300 	call	3330 <alt_release_fd>
    if (rval < 0)
    2930:	e0bffa17 	ldw	r2,-24(fp)
    2934:	1004403a 	cmpge	r2,r2,zero
    2938:	1000071e 	bne	r2,zero,2958 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    293c:	00029900 	call	2990 <alt_get_errno>
    2940:	e0fffa17 	ldw	r3,-24(fp)
    2944:	00c7c83a 	sub	r3,zero,r3
    2948:	10c00015 	stw	r3,0(r2)
      return -1;
    294c:	00bfffc4 	movi	r2,-1
    2950:	e0bffd15 	stw	r2,-12(fp)
    2954:	00000806 	br	2978 <close+0xe8>
    }
    return 0;
    2958:	e03ffd15 	stw	zero,-12(fp)
    295c:	00000606 	br	2978 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2960:	00029900 	call	2990 <alt_get_errno>
    2964:	1007883a 	mov	r3,r2
    2968:	00801444 	movi	r2,81
    296c:	18800015 	stw	r2,0(r3)
    return -1;
    2970:	00bfffc4 	movi	r2,-1
    2974:	e0bffd15 	stw	r2,-12(fp)
    2978:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    297c:	e037883a 	mov	sp,fp
    2980:	dfc00117 	ldw	ra,4(sp)
    2984:	df000017 	ldw	fp,0(sp)
    2988:	dec00204 	addi	sp,sp,8
    298c:	f800283a 	ret

00002990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2990:	defffd04 	addi	sp,sp,-12
    2994:	dfc00215 	stw	ra,8(sp)
    2998:	df000115 	stw	fp,4(sp)
    299c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    29a0:	00800034 	movhi	r2,0
    29a4:	109be204 	addi	r2,r2,28552
    29a8:	10800017 	ldw	r2,0(r2)
    29ac:	1005003a 	cmpeq	r2,r2,zero
    29b0:	1000061e 	bne	r2,zero,29cc <alt_get_errno+0x3c>
    29b4:	00800034 	movhi	r2,0
    29b8:	109be204 	addi	r2,r2,28552
    29bc:	10800017 	ldw	r2,0(r2)
    29c0:	103ee83a 	callr	r2
    29c4:	e0bfff15 	stw	r2,-4(fp)
    29c8:	00000306 	br	29d8 <alt_get_errno+0x48>
    29cc:	00800074 	movhi	r2,1
    29d0:	10a27a04 	addi	r2,r2,-30232
    29d4:	e0bfff15 	stw	r2,-4(fp)
    29d8:	e0bfff17 	ldw	r2,-4(fp)
}
    29dc:	e037883a 	mov	sp,fp
    29e0:	dfc00117 	ldw	ra,4(sp)
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00204 	addi	sp,sp,8
    29ec:	f800283a 	ret

000029f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    29f0:	deffff04 	addi	sp,sp,-4
    29f4:	df000015 	stw	fp,0(sp)
    29f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    29fc:	e037883a 	mov	sp,fp
    2a00:	df000017 	ldw	fp,0(sp)
    2a04:	dec00104 	addi	sp,sp,4
    2a08:	f800283a 	ret

00002a0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2a0c:	defffc04 	addi	sp,sp,-16
    2a10:	df000315 	stw	fp,12(sp)
    2a14:	df000304 	addi	fp,sp,12
    2a18:	e13ffd15 	stw	r4,-12(fp)
    2a1c:	e17ffe15 	stw	r5,-8(fp)
    2a20:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2a24:	e0bfff17 	ldw	r2,-4(fp)
}
    2a28:	e037883a 	mov	sp,fp
    2a2c:	df000017 	ldw	fp,0(sp)
    2a30:	dec00104 	addi	sp,sp,4
    2a34:	f800283a 	ret

00002a38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2a38:	defff904 	addi	sp,sp,-28
    2a3c:	dfc00615 	stw	ra,24(sp)
    2a40:	df000515 	stw	fp,20(sp)
    2a44:	df000504 	addi	fp,sp,20
    2a48:	e13ffd15 	stw	r4,-12(fp)
    2a4c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2a50:	e0bffd17 	ldw	r2,-12(fp)
    2a54:	1005003a 	cmpeq	r2,r2,zero
    2a58:	1000041e 	bne	r2,zero,2a6c <alt_dev_llist_insert+0x34>
    2a5c:	e0bffd17 	ldw	r2,-12(fp)
    2a60:	10800217 	ldw	r2,8(r2)
    2a64:	1004c03a 	cmpne	r2,r2,zero
    2a68:	1000071e 	bne	r2,zero,2a88 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2a6c:	0002aec0 	call	2aec <alt_get_errno>
    2a70:	1007883a 	mov	r3,r2
    2a74:	00800584 	movi	r2,22
    2a78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2a7c:	00bffa84 	movi	r2,-22
    2a80:	e0bfff15 	stw	r2,-4(fp)
    2a84:	00001306 	br	2ad4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2a88:	e0fffd17 	ldw	r3,-12(fp)
    2a8c:	e0bffe17 	ldw	r2,-8(fp)
    2a90:	e0bffb15 	stw	r2,-20(fp)
    2a94:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2a98:	e0fffc17 	ldw	r3,-16(fp)
    2a9c:	e0bffb17 	ldw	r2,-20(fp)
    2aa0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2aa4:	e0bffb17 	ldw	r2,-20(fp)
    2aa8:	10c00017 	ldw	r3,0(r2)
    2aac:	e0bffc17 	ldw	r2,-16(fp)
    2ab0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2ab4:	e0bffb17 	ldw	r2,-20(fp)
    2ab8:	10c00017 	ldw	r3,0(r2)
    2abc:	e0bffc17 	ldw	r2,-16(fp)
    2ac0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2ac4:	e0fffb17 	ldw	r3,-20(fp)
    2ac8:	e0bffc17 	ldw	r2,-16(fp)
    2acc:	18800015 	stw	r2,0(r3)

  return 0;  
    2ad0:	e03fff15 	stw	zero,-4(fp)
    2ad4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ad8:	e037883a 	mov	sp,fp
    2adc:	dfc00117 	ldw	ra,4(sp)
    2ae0:	df000017 	ldw	fp,0(sp)
    2ae4:	dec00204 	addi	sp,sp,8
    2ae8:	f800283a 	ret

00002aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2aec:	defffd04 	addi	sp,sp,-12
    2af0:	dfc00215 	stw	ra,8(sp)
    2af4:	df000115 	stw	fp,4(sp)
    2af8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2afc:	00800034 	movhi	r2,0
    2b00:	109be204 	addi	r2,r2,28552
    2b04:	10800017 	ldw	r2,0(r2)
    2b08:	1005003a 	cmpeq	r2,r2,zero
    2b0c:	1000061e 	bne	r2,zero,2b28 <alt_get_errno+0x3c>
    2b10:	00800034 	movhi	r2,0
    2b14:	109be204 	addi	r2,r2,28552
    2b18:	10800017 	ldw	r2,0(r2)
    2b1c:	103ee83a 	callr	r2
    2b20:	e0bfff15 	stw	r2,-4(fp)
    2b24:	00000306 	br	2b34 <alt_get_errno+0x48>
    2b28:	00800074 	movhi	r2,1
    2b2c:	10a27a04 	addi	r2,r2,-30232
    2b30:	e0bfff15 	stw	r2,-4(fp)
    2b34:	e0bfff17 	ldw	r2,-4(fp)
}
    2b38:	e037883a 	mov	sp,fp
    2b3c:	dfc00117 	ldw	ra,4(sp)
    2b40:	df000017 	ldw	fp,0(sp)
    2b44:	dec00204 	addi	sp,sp,8
    2b48:	f800283a 	ret

00002b4c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2b4c:	defffd04 	addi	sp,sp,-12
    2b50:	dfc00215 	stw	ra,8(sp)
    2b54:	df000115 	stw	fp,4(sp)
    2b58:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2b5c:	00bfff04 	movi	r2,-4
    2b60:	00c00034 	movhi	r3,0
    2b64:	18d52504 	addi	r3,r3,21652
    2b68:	1885883a 	add	r2,r3,r2
    2b6c:	e0bfff15 	stw	r2,-4(fp)
    2b70:	00000606 	br	2b8c <_do_ctors+0x40>
        (*ctor) (); 
    2b74:	e0bfff17 	ldw	r2,-4(fp)
    2b78:	10800017 	ldw	r2,0(r2)
    2b7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2b80:	e0bfff17 	ldw	r2,-4(fp)
    2b84:	10bfff04 	addi	r2,r2,-4
    2b88:	e0bfff15 	stw	r2,-4(fp)
    2b8c:	e0ffff17 	ldw	r3,-4(fp)
    2b90:	00800034 	movhi	r2,0
    2b94:	10952404 	addi	r2,r2,21648
    2b98:	18bff62e 	bgeu	r3,r2,2b74 <_do_ctors+0x28>
        (*ctor) (); 
}
    2b9c:	e037883a 	mov	sp,fp
    2ba0:	dfc00117 	ldw	ra,4(sp)
    2ba4:	df000017 	ldw	fp,0(sp)
    2ba8:	dec00204 	addi	sp,sp,8
    2bac:	f800283a 	ret

00002bb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2bb0:	defffd04 	addi	sp,sp,-12
    2bb4:	dfc00215 	stw	ra,8(sp)
    2bb8:	df000115 	stw	fp,4(sp)
    2bbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2bc0:	00bfff04 	movi	r2,-4
    2bc4:	00c00034 	movhi	r3,0
    2bc8:	18d52504 	addi	r3,r3,21652
    2bcc:	1885883a 	add	r2,r3,r2
    2bd0:	e0bfff15 	stw	r2,-4(fp)
    2bd4:	00000606 	br	2bf0 <_do_dtors+0x40>
        (*dtor) (); 
    2bd8:	e0bfff17 	ldw	r2,-4(fp)
    2bdc:	10800017 	ldw	r2,0(r2)
    2be0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2be4:	e0bfff17 	ldw	r2,-4(fp)
    2be8:	10bfff04 	addi	r2,r2,-4
    2bec:	e0bfff15 	stw	r2,-4(fp)
    2bf0:	e0ffff17 	ldw	r3,-4(fp)
    2bf4:	00800034 	movhi	r2,0
    2bf8:	10952504 	addi	r2,r2,21652
    2bfc:	18bff62e 	bgeu	r3,r2,2bd8 <_do_dtors+0x28>
        (*dtor) (); 
}
    2c00:	e037883a 	mov	sp,fp
    2c04:	dfc00117 	ldw	ra,4(sp)
    2c08:	df000017 	ldw	fp,0(sp)
    2c0c:	dec00204 	addi	sp,sp,8
    2c10:	f800283a 	ret

00002c14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2c14:	deffff04 	addi	sp,sp,-4
    2c18:	df000015 	stw	fp,0(sp)
    2c1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2c20:	e037883a 	mov	sp,fp
    2c24:	df000017 	ldw	fp,0(sp)
    2c28:	dec00104 	addi	sp,sp,4
    2c2c:	f800283a 	ret

00002c30 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2c30:	defff904 	addi	sp,sp,-28
    2c34:	dfc00615 	stw	ra,24(sp)
    2c38:	df000515 	stw	fp,20(sp)
    2c3c:	df000504 	addi	fp,sp,20
    2c40:	e13ffc15 	stw	r4,-16(fp)
    2c44:	e17ffd15 	stw	r5,-12(fp)
    2c48:	e1bffe15 	stw	r6,-8(fp)
    2c4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2c50:	e0800217 	ldw	r2,8(fp)
    2c54:	d8800015 	stw	r2,0(sp)
    2c58:	e13ffc17 	ldw	r4,-16(fp)
    2c5c:	e17ffd17 	ldw	r5,-12(fp)
    2c60:	e1bffe17 	ldw	r6,-8(fp)
    2c64:	e1ffff17 	ldw	r7,-4(fp)
    2c68:	0002e040 	call	2e04 <alt_iic_isr_register>
}  
    2c6c:	e037883a 	mov	sp,fp
    2c70:	dfc00117 	ldw	ra,4(sp)
    2c74:	df000017 	ldw	fp,0(sp)
    2c78:	dec00204 	addi	sp,sp,8
    2c7c:	f800283a 	ret

00002c80 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2c80:	defff904 	addi	sp,sp,-28
    2c84:	df000615 	stw	fp,24(sp)
    2c88:	df000604 	addi	fp,sp,24
    2c8c:	e13ffe15 	stw	r4,-8(fp)
    2c90:	e17fff15 	stw	r5,-4(fp)
    2c94:	e0bfff17 	ldw	r2,-4(fp)
    2c98:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c9c:	0005303a 	rdctl	r2,status
    2ca0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ca4:	e0fffb17 	ldw	r3,-20(fp)
    2ca8:	00bfff84 	movi	r2,-2
    2cac:	1884703a 	and	r2,r3,r2
    2cb0:	1001703a 	wrctl	status,r2
  
  return context;
    2cb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2cb8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    2cbc:	e0fffc17 	ldw	r3,-16(fp)
    2cc0:	00800044 	movi	r2,1
    2cc4:	10c4983a 	sll	r2,r2,r3
    2cc8:	1007883a 	mov	r3,r2
    2ccc:	00800074 	movhi	r2,1
    2cd0:	10a28004 	addi	r2,r2,-30208
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	1886b03a 	or	r3,r3,r2
    2cdc:	00800074 	movhi	r2,1
    2ce0:	10a28004 	addi	r2,r2,-30208
    2ce4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2ce8:	00800074 	movhi	r2,1
    2cec:	10a28004 	addi	r2,r2,-30208
    2cf0:	10800017 	ldw	r2,0(r2)
    2cf4:	100170fa 	wrctl	ienable,r2
    2cf8:	e0bffd17 	ldw	r2,-12(fp)
    2cfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d00:	e0bffa17 	ldw	r2,-24(fp)
    2d04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2d08:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    2d0c:	e037883a 	mov	sp,fp
    2d10:	df000017 	ldw	fp,0(sp)
    2d14:	dec00104 	addi	sp,sp,4
    2d18:	f800283a 	ret

00002d1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2d1c:	defff904 	addi	sp,sp,-28
    2d20:	df000615 	stw	fp,24(sp)
    2d24:	df000604 	addi	fp,sp,24
    2d28:	e13ffe15 	stw	r4,-8(fp)
    2d2c:	e17fff15 	stw	r5,-4(fp)
    2d30:	e0bfff17 	ldw	r2,-4(fp)
    2d34:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d38:	0005303a 	rdctl	r2,status
    2d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d40:	e0fffb17 	ldw	r3,-20(fp)
    2d44:	00bfff84 	movi	r2,-2
    2d48:	1884703a 	and	r2,r3,r2
    2d4c:	1001703a 	wrctl	status,r2
  
  return context;
    2d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2d54:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    2d58:	e0fffc17 	ldw	r3,-16(fp)
    2d5c:	00800044 	movi	r2,1
    2d60:	10c4983a 	sll	r2,r2,r3
    2d64:	0084303a 	nor	r2,zero,r2
    2d68:	1007883a 	mov	r3,r2
    2d6c:	00800074 	movhi	r2,1
    2d70:	10a28004 	addi	r2,r2,-30208
    2d74:	10800017 	ldw	r2,0(r2)
    2d78:	1886703a 	and	r3,r3,r2
    2d7c:	00800074 	movhi	r2,1
    2d80:	10a28004 	addi	r2,r2,-30208
    2d84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2d88:	00800074 	movhi	r2,1
    2d8c:	10a28004 	addi	r2,r2,-30208
    2d90:	10800017 	ldw	r2,0(r2)
    2d94:	100170fa 	wrctl	ienable,r2
    2d98:	e0bffd17 	ldw	r2,-12(fp)
    2d9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2da0:	e0bffa17 	ldw	r2,-24(fp)
    2da4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2da8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    2dac:	e037883a 	mov	sp,fp
    2db0:	df000017 	ldw	fp,0(sp)
    2db4:	dec00104 	addi	sp,sp,4
    2db8:	f800283a 	ret

00002dbc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    2dbc:	defffc04 	addi	sp,sp,-16
    2dc0:	df000315 	stw	fp,12(sp)
    2dc4:	df000304 	addi	fp,sp,12
    2dc8:	e13ffe15 	stw	r4,-8(fp)
    2dcc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2dd0:	000530fa 	rdctl	r2,ienable
    2dd4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2dd8:	e0ffff17 	ldw	r3,-4(fp)
    2ddc:	00800044 	movi	r2,1
    2de0:	10c4983a 	sll	r2,r2,r3
    2de4:	1007883a 	mov	r3,r2
    2de8:	e0bffd17 	ldw	r2,-12(fp)
    2dec:	1884703a 	and	r2,r3,r2
    2df0:	1004c03a 	cmpne	r2,r2,zero
}
    2df4:	e037883a 	mov	sp,fp
    2df8:	df000017 	ldw	fp,0(sp)
    2dfc:	dec00104 	addi	sp,sp,4
    2e00:	f800283a 	ret

00002e04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2e04:	defff404 	addi	sp,sp,-48
    2e08:	dfc00b15 	stw	ra,44(sp)
    2e0c:	df000a15 	stw	fp,40(sp)
    2e10:	df000a04 	addi	fp,sp,40
    2e14:	e13ffb15 	stw	r4,-20(fp)
    2e18:	e17ffc15 	stw	r5,-16(fp)
    2e1c:	e1bffd15 	stw	r6,-12(fp)
    2e20:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    2e24:	00bffa84 	movi	r2,-22
    2e28:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2e2c:	e0bffc17 	ldw	r2,-16(fp)
    2e30:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2e34:	e0bff917 	ldw	r2,-28(fp)
    2e38:	10800808 	cmpgei	r2,r2,32
    2e3c:	1000291e 	bne	r2,zero,2ee4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e40:	0005303a 	rdctl	r2,status
    2e44:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e48:	e0fff717 	ldw	r3,-36(fp)
    2e4c:	00bfff84 	movi	r2,-2
    2e50:	1884703a 	and	r2,r3,r2
    2e54:	1001703a 	wrctl	status,r2
  
  return context;
    2e58:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2e5c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    2e60:	e0bff917 	ldw	r2,-28(fp)
    2e64:	00c00074 	movhi	r3,1
    2e68:	18e29d04 	addi	r3,r3,-30092
    2e6c:	100490fa 	slli	r2,r2,3
    2e70:	10c7883a 	add	r3,r2,r3
    2e74:	e0bffd17 	ldw	r2,-12(fp)
    2e78:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    2e7c:	e0bff917 	ldw	r2,-28(fp)
    2e80:	00c00074 	movhi	r3,1
    2e84:	18e29d04 	addi	r3,r3,-30092
    2e88:	100490fa 	slli	r2,r2,3
    2e8c:	10c5883a 	add	r2,r2,r3
    2e90:	10c00104 	addi	r3,r2,4
    2e94:	e0bffe17 	ldw	r2,-8(fp)
    2e98:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2e9c:	e0bffd17 	ldw	r2,-12(fp)
    2ea0:	1005003a 	cmpeq	r2,r2,zero
    2ea4:	1000051e 	bne	r2,zero,2ebc <alt_iic_isr_register+0xb8>
    2ea8:	e17ff917 	ldw	r5,-28(fp)
    2eac:	e13ffb17 	ldw	r4,-20(fp)
    2eb0:	0002c800 	call	2c80 <alt_ic_irq_enable>
    2eb4:	e0bfff15 	stw	r2,-4(fp)
    2eb8:	00000406 	br	2ecc <alt_iic_isr_register+0xc8>
    2ebc:	e17ff917 	ldw	r5,-28(fp)
    2ec0:	e13ffb17 	ldw	r4,-20(fp)
    2ec4:	0002d1c0 	call	2d1c <alt_ic_irq_disable>
    2ec8:	e0bfff15 	stw	r2,-4(fp)
    2ecc:	e0bfff17 	ldw	r2,-4(fp)
    2ed0:	e0bffa15 	stw	r2,-24(fp)
    2ed4:	e0bff817 	ldw	r2,-32(fp)
    2ed8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2edc:	e0bff617 	ldw	r2,-40(fp)
    2ee0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    2ee4:	e0bffa17 	ldw	r2,-24(fp)
}
    2ee8:	e037883a 	mov	sp,fp
    2eec:	dfc00117 	ldw	ra,4(sp)
    2ef0:	df000017 	ldw	fp,0(sp)
    2ef4:	dec00204 	addi	sp,sp,8
    2ef8:	f800283a 	ret

00002efc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2efc:	defff804 	addi	sp,sp,-32
    2f00:	dfc00715 	stw	ra,28(sp)
    2f04:	df000615 	stw	fp,24(sp)
    2f08:	dc000515 	stw	r16,20(sp)
    2f0c:	df000504 	addi	fp,sp,20
    2f10:	e13ffc15 	stw	r4,-16(fp)
    2f14:	e17ffd15 	stw	r5,-12(fp)
    2f18:	e1bffe15 	stw	r6,-8(fp)
    2f1c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2f20:	e13ffd17 	ldw	r4,-12(fp)
    2f24:	e17ffe17 	ldw	r5,-8(fp)
    2f28:	e1bfff17 	ldw	r6,-4(fp)
    2f2c:	00031440 	call	3144 <open>
    2f30:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2f34:	e0bffb17 	ldw	r2,-20(fp)
    2f38:	1004803a 	cmplt	r2,r2,zero
    2f3c:	10001f1e 	bne	r2,zero,2fbc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    2f40:	e13ffb17 	ldw	r4,-20(fp)
    2f44:	04000034 	movhi	r16,0
    2f48:	841b7604 	addi	r16,r16,28120
    2f4c:	01400304 	movi	r5,12
    2f50:	00007e80 	call	7e8 <__mulsi3>
    2f54:	1405883a 	add	r2,r2,r16
    2f58:	10c00017 	ldw	r3,0(r2)
    2f5c:	e0bffc17 	ldw	r2,-16(fp)
    2f60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2f64:	e13ffb17 	ldw	r4,-20(fp)
    2f68:	04000034 	movhi	r16,0
    2f6c:	841b7604 	addi	r16,r16,28120
    2f70:	01400304 	movi	r5,12
    2f74:	00007e80 	call	7e8 <__mulsi3>
    2f78:	1405883a 	add	r2,r2,r16
    2f7c:	10800104 	addi	r2,r2,4
    2f80:	10c00017 	ldw	r3,0(r2)
    2f84:	e0bffc17 	ldw	r2,-16(fp)
    2f88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2f8c:	e13ffb17 	ldw	r4,-20(fp)
    2f90:	04000034 	movhi	r16,0
    2f94:	841b7604 	addi	r16,r16,28120
    2f98:	01400304 	movi	r5,12
    2f9c:	00007e80 	call	7e8 <__mulsi3>
    2fa0:	1405883a 	add	r2,r2,r16
    2fa4:	10800204 	addi	r2,r2,8
    2fa8:	10c00017 	ldw	r3,0(r2)
    2fac:	e0bffc17 	ldw	r2,-16(fp)
    2fb0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2fb4:	e13ffb17 	ldw	r4,-20(fp)
    2fb8:	00033300 	call	3330 <alt_release_fd>
  }
} 
    2fbc:	e037883a 	mov	sp,fp
    2fc0:	dfc00217 	ldw	ra,8(sp)
    2fc4:	df000117 	ldw	fp,4(sp)
    2fc8:	dc000017 	ldw	r16,0(sp)
    2fcc:	dec00304 	addi	sp,sp,12
    2fd0:	f800283a 	ret

00002fd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2fd4:	defffb04 	addi	sp,sp,-20
    2fd8:	dfc00415 	stw	ra,16(sp)
    2fdc:	df000315 	stw	fp,12(sp)
    2fe0:	df000304 	addi	fp,sp,12
    2fe4:	e13ffd15 	stw	r4,-12(fp)
    2fe8:	e17ffe15 	stw	r5,-8(fp)
    2fec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2ff0:	01000034 	movhi	r4,0
    2ff4:	211b7904 	addi	r4,r4,28132
    2ff8:	e17ffd17 	ldw	r5,-12(fp)
    2ffc:	01800044 	movi	r6,1
    3000:	01c07fc4 	movi	r7,511
    3004:	0002efc0 	call	2efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3008:	01000034 	movhi	r4,0
    300c:	211b7604 	addi	r4,r4,28120
    3010:	e17ffe17 	ldw	r5,-8(fp)
    3014:	000d883a 	mov	r6,zero
    3018:	01c07fc4 	movi	r7,511
    301c:	0002efc0 	call	2efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    3020:	01000034 	movhi	r4,0
    3024:	211b7c04 	addi	r4,r4,28144
    3028:	e17fff17 	ldw	r5,-4(fp)
    302c:	01800044 	movi	r6,1
    3030:	01c07fc4 	movi	r7,511
    3034:	0002efc0 	call	2efc <alt_open_fd>
}  
    3038:	e037883a 	mov	sp,fp
    303c:	dfc00117 	ldw	ra,4(sp)
    3040:	df000017 	ldw	fp,0(sp)
    3044:	dec00204 	addi	sp,sp,8
    3048:	f800283a 	ret

0000304c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    304c:	defffa04 	addi	sp,sp,-24
    3050:	dfc00515 	stw	ra,20(sp)
    3054:	df000415 	stw	fp,16(sp)
    3058:	dc000315 	stw	r16,12(sp)
    305c:	df000304 	addi	fp,sp,12
    3060:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    3064:	e0bffe17 	ldw	r2,-8(fp)
    3068:	10800217 	ldw	r2,8(r2)
    306c:	10d00034 	orhi	r3,r2,16384
    3070:	e0bffe17 	ldw	r2,-8(fp)
    3074:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3078:	e03ffd15 	stw	zero,-12(fp)
    307c:	00002306 	br	310c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3080:	e13ffd17 	ldw	r4,-12(fp)
    3084:	04000034 	movhi	r16,0
    3088:	841b7604 	addi	r16,r16,28120
    308c:	01400304 	movi	r5,12
    3090:	00007e80 	call	7e8 <__mulsi3>
    3094:	1405883a 	add	r2,r2,r16
    3098:	10c00017 	ldw	r3,0(r2)
    309c:	e0bffe17 	ldw	r2,-8(fp)
    30a0:	10800017 	ldw	r2,0(r2)
    30a4:	1880161e 	bne	r3,r2,3100 <alt_file_locked+0xb4>
    30a8:	e13ffd17 	ldw	r4,-12(fp)
    30ac:	04000034 	movhi	r16,0
    30b0:	841b7604 	addi	r16,r16,28120
    30b4:	01400304 	movi	r5,12
    30b8:	00007e80 	call	7e8 <__mulsi3>
    30bc:	1405883a 	add	r2,r2,r16
    30c0:	10800204 	addi	r2,r2,8
    30c4:	10800017 	ldw	r2,0(r2)
    30c8:	1004403a 	cmpge	r2,r2,zero
    30cc:	10000c1e 	bne	r2,zero,3100 <alt_file_locked+0xb4>
    30d0:	e13ffd17 	ldw	r4,-12(fp)
    30d4:	01400304 	movi	r5,12
    30d8:	00007e80 	call	7e8 <__mulsi3>
    30dc:	1007883a 	mov	r3,r2
    30e0:	00800034 	movhi	r2,0
    30e4:	109b7604 	addi	r2,r2,28120
    30e8:	1887883a 	add	r3,r3,r2
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	18800326 	beq	r3,r2,3100 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    30f4:	00bffcc4 	movi	r2,-13
    30f8:	e0bfff15 	stw	r2,-4(fp)
    30fc:	00000a06 	br	3128 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3100:	e0bffd17 	ldw	r2,-12(fp)
    3104:	10800044 	addi	r2,r2,1
    3108:	e0bffd15 	stw	r2,-12(fp)
    310c:	00800034 	movhi	r2,0
    3110:	109be104 	addi	r2,r2,28548
    3114:	10800017 	ldw	r2,0(r2)
    3118:	1007883a 	mov	r3,r2
    311c:	e0bffd17 	ldw	r2,-12(fp)
    3120:	18bfd72e 	bgeu	r3,r2,3080 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3124:	e03fff15 	stw	zero,-4(fp)
    3128:	e0bfff17 	ldw	r2,-4(fp)
}
    312c:	e037883a 	mov	sp,fp
    3130:	dfc00217 	ldw	ra,8(sp)
    3134:	df000117 	ldw	fp,4(sp)
    3138:	dc000017 	ldw	r16,0(sp)
    313c:	dec00304 	addi	sp,sp,12
    3140:	f800283a 	ret

00003144 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3144:	defff404 	addi	sp,sp,-48
    3148:	dfc00b15 	stw	ra,44(sp)
    314c:	df000a15 	stw	fp,40(sp)
    3150:	df000a04 	addi	fp,sp,40
    3154:	e13ffb15 	stw	r4,-20(fp)
    3158:	e17ffc15 	stw	r5,-16(fp)
    315c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    3160:	00bfffc4 	movi	r2,-1
    3164:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    3168:	00bffb44 	movi	r2,-19
    316c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    3170:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    3174:	e13ffb17 	ldw	r4,-20(fp)
    3178:	01400034 	movhi	r5,0
    317c:	295bdf04 	addi	r5,r5,28540
    3180:	00033c80 	call	33c8 <alt_find_dev>
    3184:	e0bffa15 	stw	r2,-24(fp)
    3188:	e0bffa17 	ldw	r2,-24(fp)
    318c:	1004c03a 	cmpne	r2,r2,zero
    3190:	1000051e 	bne	r2,zero,31a8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    3194:	e13ffb17 	ldw	r4,-20(fp)
    3198:	000345c0 	call	345c <alt_find_file>
    319c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    31a0:	00800044 	movi	r2,1
    31a4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    31a8:	e0bffa17 	ldw	r2,-24(fp)
    31ac:	1005003a 	cmpeq	r2,r2,zero
    31b0:	1000311e 	bne	r2,zero,3278 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    31b4:	e13ffa17 	ldw	r4,-24(fp)
    31b8:	000357c0 	call	357c <alt_get_fd>
    31bc:	e0bff815 	stw	r2,-32(fp)
    31c0:	e0bff817 	ldw	r2,-32(fp)
    31c4:	1004403a 	cmpge	r2,r2,zero
    31c8:	1000031e 	bne	r2,zero,31d8 <open+0x94>
    {
      status = index;
    31cc:	e0bff817 	ldw	r2,-32(fp)
    31d0:	e0bff715 	stw	r2,-36(fp)
    31d4:	00002a06 	br	3280 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    31d8:	e13ff817 	ldw	r4,-32(fp)
    31dc:	01400304 	movi	r5,12
    31e0:	00007e80 	call	7e8 <__mulsi3>
    31e4:	1007883a 	mov	r3,r2
    31e8:	00800034 	movhi	r2,0
    31ec:	109b7604 	addi	r2,r2,28120
    31f0:	1885883a 	add	r2,r3,r2
    31f4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    31f8:	e0fffc17 	ldw	r3,-16(fp)
    31fc:	00900034 	movhi	r2,16384
    3200:	10bfffc4 	addi	r2,r2,-1
    3204:	1886703a 	and	r3,r3,r2
    3208:	e0bff917 	ldw	r2,-28(fp)
    320c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3210:	e0bff617 	ldw	r2,-40(fp)
    3214:	1004c03a 	cmpne	r2,r2,zero
    3218:	1000061e 	bne	r2,zero,3234 <open+0xf0>
    321c:	e13ff917 	ldw	r4,-28(fp)
    3220:	000304c0 	call	304c <alt_file_locked>
    3224:	e0bff715 	stw	r2,-36(fp)
    3228:	e0bff717 	ldw	r2,-36(fp)
    322c:	1004803a 	cmplt	r2,r2,zero
    3230:	1000131e 	bne	r2,zero,3280 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3234:	e0bffa17 	ldw	r2,-24(fp)
    3238:	10800317 	ldw	r2,12(r2)
    323c:	1005003a 	cmpeq	r2,r2,zero
    3240:	1000091e 	bne	r2,zero,3268 <open+0x124>
    3244:	e0bffa17 	ldw	r2,-24(fp)
    3248:	10800317 	ldw	r2,12(r2)
    324c:	e13ff917 	ldw	r4,-28(fp)
    3250:	e17ffb17 	ldw	r5,-20(fp)
    3254:	e1bffc17 	ldw	r6,-16(fp)
    3258:	e1fffd17 	ldw	r7,-12(fp)
    325c:	103ee83a 	callr	r2
    3260:	e0bfff15 	stw	r2,-4(fp)
    3264:	00000106 	br	326c <open+0x128>
    3268:	e03fff15 	stw	zero,-4(fp)
    326c:	e0bfff17 	ldw	r2,-4(fp)
    3270:	e0bff715 	stw	r2,-36(fp)
    3274:	00000206 	br	3280 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3278:	00bffb44 	movi	r2,-19
    327c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    3280:	e0bff717 	ldw	r2,-36(fp)
    3284:	1004403a 	cmpge	r2,r2,zero
    3288:	1000091e 	bne	r2,zero,32b0 <open+0x16c>
  {
    alt_release_fd (index);  
    328c:	e13ff817 	ldw	r4,-32(fp)
    3290:	00033300 	call	3330 <alt_release_fd>
    ALT_ERRNO = -status;
    3294:	00032d00 	call	32d0 <alt_get_errno>
    3298:	e0fff717 	ldw	r3,-36(fp)
    329c:	00c7c83a 	sub	r3,zero,r3
    32a0:	10c00015 	stw	r3,0(r2)
    return -1;
    32a4:	00bfffc4 	movi	r2,-1
    32a8:	e0bffe15 	stw	r2,-8(fp)
    32ac:	00000206 	br	32b8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    32b0:	e0bff817 	ldw	r2,-32(fp)
    32b4:	e0bffe15 	stw	r2,-8(fp)
    32b8:	e0bffe17 	ldw	r2,-8(fp)
}
    32bc:	e037883a 	mov	sp,fp
    32c0:	dfc00117 	ldw	ra,4(sp)
    32c4:	df000017 	ldw	fp,0(sp)
    32c8:	dec00204 	addi	sp,sp,8
    32cc:	f800283a 	ret

000032d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32d0:	defffd04 	addi	sp,sp,-12
    32d4:	dfc00215 	stw	ra,8(sp)
    32d8:	df000115 	stw	fp,4(sp)
    32dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    32e0:	00800034 	movhi	r2,0
    32e4:	109be204 	addi	r2,r2,28552
    32e8:	10800017 	ldw	r2,0(r2)
    32ec:	1005003a 	cmpeq	r2,r2,zero
    32f0:	1000061e 	bne	r2,zero,330c <alt_get_errno+0x3c>
    32f4:	00800034 	movhi	r2,0
    32f8:	109be204 	addi	r2,r2,28552
    32fc:	10800017 	ldw	r2,0(r2)
    3300:	103ee83a 	callr	r2
    3304:	e0bfff15 	stw	r2,-4(fp)
    3308:	00000306 	br	3318 <alt_get_errno+0x48>
    330c:	00800074 	movhi	r2,1
    3310:	10a27a04 	addi	r2,r2,-30232
    3314:	e0bfff15 	stw	r2,-4(fp)
    3318:	e0bfff17 	ldw	r2,-4(fp)
}
    331c:	e037883a 	mov	sp,fp
    3320:	dfc00117 	ldw	ra,4(sp)
    3324:	df000017 	ldw	fp,0(sp)
    3328:	dec00204 	addi	sp,sp,8
    332c:	f800283a 	ret

00003330 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3330:	defffc04 	addi	sp,sp,-16
    3334:	dfc00315 	stw	ra,12(sp)
    3338:	df000215 	stw	fp,8(sp)
    333c:	dc000115 	stw	r16,4(sp)
    3340:	df000104 	addi	fp,sp,4
    3344:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	108000d0 	cmplti	r2,r2,3
    3350:	10000f1e 	bne	r2,zero,3390 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    3354:	e13fff17 	ldw	r4,-4(fp)
    3358:	04000034 	movhi	r16,0
    335c:	841b7604 	addi	r16,r16,28120
    3360:	01400304 	movi	r5,12
    3364:	00007e80 	call	7e8 <__mulsi3>
    3368:	1405883a 	add	r2,r2,r16
    336c:	10800204 	addi	r2,r2,8
    3370:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3374:	e13fff17 	ldw	r4,-4(fp)
    3378:	04000034 	movhi	r16,0
    337c:	841b7604 	addi	r16,r16,28120
    3380:	01400304 	movi	r5,12
    3384:	00007e80 	call	7e8 <__mulsi3>
    3388:	1405883a 	add	r2,r2,r16
    338c:	10000015 	stw	zero,0(r2)
  }
}
    3390:	e037883a 	mov	sp,fp
    3394:	dfc00217 	ldw	ra,8(sp)
    3398:	df000117 	ldw	fp,4(sp)
    339c:	dc000017 	ldw	r16,0(sp)
    33a0:	dec00304 	addi	sp,sp,12
    33a4:	f800283a 	ret

000033a8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    33a8:	deffff04 	addi	sp,sp,-4
    33ac:	df000015 	stw	fp,0(sp)
    33b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    33b4:	000170fa 	wrctl	ienable,zero
}
    33b8:	e037883a 	mov	sp,fp
    33bc:	df000017 	ldw	fp,0(sp)
    33c0:	dec00104 	addi	sp,sp,4
    33c4:	f800283a 	ret

000033c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    33c8:	defff904 	addi	sp,sp,-28
    33cc:	dfc00615 	stw	ra,24(sp)
    33d0:	df000515 	stw	fp,20(sp)
    33d4:	df000504 	addi	fp,sp,20
    33d8:	e13ffd15 	stw	r4,-12(fp)
    33dc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    33e0:	e0bffe17 	ldw	r2,-8(fp)
    33e4:	10800017 	ldw	r2,0(r2)
    33e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    33ec:	e13ffd17 	ldw	r4,-12(fp)
    33f0:	00039980 	call	3998 <strlen>
    33f4:	10800044 	addi	r2,r2,1
    33f8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    33fc:	00000d06 	br	3434 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3400:	e0bffc17 	ldw	r2,-16(fp)
    3404:	11000217 	ldw	r4,8(r2)
    3408:	e1bffb17 	ldw	r6,-20(fp)
    340c:	e17ffd17 	ldw	r5,-12(fp)
    3410:	00036980 	call	3698 <memcmp>
    3414:	1004c03a 	cmpne	r2,r2,zero
    3418:	1000031e 	bne	r2,zero,3428 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    341c:	e0bffc17 	ldw	r2,-16(fp)
    3420:	e0bfff15 	stw	r2,-4(fp)
    3424:	00000706 	br	3444 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3428:	e0bffc17 	ldw	r2,-16(fp)
    342c:	10800017 	ldw	r2,0(r2)
    3430:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3434:	e0fffe17 	ldw	r3,-8(fp)
    3438:	e0bffc17 	ldw	r2,-16(fp)
    343c:	10fff01e 	bne	r2,r3,3400 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    3440:	e03fff15 	stw	zero,-4(fp)
    3444:	e0bfff17 	ldw	r2,-4(fp)
}
    3448:	e037883a 	mov	sp,fp
    344c:	dfc00117 	ldw	ra,4(sp)
    3450:	df000017 	ldw	fp,0(sp)
    3454:	dec00204 	addi	sp,sp,8
    3458:	f800283a 	ret

0000345c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    345c:	defffa04 	addi	sp,sp,-24
    3460:	dfc00515 	stw	ra,20(sp)
    3464:	df000415 	stw	fp,16(sp)
    3468:	df000404 	addi	fp,sp,16
    346c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3470:	00800034 	movhi	r2,0
    3474:	109bdd04 	addi	r2,r2,28532
    3478:	10800017 	ldw	r2,0(r2)
    347c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3480:	00003306 	br	3550 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    3484:	e0bffd17 	ldw	r2,-12(fp)
    3488:	11000217 	ldw	r4,8(r2)
    348c:	00039980 	call	3998 <strlen>
    3490:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    3494:	e0bffd17 	ldw	r2,-12(fp)
    3498:	10c00217 	ldw	r3,8(r2)
    349c:	e0bffc17 	ldw	r2,-16(fp)
    34a0:	1885883a 	add	r2,r3,r2
    34a4:	10bfffc4 	addi	r2,r2,-1
    34a8:	10800003 	ldbu	r2,0(r2)
    34ac:	10803fcc 	andi	r2,r2,255
    34b0:	1080201c 	xori	r2,r2,128
    34b4:	10bfe004 	addi	r2,r2,-128
    34b8:	10800bd8 	cmpnei	r2,r2,47
    34bc:	1000031e 	bne	r2,zero,34cc <alt_find_file+0x70>
    {
      len -= 1;
    34c0:	e0bffc17 	ldw	r2,-16(fp)
    34c4:	10bfffc4 	addi	r2,r2,-1
    34c8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    34cc:	e0bffc17 	ldw	r2,-16(fp)
    34d0:	1007883a 	mov	r3,r2
    34d4:	e0bffe17 	ldw	r2,-8(fp)
    34d8:	1885883a 	add	r2,r3,r2
    34dc:	10800003 	ldbu	r2,0(r2)
    34e0:	10803fcc 	andi	r2,r2,255
    34e4:	1080201c 	xori	r2,r2,128
    34e8:	10bfe004 	addi	r2,r2,-128
    34ec:	10800be0 	cmpeqi	r2,r2,47
    34f0:	10000a1e 	bne	r2,zero,351c <alt_find_file+0xc0>
    34f4:	e0bffc17 	ldw	r2,-16(fp)
    34f8:	1007883a 	mov	r3,r2
    34fc:	e0bffe17 	ldw	r2,-8(fp)
    3500:	1885883a 	add	r2,r3,r2
    3504:	10800003 	ldbu	r2,0(r2)
    3508:	10803fcc 	andi	r2,r2,255
    350c:	1080201c 	xori	r2,r2,128
    3510:	10bfe004 	addi	r2,r2,-128
    3514:	1004c03a 	cmpne	r2,r2,zero
    3518:	10000a1e 	bne	r2,zero,3544 <alt_find_file+0xe8>
    351c:	e0bffd17 	ldw	r2,-12(fp)
    3520:	11000217 	ldw	r4,8(r2)
    3524:	e1bffc17 	ldw	r6,-16(fp)
    3528:	e17ffe17 	ldw	r5,-8(fp)
    352c:	00036980 	call	3698 <memcmp>
    3530:	1004c03a 	cmpne	r2,r2,zero
    3534:	1000031e 	bne	r2,zero,3544 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3538:	e0bffd17 	ldw	r2,-12(fp)
    353c:	e0bfff15 	stw	r2,-4(fp)
    3540:	00000806 	br	3564 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3544:	e0bffd17 	ldw	r2,-12(fp)
    3548:	10800017 	ldw	r2,0(r2)
    354c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3550:	00c00034 	movhi	r3,0
    3554:	18dbdd04 	addi	r3,r3,28532
    3558:	e0bffd17 	ldw	r2,-12(fp)
    355c:	10ffc91e 	bne	r2,r3,3484 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3560:	e03fff15 	stw	zero,-4(fp)
    3564:	e0bfff17 	ldw	r2,-4(fp)
}
    3568:	e037883a 	mov	sp,fp
    356c:	dfc00117 	ldw	ra,4(sp)
    3570:	df000017 	ldw	fp,0(sp)
    3574:	dec00204 	addi	sp,sp,8
    3578:	f800283a 	ret

0000357c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    357c:	defffa04 	addi	sp,sp,-24
    3580:	dfc00515 	stw	ra,20(sp)
    3584:	df000415 	stw	fp,16(sp)
    3588:	dc000315 	stw	r16,12(sp)
    358c:	df000304 	addi	fp,sp,12
    3590:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3594:	00bffa04 	movi	r2,-24
    3598:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    359c:	e03ffe15 	stw	zero,-8(fp)
    35a0:	00002006 	br	3624 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    35a4:	e13ffe17 	ldw	r4,-8(fp)
    35a8:	04000034 	movhi	r16,0
    35ac:	841b7604 	addi	r16,r16,28120
    35b0:	01400304 	movi	r5,12
    35b4:	00007e80 	call	7e8 <__mulsi3>
    35b8:	1405883a 	add	r2,r2,r16
    35bc:	10800017 	ldw	r2,0(r2)
    35c0:	1004c03a 	cmpne	r2,r2,zero
    35c4:	1000141e 	bne	r2,zero,3618 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    35c8:	e13ffe17 	ldw	r4,-8(fp)
    35cc:	04000034 	movhi	r16,0
    35d0:	841b7604 	addi	r16,r16,28120
    35d4:	01400304 	movi	r5,12
    35d8:	00007e80 	call	7e8 <__mulsi3>
    35dc:	1407883a 	add	r3,r2,r16
    35e0:	e0bfff17 	ldw	r2,-4(fp)
    35e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    35e8:	00800034 	movhi	r2,0
    35ec:	109be104 	addi	r2,r2,28548
    35f0:	10c00017 	ldw	r3,0(r2)
    35f4:	e0bffe17 	ldw	r2,-8(fp)
    35f8:	1880040e 	bge	r3,r2,360c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    35fc:	00c00034 	movhi	r3,0
    3600:	18dbe104 	addi	r3,r3,28548
    3604:	e0bffe17 	ldw	r2,-8(fp)
    3608:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    360c:	e0bffe17 	ldw	r2,-8(fp)
    3610:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3614:	00000606 	br	3630 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3618:	e0bffe17 	ldw	r2,-8(fp)
    361c:	10800044 	addi	r2,r2,1
    3620:	e0bffe15 	stw	r2,-8(fp)
    3624:	e0bffe17 	ldw	r2,-8(fp)
    3628:	10800810 	cmplti	r2,r2,32
    362c:	103fdd1e 	bne	r2,zero,35a4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3630:	e0bffd17 	ldw	r2,-12(fp)
}
    3634:	e037883a 	mov	sp,fp
    3638:	dfc00217 	ldw	ra,8(sp)
    363c:	df000117 	ldw	fp,4(sp)
    3640:	dc000017 	ldw	r16,0(sp)
    3644:	dec00304 	addi	sp,sp,12
    3648:	f800283a 	ret

0000364c <atexit>:
    364c:	200b883a 	mov	r5,r4
    3650:	000d883a 	mov	r6,zero
    3654:	0009883a 	mov	r4,zero
    3658:	000f883a 	mov	r7,zero
    365c:	0003c941 	jmpi	3c94 <__register_exitproc>

00003660 <exit>:
    3660:	defffe04 	addi	sp,sp,-8
    3664:	000b883a 	mov	r5,zero
    3668:	dc000015 	stw	r16,0(sp)
    366c:	dfc00115 	stw	ra,4(sp)
    3670:	2021883a 	mov	r16,r4
    3674:	0003dcc0 	call	3dcc <__call_exitprocs>
    3678:	00800034 	movhi	r2,0
    367c:	109bd904 	addi	r2,r2,28516
    3680:	11000017 	ldw	r4,0(r2)
    3684:	20800f17 	ldw	r2,60(r4)
    3688:	10000126 	beq	r2,zero,3690 <exit+0x30>
    368c:	103ee83a 	callr	r2
    3690:	8009883a 	mov	r4,r16
    3694:	0004db80 	call	4db8 <_exit>

00003698 <memcmp>:
    3698:	00c000c4 	movi	r3,3
    369c:	1980032e 	bgeu	r3,r6,36ac <memcmp+0x14>
    36a0:	2144b03a 	or	r2,r4,r5
    36a4:	10c4703a 	and	r2,r2,r3
    36a8:	10000f26 	beq	r2,zero,36e8 <memcmp+0x50>
    36ac:	31ffffc4 	addi	r7,r6,-1
    36b0:	3000061e 	bne	r6,zero,36cc <memcmp+0x34>
    36b4:	00000a06 	br	36e0 <memcmp+0x48>
    36b8:	39ffffc4 	addi	r7,r7,-1
    36bc:	00bfffc4 	movi	r2,-1
    36c0:	21000044 	addi	r4,r4,1
    36c4:	29400044 	addi	r5,r5,1
    36c8:	38800526 	beq	r7,r2,36e0 <memcmp+0x48>
    36cc:	20c00003 	ldbu	r3,0(r4)
    36d0:	28800003 	ldbu	r2,0(r5)
    36d4:	18bff826 	beq	r3,r2,36b8 <memcmp+0x20>
    36d8:	1885c83a 	sub	r2,r3,r2
    36dc:	f800283a 	ret
    36e0:	0005883a 	mov	r2,zero
    36e4:	f800283a 	ret
    36e8:	180f883a 	mov	r7,r3
    36ec:	20c00017 	ldw	r3,0(r4)
    36f0:	28800017 	ldw	r2,0(r5)
    36f4:	18bfed1e 	bne	r3,r2,36ac <memcmp+0x14>
    36f8:	31bfff04 	addi	r6,r6,-4
    36fc:	21000104 	addi	r4,r4,4
    3700:	29400104 	addi	r5,r5,4
    3704:	39bff936 	bltu	r7,r6,36ec <memcmp+0x54>
    3708:	003fe806 	br	36ac <memcmp+0x14>

0000370c <memcpy>:
    370c:	01c003c4 	movi	r7,15
    3710:	2007883a 	mov	r3,r4
    3714:	3980032e 	bgeu	r7,r6,3724 <memcpy+0x18>
    3718:	2904b03a 	or	r2,r5,r4
    371c:	108000cc 	andi	r2,r2,3
    3720:	10000926 	beq	r2,zero,3748 <memcpy+0x3c>
    3724:	30000626 	beq	r6,zero,3740 <memcpy+0x34>
    3728:	30cd883a 	add	r6,r6,r3
    372c:	28800003 	ldbu	r2,0(r5)
    3730:	29400044 	addi	r5,r5,1
    3734:	18800005 	stb	r2,0(r3)
    3738:	18c00044 	addi	r3,r3,1
    373c:	30fffb1e 	bne	r6,r3,372c <memcpy+0x20>
    3740:	2005883a 	mov	r2,r4
    3744:	f800283a 	ret
    3748:	3811883a 	mov	r8,r7
    374c:	200f883a 	mov	r7,r4
    3750:	28c00017 	ldw	r3,0(r5)
    3754:	31bffc04 	addi	r6,r6,-16
    3758:	38c00015 	stw	r3,0(r7)
    375c:	28800117 	ldw	r2,4(r5)
    3760:	38800115 	stw	r2,4(r7)
    3764:	28c00217 	ldw	r3,8(r5)
    3768:	38c00215 	stw	r3,8(r7)
    376c:	28800317 	ldw	r2,12(r5)
    3770:	29400404 	addi	r5,r5,16
    3774:	38800315 	stw	r2,12(r7)
    3778:	39c00404 	addi	r7,r7,16
    377c:	41bff436 	bltu	r8,r6,3750 <memcpy+0x44>
    3780:	008000c4 	movi	r2,3
    3784:	1180072e 	bgeu	r2,r6,37a4 <memcpy+0x98>
    3788:	1007883a 	mov	r3,r2
    378c:	28800017 	ldw	r2,0(r5)
    3790:	31bfff04 	addi	r6,r6,-4
    3794:	29400104 	addi	r5,r5,4
    3798:	38800015 	stw	r2,0(r7)
    379c:	39c00104 	addi	r7,r7,4
    37a0:	19bffa36 	bltu	r3,r6,378c <memcpy+0x80>
    37a4:	3807883a 	mov	r3,r7
    37a8:	003fde06 	br	3724 <memcpy+0x18>

000037ac <putc>:
    37ac:	defffc04 	addi	sp,sp,-16
    37b0:	dc800215 	stw	r18,8(sp)
    37b4:	04800034 	movhi	r18,0
    37b8:	949bd804 	addi	r18,r18,28512
    37bc:	90c00017 	ldw	r3,0(r18)
    37c0:	dc400115 	stw	r17,4(sp)
    37c4:	dc000015 	stw	r16,0(sp)
    37c8:	dfc00315 	stw	ra,12(sp)
    37cc:	2023883a 	mov	r17,r4
    37d0:	2821883a 	mov	r16,r5
    37d4:	18000226 	beq	r3,zero,37e0 <putc+0x34>
    37d8:	18800e17 	ldw	r2,56(r3)
    37dc:	10001126 	beq	r2,zero,3824 <putc+0x78>
    37e0:	80800217 	ldw	r2,8(r16)
    37e4:	10ffffc4 	addi	r3,r2,-1
    37e8:	80c00215 	stw	r3,8(r16)
    37ec:	18001316 	blt	r3,zero,383c <putc+0x90>
    37f0:	80800017 	ldw	r2,0(r16)
    37f4:	14400005 	stb	r17,0(r2)
    37f8:	80c00017 	ldw	r3,0(r16)
    37fc:	18800044 	addi	r2,r3,1
    3800:	18c00003 	ldbu	r3,0(r3)
    3804:	80800015 	stw	r2,0(r16)
    3808:	1805883a 	mov	r2,r3
    380c:	dfc00317 	ldw	ra,12(sp)
    3810:	dc800217 	ldw	r18,8(sp)
    3814:	dc400117 	ldw	r17,4(sp)
    3818:	dc000017 	ldw	r16,0(sp)
    381c:	dec00404 	addi	sp,sp,16
    3820:	f800283a 	ret
    3824:	1809883a 	mov	r4,r3
    3828:	00042140 	call	4214 <__sinit>
    382c:	80800217 	ldw	r2,8(r16)
    3830:	10ffffc4 	addi	r3,r2,-1
    3834:	80c00215 	stw	r3,8(r16)
    3838:	183fed0e 	bge	r3,zero,37f0 <putc+0x44>
    383c:	80800617 	ldw	r2,24(r16)
    3840:	18800f16 	blt	r3,r2,3880 <putc+0xd4>
    3844:	80800017 	ldw	r2,0(r16)
    3848:	14400005 	stb	r17,0(r2)
    384c:	81000017 	ldw	r4,0(r16)
    3850:	00800284 	movi	r2,10
    3854:	20c00003 	ldbu	r3,0(r4)
    3858:	18801226 	beq	r3,r2,38a4 <putc+0xf8>
    385c:	20800044 	addi	r2,r4,1
    3860:	80800015 	stw	r2,0(r16)
    3864:	1805883a 	mov	r2,r3
    3868:	dfc00317 	ldw	ra,12(sp)
    386c:	dc800217 	ldw	r18,8(sp)
    3870:	dc400117 	ldw	r17,4(sp)
    3874:	dc000017 	ldw	r16,0(sp)
    3878:	dec00404 	addi	sp,sp,16
    387c:	f800283a 	ret
    3880:	91000017 	ldw	r4,0(r18)
    3884:	880b883a 	mov	r5,r17
    3888:	800d883a 	mov	r6,r16
    388c:	dfc00317 	ldw	ra,12(sp)
    3890:	dc800217 	ldw	r18,8(sp)
    3894:	dc400117 	ldw	r17,4(sp)
    3898:	dc000017 	ldw	r16,0(sp)
    389c:	dec00404 	addi	sp,sp,16
    38a0:	0003a0c1 	jmpi	3a0c <__swbuf_r>
    38a4:	91000017 	ldw	r4,0(r18)
    38a8:	180b883a 	mov	r5,r3
    38ac:	003ff606 	br	3888 <putc+0xdc>

000038b0 <_putc_r>:
    38b0:	defffc04 	addi	sp,sp,-16
    38b4:	dc400215 	stw	r17,8(sp)
    38b8:	dc000115 	stw	r16,4(sp)
    38bc:	dfc00315 	stw	ra,12(sp)
    38c0:	2021883a 	mov	r16,r4
    38c4:	2823883a 	mov	r17,r5
    38c8:	20000226 	beq	r4,zero,38d4 <_putc_r+0x24>
    38cc:	20800e17 	ldw	r2,56(r4)
    38d0:	10001026 	beq	r2,zero,3914 <_putc_r+0x64>
    38d4:	30800217 	ldw	r2,8(r6)
    38d8:	10ffffc4 	addi	r3,r2,-1
    38dc:	30c00215 	stw	r3,8(r6)
    38e0:	18001316 	blt	r3,zero,3930 <_putc_r+0x80>
    38e4:	30800017 	ldw	r2,0(r6)
    38e8:	14400005 	stb	r17,0(r2)
    38ec:	30c00017 	ldw	r3,0(r6)
    38f0:	18800044 	addi	r2,r3,1
    38f4:	18c00003 	ldbu	r3,0(r3)
    38f8:	30800015 	stw	r2,0(r6)
    38fc:	1805883a 	mov	r2,r3
    3900:	dfc00317 	ldw	ra,12(sp)
    3904:	dc400217 	ldw	r17,8(sp)
    3908:	dc000117 	ldw	r16,4(sp)
    390c:	dec00404 	addi	sp,sp,16
    3910:	f800283a 	ret
    3914:	d9800015 	stw	r6,0(sp)
    3918:	00042140 	call	4214 <__sinit>
    391c:	d9800017 	ldw	r6,0(sp)
    3920:	30800217 	ldw	r2,8(r6)
    3924:	10ffffc4 	addi	r3,r2,-1
    3928:	30c00215 	stw	r3,8(r6)
    392c:	183fed0e 	bge	r3,zero,38e4 <_putc_r+0x34>
    3930:	30800617 	ldw	r2,24(r6)
    3934:	18800e16 	blt	r3,r2,3970 <_putc_r+0xc0>
    3938:	30800017 	ldw	r2,0(r6)
    393c:	14400005 	stb	r17,0(r2)
    3940:	31000017 	ldw	r4,0(r6)
    3944:	00800284 	movi	r2,10
    3948:	20c00003 	ldbu	r3,0(r4)
    394c:	18800f26 	beq	r3,r2,398c <_putc_r+0xdc>
    3950:	20800044 	addi	r2,r4,1
    3954:	30800015 	stw	r2,0(r6)
    3958:	1805883a 	mov	r2,r3
    395c:	dfc00317 	ldw	ra,12(sp)
    3960:	dc400217 	ldw	r17,8(sp)
    3964:	dc000117 	ldw	r16,4(sp)
    3968:	dec00404 	addi	sp,sp,16
    396c:	f800283a 	ret
    3970:	8009883a 	mov	r4,r16
    3974:	880b883a 	mov	r5,r17
    3978:	dfc00317 	ldw	ra,12(sp)
    397c:	dc400217 	ldw	r17,8(sp)
    3980:	dc000117 	ldw	r16,4(sp)
    3984:	dec00404 	addi	sp,sp,16
    3988:	0003a0c1 	jmpi	3a0c <__swbuf_r>
    398c:	8009883a 	mov	r4,r16
    3990:	180b883a 	mov	r5,r3
    3994:	003ff806 	br	3978 <_putc_r+0xc8>

00003998 <strlen>:
    3998:	208000cc 	andi	r2,r4,3
    399c:	2011883a 	mov	r8,r4
    39a0:	1000161e 	bne	r2,zero,39fc <strlen+0x64>
    39a4:	20c00017 	ldw	r3,0(r4)
    39a8:	017fbff4 	movhi	r5,65279
    39ac:	297fbfc4 	addi	r5,r5,-257
    39b0:	01e02074 	movhi	r7,32897
    39b4:	39e02004 	addi	r7,r7,-32640
    39b8:	1945883a 	add	r2,r3,r5
    39bc:	11c4703a 	and	r2,r2,r7
    39c0:	00c6303a 	nor	r3,zero,r3
    39c4:	1886703a 	and	r3,r3,r2
    39c8:	18000c1e 	bne	r3,zero,39fc <strlen+0x64>
    39cc:	280d883a 	mov	r6,r5
    39d0:	380b883a 	mov	r5,r7
    39d4:	21000104 	addi	r4,r4,4
    39d8:	20800017 	ldw	r2,0(r4)
    39dc:	1187883a 	add	r3,r2,r6
    39e0:	1946703a 	and	r3,r3,r5
    39e4:	0084303a 	nor	r2,zero,r2
    39e8:	10c4703a 	and	r2,r2,r3
    39ec:	103ff926 	beq	r2,zero,39d4 <strlen+0x3c>
    39f0:	20800007 	ldb	r2,0(r4)
    39f4:	10000326 	beq	r2,zero,3a04 <strlen+0x6c>
    39f8:	21000044 	addi	r4,r4,1
    39fc:	20800007 	ldb	r2,0(r4)
    3a00:	103ffd1e 	bne	r2,zero,39f8 <strlen+0x60>
    3a04:	2205c83a 	sub	r2,r4,r8
    3a08:	f800283a 	ret

00003a0c <__swbuf_r>:
    3a0c:	defffc04 	addi	sp,sp,-16
    3a10:	dc400215 	stw	r17,8(sp)
    3a14:	dc000115 	stw	r16,4(sp)
    3a18:	dfc00315 	stw	ra,12(sp)
    3a1c:	2023883a 	mov	r17,r4
    3a20:	2821883a 	mov	r16,r5
    3a24:	20000226 	beq	r4,zero,3a30 <__swbuf_r+0x24>
    3a28:	20800e17 	ldw	r2,56(r4)
    3a2c:	10002f26 	beq	r2,zero,3aec <__swbuf_r+0xe0>
    3a30:	3080030b 	ldhu	r2,12(r6)
    3a34:	30c00617 	ldw	r3,24(r6)
    3a38:	1080020c 	andi	r2,r2,8
    3a3c:	30c00215 	stw	r3,8(r6)
    3a40:	10002226 	beq	r2,zero,3acc <__swbuf_r+0xc0>
    3a44:	30c00417 	ldw	r3,16(r6)
    3a48:	18002026 	beq	r3,zero,3acc <__swbuf_r+0xc0>
    3a4c:	31000017 	ldw	r4,0(r6)
    3a50:	30800517 	ldw	r2,20(r6)
    3a54:	20c7c83a 	sub	r3,r4,r3
    3a58:	18802f0e 	bge	r3,r2,3b18 <__swbuf_r+0x10c>
    3a5c:	19400044 	addi	r5,r3,1
    3a60:	30800217 	ldw	r2,8(r6)
    3a64:	84003fcc 	andi	r16,r16,255
    3a68:	20c00044 	addi	r3,r4,1
    3a6c:	10bfffc4 	addi	r2,r2,-1
    3a70:	30800215 	stw	r2,8(r6)
    3a74:	24000005 	stb	r16,0(r4)
    3a78:	30800517 	ldw	r2,20(r6)
    3a7c:	30c00015 	stw	r3,0(r6)
    3a80:	11400c26 	beq	r2,r5,3ab4 <__swbuf_r+0xa8>
    3a84:	3080030b 	ldhu	r2,12(r6)
    3a88:	1080004c 	andi	r2,r2,1
    3a8c:	1005003a 	cmpeq	r2,r2,zero
    3a90:	10000626 	beq	r2,zero,3aac <__swbuf_r+0xa0>
    3a94:	8005883a 	mov	r2,r16
    3a98:	dfc00317 	ldw	ra,12(sp)
    3a9c:	dc400217 	ldw	r17,8(sp)
    3aa0:	dc000117 	ldw	r16,4(sp)
    3aa4:	dec00404 	addi	sp,sp,16
    3aa8:	f800283a 	ret
    3aac:	00800284 	movi	r2,10
    3ab0:	80bff81e 	bne	r16,r2,3a94 <__swbuf_r+0x88>
    3ab4:	8809883a 	mov	r4,r17
    3ab8:	300b883a 	mov	r5,r6
    3abc:	0003f7c0 	call	3f7c <_fflush_r>
    3ac0:	103ff426 	beq	r2,zero,3a94 <__swbuf_r+0x88>
    3ac4:	043fffc4 	movi	r16,-1
    3ac8:	003ff206 	br	3a94 <__swbuf_r+0x88>
    3acc:	300b883a 	mov	r5,r6
    3ad0:	8809883a 	mov	r4,r17
    3ad4:	d9800015 	stw	r6,0(sp)
    3ad8:	0003b580 	call	3b58 <__swsetup_r>
    3adc:	d9800017 	ldw	r6,0(sp)
    3ae0:	1000061e 	bne	r2,zero,3afc <__swbuf_r+0xf0>
    3ae4:	30c00417 	ldw	r3,16(r6)
    3ae8:	003fd806 	br	3a4c <__swbuf_r+0x40>
    3aec:	d9800015 	stw	r6,0(sp)
    3af0:	00042140 	call	4214 <__sinit>
    3af4:	d9800017 	ldw	r6,0(sp)
    3af8:	003fcd06 	br	3a30 <__swbuf_r+0x24>
    3afc:	3080030b 	ldhu	r2,12(r6)
    3b00:	00c00244 	movi	r3,9
    3b04:	043fffc4 	movi	r16,-1
    3b08:	10801014 	ori	r2,r2,64
    3b0c:	3080030d 	sth	r2,12(r6)
    3b10:	88c00015 	stw	r3,0(r17)
    3b14:	003fdf06 	br	3a94 <__swbuf_r+0x88>
    3b18:	300b883a 	mov	r5,r6
    3b1c:	8809883a 	mov	r4,r17
    3b20:	d9800015 	stw	r6,0(sp)
    3b24:	0003f7c0 	call	3f7c <_fflush_r>
    3b28:	d9800017 	ldw	r6,0(sp)
    3b2c:	103fe51e 	bne	r2,zero,3ac4 <__swbuf_r+0xb8>
    3b30:	31000017 	ldw	r4,0(r6)
    3b34:	01400044 	movi	r5,1
    3b38:	003fc906 	br	3a60 <__swbuf_r+0x54>

00003b3c <__swbuf>:
    3b3c:	01800034 	movhi	r6,0
    3b40:	319bd804 	addi	r6,r6,28512
    3b44:	2007883a 	mov	r3,r4
    3b48:	31000017 	ldw	r4,0(r6)
    3b4c:	280d883a 	mov	r6,r5
    3b50:	180b883a 	mov	r5,r3
    3b54:	0003a0c1 	jmpi	3a0c <__swbuf_r>

00003b58 <__swsetup_r>:
    3b58:	00800034 	movhi	r2,0
    3b5c:	109bd804 	addi	r2,r2,28512
    3b60:	10c00017 	ldw	r3,0(r2)
    3b64:	defffd04 	addi	sp,sp,-12
    3b68:	dc400115 	stw	r17,4(sp)
    3b6c:	dc000015 	stw	r16,0(sp)
    3b70:	dfc00215 	stw	ra,8(sp)
    3b74:	2023883a 	mov	r17,r4
    3b78:	2821883a 	mov	r16,r5
    3b7c:	18000226 	beq	r3,zero,3b88 <__swsetup_r+0x30>
    3b80:	18800e17 	ldw	r2,56(r3)
    3b84:	10001f26 	beq	r2,zero,3c04 <__swsetup_r+0xac>
    3b88:	8100030b 	ldhu	r4,12(r16)
    3b8c:	2080020c 	andi	r2,r4,8
    3b90:	10002826 	beq	r2,zero,3c34 <__swsetup_r+0xdc>
    3b94:	81400417 	ldw	r5,16(r16)
    3b98:	28001d26 	beq	r5,zero,3c10 <__swsetup_r+0xb8>
    3b9c:	2080004c 	andi	r2,r4,1
    3ba0:	1005003a 	cmpeq	r2,r2,zero
    3ba4:	10000b26 	beq	r2,zero,3bd4 <__swsetup_r+0x7c>
    3ba8:	2080008c 	andi	r2,r4,2
    3bac:	10001226 	beq	r2,zero,3bf8 <__swsetup_r+0xa0>
    3bb0:	0005883a 	mov	r2,zero
    3bb4:	80800215 	stw	r2,8(r16)
    3bb8:	28000b26 	beq	r5,zero,3be8 <__swsetup_r+0x90>
    3bbc:	0005883a 	mov	r2,zero
    3bc0:	dfc00217 	ldw	ra,8(sp)
    3bc4:	dc400117 	ldw	r17,4(sp)
    3bc8:	dc000017 	ldw	r16,0(sp)
    3bcc:	dec00304 	addi	sp,sp,12
    3bd0:	f800283a 	ret
    3bd4:	80800517 	ldw	r2,20(r16)
    3bd8:	80000215 	stw	zero,8(r16)
    3bdc:	0085c83a 	sub	r2,zero,r2
    3be0:	80800615 	stw	r2,24(r16)
    3be4:	283ff51e 	bne	r5,zero,3bbc <__swsetup_r+0x64>
    3be8:	2080200c 	andi	r2,r4,128
    3bec:	103ff326 	beq	r2,zero,3bbc <__swsetup_r+0x64>
    3bf0:	00bfffc4 	movi	r2,-1
    3bf4:	003ff206 	br	3bc0 <__swsetup_r+0x68>
    3bf8:	80800517 	ldw	r2,20(r16)
    3bfc:	80800215 	stw	r2,8(r16)
    3c00:	003fed06 	br	3bb8 <__swsetup_r+0x60>
    3c04:	1809883a 	mov	r4,r3
    3c08:	00042140 	call	4214 <__sinit>
    3c0c:	003fde06 	br	3b88 <__swsetup_r+0x30>
    3c10:	20c0a00c 	andi	r3,r4,640
    3c14:	00808004 	movi	r2,512
    3c18:	18bfe026 	beq	r3,r2,3b9c <__swsetup_r+0x44>
    3c1c:	8809883a 	mov	r4,r17
    3c20:	800b883a 	mov	r5,r16
    3c24:	00046200 	call	4620 <__smakebuf_r>
    3c28:	8100030b 	ldhu	r4,12(r16)
    3c2c:	81400417 	ldw	r5,16(r16)
    3c30:	003fda06 	br	3b9c <__swsetup_r+0x44>
    3c34:	2080040c 	andi	r2,r4,16
    3c38:	103fed26 	beq	r2,zero,3bf0 <__swsetup_r+0x98>
    3c3c:	2080010c 	andi	r2,r4,4
    3c40:	10001226 	beq	r2,zero,3c8c <__swsetup_r+0x134>
    3c44:	81400c17 	ldw	r5,48(r16)
    3c48:	28000526 	beq	r5,zero,3c60 <__swsetup_r+0x108>
    3c4c:	80801004 	addi	r2,r16,64
    3c50:	28800226 	beq	r5,r2,3c5c <__swsetup_r+0x104>
    3c54:	8809883a 	mov	r4,r17
    3c58:	00011240 	call	1124 <_free_r>
    3c5c:	80000c15 	stw	zero,48(r16)
    3c60:	8080030b 	ldhu	r2,12(r16)
    3c64:	81400417 	ldw	r5,16(r16)
    3c68:	80000115 	stw	zero,4(r16)
    3c6c:	10bff6cc 	andi	r2,r2,65499
    3c70:	8080030d 	sth	r2,12(r16)
    3c74:	81400015 	stw	r5,0(r16)
    3c78:	8080030b 	ldhu	r2,12(r16)
    3c7c:	10800214 	ori	r2,r2,8
    3c80:	113fffcc 	andi	r4,r2,65535
    3c84:	8080030d 	sth	r2,12(r16)
    3c88:	003fc306 	br	3b98 <__swsetup_r+0x40>
    3c8c:	81400417 	ldw	r5,16(r16)
    3c90:	003ff906 	br	3c78 <__swsetup_r+0x120>

00003c94 <__register_exitproc>:
    3c94:	defffa04 	addi	sp,sp,-24
    3c98:	00800034 	movhi	r2,0
    3c9c:	109bd904 	addi	r2,r2,28516
    3ca0:	dc000015 	stw	r16,0(sp)
    3ca4:	14000017 	ldw	r16,0(r2)
    3ca8:	dd000415 	stw	r20,16(sp)
    3cac:	2829883a 	mov	r20,r5
    3cb0:	81405217 	ldw	r5,328(r16)
    3cb4:	dcc00315 	stw	r19,12(sp)
    3cb8:	dc800215 	stw	r18,8(sp)
    3cbc:	dc400115 	stw	r17,4(sp)
    3cc0:	dfc00515 	stw	ra,20(sp)
    3cc4:	2023883a 	mov	r17,r4
    3cc8:	3027883a 	mov	r19,r6
    3ccc:	3825883a 	mov	r18,r7
    3cd0:	28002526 	beq	r5,zero,3d68 <__register_exitproc+0xd4>
    3cd4:	29000117 	ldw	r4,4(r5)
    3cd8:	008007c4 	movi	r2,31
    3cdc:	11002716 	blt	r2,r4,3d7c <__register_exitproc+0xe8>
    3ce0:	8800101e 	bne	r17,zero,3d24 <__register_exitproc+0x90>
    3ce4:	2105883a 	add	r2,r4,r4
    3ce8:	1085883a 	add	r2,r2,r2
    3cec:	20c00044 	addi	r3,r4,1
    3cf0:	1145883a 	add	r2,r2,r5
    3cf4:	0009883a 	mov	r4,zero
    3cf8:	15000215 	stw	r20,8(r2)
    3cfc:	28c00115 	stw	r3,4(r5)
    3d00:	2005883a 	mov	r2,r4
    3d04:	dfc00517 	ldw	ra,20(sp)
    3d08:	dd000417 	ldw	r20,16(sp)
    3d0c:	dcc00317 	ldw	r19,12(sp)
    3d10:	dc800217 	ldw	r18,8(sp)
    3d14:	dc400117 	ldw	r17,4(sp)
    3d18:	dc000017 	ldw	r16,0(sp)
    3d1c:	dec00604 	addi	sp,sp,24
    3d20:	f800283a 	ret
    3d24:	29802204 	addi	r6,r5,136
    3d28:	00800044 	movi	r2,1
    3d2c:	110e983a 	sll	r7,r2,r4
    3d30:	30c04017 	ldw	r3,256(r6)
    3d34:	2105883a 	add	r2,r4,r4
    3d38:	1085883a 	add	r2,r2,r2
    3d3c:	1185883a 	add	r2,r2,r6
    3d40:	19c6b03a 	or	r3,r3,r7
    3d44:	14802015 	stw	r18,128(r2)
    3d48:	14c00015 	stw	r19,0(r2)
    3d4c:	00800084 	movi	r2,2
    3d50:	30c04015 	stw	r3,256(r6)
    3d54:	88bfe31e 	bne	r17,r2,3ce4 <__register_exitproc+0x50>
    3d58:	30804117 	ldw	r2,260(r6)
    3d5c:	11c4b03a 	or	r2,r2,r7
    3d60:	30804115 	stw	r2,260(r6)
    3d64:	003fdf06 	br	3ce4 <__register_exitproc+0x50>
    3d68:	00800074 	movhi	r2,1
    3d6c:	10a2dd04 	addi	r2,r2,-29836
    3d70:	100b883a 	mov	r5,r2
    3d74:	80805215 	stw	r2,328(r16)
    3d78:	003fd606 	br	3cd4 <__register_exitproc+0x40>
    3d7c:	00800034 	movhi	r2,0
    3d80:	10820d04 	addi	r2,r2,2100
    3d84:	1000021e 	bne	r2,zero,3d90 <__register_exitproc+0xfc>
    3d88:	013fffc4 	movi	r4,-1
    3d8c:	003fdc06 	br	3d00 <__register_exitproc+0x6c>
    3d90:	01006404 	movi	r4,400
    3d94:	103ee83a 	callr	r2
    3d98:	1007883a 	mov	r3,r2
    3d9c:	103ffa26 	beq	r2,zero,3d88 <__register_exitproc+0xf4>
    3da0:	80805217 	ldw	r2,328(r16)
    3da4:	180b883a 	mov	r5,r3
    3da8:	18000115 	stw	zero,4(r3)
    3dac:	18800015 	stw	r2,0(r3)
    3db0:	80c05215 	stw	r3,328(r16)
    3db4:	18006215 	stw	zero,392(r3)
    3db8:	18006315 	stw	zero,396(r3)
    3dbc:	0009883a 	mov	r4,zero
    3dc0:	883fc826 	beq	r17,zero,3ce4 <__register_exitproc+0x50>
    3dc4:	003fd706 	br	3d24 <__register_exitproc+0x90>

00003dc8 <register_fini>:
    3dc8:	f800283a 	ret

00003dcc <__call_exitprocs>:
    3dcc:	00800034 	movhi	r2,0
    3dd0:	109bd904 	addi	r2,r2,28516
    3dd4:	10800017 	ldw	r2,0(r2)
    3dd8:	defff304 	addi	sp,sp,-52
    3ddc:	df000b15 	stw	fp,44(sp)
    3de0:	d8800115 	stw	r2,4(sp)
    3de4:	00800034 	movhi	r2,0
    3de8:	10820804 	addi	r2,r2,2080
    3dec:	1005003a 	cmpeq	r2,r2,zero
    3df0:	d8800215 	stw	r2,8(sp)
    3df4:	d8800117 	ldw	r2,4(sp)
    3df8:	dd400815 	stw	r21,32(sp)
    3dfc:	dd000715 	stw	r20,28(sp)
    3e00:	10805204 	addi	r2,r2,328
    3e04:	dfc00c15 	stw	ra,48(sp)
    3e08:	ddc00a15 	stw	r23,40(sp)
    3e0c:	dd800915 	stw	r22,36(sp)
    3e10:	dcc00615 	stw	r19,24(sp)
    3e14:	dc800515 	stw	r18,20(sp)
    3e18:	dc400415 	stw	r17,16(sp)
    3e1c:	dc000315 	stw	r16,12(sp)
    3e20:	282b883a 	mov	r21,r5
    3e24:	2039883a 	mov	fp,r4
    3e28:	d8800015 	stw	r2,0(sp)
    3e2c:	2829003a 	cmpeq	r20,r5,zero
    3e30:	d8800117 	ldw	r2,4(sp)
    3e34:	14405217 	ldw	r17,328(r2)
    3e38:	88001026 	beq	r17,zero,3e7c <__call_exitprocs+0xb0>
    3e3c:	ddc00017 	ldw	r23,0(sp)
    3e40:	88800117 	ldw	r2,4(r17)
    3e44:	8c802204 	addi	r18,r17,136
    3e48:	143fffc4 	addi	r16,r2,-1
    3e4c:	80000916 	blt	r16,zero,3e74 <__call_exitprocs+0xa8>
    3e50:	05bfffc4 	movi	r22,-1
    3e54:	a000151e 	bne	r20,zero,3eac <__call_exitprocs+0xe0>
    3e58:	8409883a 	add	r4,r16,r16
    3e5c:	2105883a 	add	r2,r4,r4
    3e60:	1485883a 	add	r2,r2,r18
    3e64:	10c02017 	ldw	r3,128(r2)
    3e68:	a8c01126 	beq	r21,r3,3eb0 <__call_exitprocs+0xe4>
    3e6c:	843fffc4 	addi	r16,r16,-1
    3e70:	85bff81e 	bne	r16,r22,3e54 <__call_exitprocs+0x88>
    3e74:	d8800217 	ldw	r2,8(sp)
    3e78:	10003126 	beq	r2,zero,3f40 <__call_exitprocs+0x174>
    3e7c:	dfc00c17 	ldw	ra,48(sp)
    3e80:	df000b17 	ldw	fp,44(sp)
    3e84:	ddc00a17 	ldw	r23,40(sp)
    3e88:	dd800917 	ldw	r22,36(sp)
    3e8c:	dd400817 	ldw	r21,32(sp)
    3e90:	dd000717 	ldw	r20,28(sp)
    3e94:	dcc00617 	ldw	r19,24(sp)
    3e98:	dc800517 	ldw	r18,20(sp)
    3e9c:	dc400417 	ldw	r17,16(sp)
    3ea0:	dc000317 	ldw	r16,12(sp)
    3ea4:	dec00d04 	addi	sp,sp,52
    3ea8:	f800283a 	ret
    3eac:	8409883a 	add	r4,r16,r16
    3eb0:	88c00117 	ldw	r3,4(r17)
    3eb4:	2105883a 	add	r2,r4,r4
    3eb8:	1445883a 	add	r2,r2,r17
    3ebc:	18ffffc4 	addi	r3,r3,-1
    3ec0:	11800217 	ldw	r6,8(r2)
    3ec4:	1c001526 	beq	r3,r16,3f1c <__call_exitprocs+0x150>
    3ec8:	10000215 	stw	zero,8(r2)
    3ecc:	303fe726 	beq	r6,zero,3e6c <__call_exitprocs+0xa0>
    3ed0:	00c00044 	movi	r3,1
    3ed4:	1c06983a 	sll	r3,r3,r16
    3ed8:	90804017 	ldw	r2,256(r18)
    3edc:	8cc00117 	ldw	r19,4(r17)
    3ee0:	1884703a 	and	r2,r3,r2
    3ee4:	10001426 	beq	r2,zero,3f38 <__call_exitprocs+0x16c>
    3ee8:	90804117 	ldw	r2,260(r18)
    3eec:	1884703a 	and	r2,r3,r2
    3ef0:	10000c1e 	bne	r2,zero,3f24 <__call_exitprocs+0x158>
    3ef4:	2105883a 	add	r2,r4,r4
    3ef8:	1485883a 	add	r2,r2,r18
    3efc:	11400017 	ldw	r5,0(r2)
    3f00:	e009883a 	mov	r4,fp
    3f04:	303ee83a 	callr	r6
    3f08:	88800117 	ldw	r2,4(r17)
    3f0c:	98bfc81e 	bne	r19,r2,3e30 <__call_exitprocs+0x64>
    3f10:	b8800017 	ldw	r2,0(r23)
    3f14:	147fd526 	beq	r2,r17,3e6c <__call_exitprocs+0xa0>
    3f18:	003fc506 	br	3e30 <__call_exitprocs+0x64>
    3f1c:	8c000115 	stw	r16,4(r17)
    3f20:	003fea06 	br	3ecc <__call_exitprocs+0x100>
    3f24:	2105883a 	add	r2,r4,r4
    3f28:	1485883a 	add	r2,r2,r18
    3f2c:	11000017 	ldw	r4,0(r2)
    3f30:	303ee83a 	callr	r6
    3f34:	003ff406 	br	3f08 <__call_exitprocs+0x13c>
    3f38:	303ee83a 	callr	r6
    3f3c:	003ff206 	br	3f08 <__call_exitprocs+0x13c>
    3f40:	88800117 	ldw	r2,4(r17)
    3f44:	1000081e 	bne	r2,zero,3f68 <__call_exitprocs+0x19c>
    3f48:	89000017 	ldw	r4,0(r17)
    3f4c:	20000726 	beq	r4,zero,3f6c <__call_exitprocs+0x1a0>
    3f50:	b9000015 	stw	r4,0(r23)
    3f54:	8809883a 	mov	r4,r17
    3f58:	00008200 	call	820 <free>
    3f5c:	bc400017 	ldw	r17,0(r23)
    3f60:	883fb71e 	bne	r17,zero,3e40 <__call_exitprocs+0x74>
    3f64:	003fc506 	br	3e7c <__call_exitprocs+0xb0>
    3f68:	89000017 	ldw	r4,0(r17)
    3f6c:	882f883a 	mov	r23,r17
    3f70:	2023883a 	mov	r17,r4
    3f74:	883fb21e 	bne	r17,zero,3e40 <__call_exitprocs+0x74>
    3f78:	003fc006 	br	3e7c <__call_exitprocs+0xb0>

00003f7c <_fflush_r>:
    3f7c:	defffb04 	addi	sp,sp,-20
    3f80:	dcc00315 	stw	r19,12(sp)
    3f84:	dc800215 	stw	r18,8(sp)
    3f88:	dfc00415 	stw	ra,16(sp)
    3f8c:	dc400115 	stw	r17,4(sp)
    3f90:	dc000015 	stw	r16,0(sp)
    3f94:	2027883a 	mov	r19,r4
    3f98:	2825883a 	mov	r18,r5
    3f9c:	20000226 	beq	r4,zero,3fa8 <_fflush_r+0x2c>
    3fa0:	20800e17 	ldw	r2,56(r4)
    3fa4:	10005626 	beq	r2,zero,4100 <_fflush_r+0x184>
    3fa8:	9100030b 	ldhu	r4,12(r18)
    3fac:	20ffffcc 	andi	r3,r4,65535
    3fb0:	18e0001c 	xori	r3,r3,32768
    3fb4:	18e00004 	addi	r3,r3,-32768
    3fb8:	1880020c 	andi	r2,r3,8
    3fbc:	1000261e 	bne	r2,zero,4058 <_fflush_r+0xdc>
    3fc0:	90c00117 	ldw	r3,4(r18)
    3fc4:	20820014 	ori	r2,r4,2048
    3fc8:	9080030d 	sth	r2,12(r18)
    3fcc:	1009883a 	mov	r4,r2
    3fd0:	00c0400e 	bge	zero,r3,40d4 <_fflush_r+0x158>
    3fd4:	92000a17 	ldw	r8,40(r18)
    3fd8:	40004026 	beq	r8,zero,40dc <_fflush_r+0x160>
    3fdc:	2084000c 	andi	r2,r4,4096
    3fe0:	10005326 	beq	r2,zero,4130 <_fflush_r+0x1b4>
    3fe4:	94001417 	ldw	r16,80(r18)
    3fe8:	9080030b 	ldhu	r2,12(r18)
    3fec:	1080010c 	andi	r2,r2,4
    3ff0:	1000481e 	bne	r2,zero,4114 <_fflush_r+0x198>
    3ff4:	91400717 	ldw	r5,28(r18)
    3ff8:	9809883a 	mov	r4,r19
    3ffc:	800d883a 	mov	r6,r16
    4000:	000f883a 	mov	r7,zero
    4004:	403ee83a 	callr	r8
    4008:	8080261e 	bne	r16,r2,40a4 <_fflush_r+0x128>
    400c:	9080030b 	ldhu	r2,12(r18)
    4010:	91000417 	ldw	r4,16(r18)
    4014:	90000115 	stw	zero,4(r18)
    4018:	10bdffcc 	andi	r2,r2,63487
    401c:	10ffffcc 	andi	r3,r2,65535
    4020:	18c4000c 	andi	r3,r3,4096
    4024:	9080030d 	sth	r2,12(r18)
    4028:	91000015 	stw	r4,0(r18)
    402c:	18002b26 	beq	r3,zero,40dc <_fflush_r+0x160>
    4030:	0007883a 	mov	r3,zero
    4034:	1805883a 	mov	r2,r3
    4038:	94001415 	stw	r16,80(r18)
    403c:	dfc00417 	ldw	ra,16(sp)
    4040:	dcc00317 	ldw	r19,12(sp)
    4044:	dc800217 	ldw	r18,8(sp)
    4048:	dc400117 	ldw	r17,4(sp)
    404c:	dc000017 	ldw	r16,0(sp)
    4050:	dec00504 	addi	sp,sp,20
    4054:	f800283a 	ret
    4058:	94400417 	ldw	r17,16(r18)
    405c:	88001f26 	beq	r17,zero,40dc <_fflush_r+0x160>
    4060:	90800017 	ldw	r2,0(r18)
    4064:	18c000cc 	andi	r3,r3,3
    4068:	94400015 	stw	r17,0(r18)
    406c:	1461c83a 	sub	r16,r2,r17
    4070:	18002526 	beq	r3,zero,4108 <_fflush_r+0x18c>
    4074:	0005883a 	mov	r2,zero
    4078:	90800215 	stw	r2,8(r18)
    407c:	0400170e 	bge	zero,r16,40dc <_fflush_r+0x160>
    4080:	90c00917 	ldw	r3,36(r18)
    4084:	91400717 	ldw	r5,28(r18)
    4088:	880d883a 	mov	r6,r17
    408c:	800f883a 	mov	r7,r16
    4090:	9809883a 	mov	r4,r19
    4094:	183ee83a 	callr	r3
    4098:	88a3883a 	add	r17,r17,r2
    409c:	80a1c83a 	sub	r16,r16,r2
    40a0:	00bff616 	blt	zero,r2,407c <_fflush_r+0x100>
    40a4:	9080030b 	ldhu	r2,12(r18)
    40a8:	00ffffc4 	movi	r3,-1
    40ac:	10801014 	ori	r2,r2,64
    40b0:	9080030d 	sth	r2,12(r18)
    40b4:	1805883a 	mov	r2,r3
    40b8:	dfc00417 	ldw	ra,16(sp)
    40bc:	dcc00317 	ldw	r19,12(sp)
    40c0:	dc800217 	ldw	r18,8(sp)
    40c4:	dc400117 	ldw	r17,4(sp)
    40c8:	dc000017 	ldw	r16,0(sp)
    40cc:	dec00504 	addi	sp,sp,20
    40d0:	f800283a 	ret
    40d4:	90800f17 	ldw	r2,60(r18)
    40d8:	00bfbe16 	blt	zero,r2,3fd4 <_fflush_r+0x58>
    40dc:	0007883a 	mov	r3,zero
    40e0:	1805883a 	mov	r2,r3
    40e4:	dfc00417 	ldw	ra,16(sp)
    40e8:	dcc00317 	ldw	r19,12(sp)
    40ec:	dc800217 	ldw	r18,8(sp)
    40f0:	dc400117 	ldw	r17,4(sp)
    40f4:	dc000017 	ldw	r16,0(sp)
    40f8:	dec00504 	addi	sp,sp,20
    40fc:	f800283a 	ret
    4100:	00042140 	call	4214 <__sinit>
    4104:	003fa806 	br	3fa8 <_fflush_r+0x2c>
    4108:	90800517 	ldw	r2,20(r18)
    410c:	90800215 	stw	r2,8(r18)
    4110:	003fda06 	br	407c <_fflush_r+0x100>
    4114:	90800117 	ldw	r2,4(r18)
    4118:	90c00c17 	ldw	r3,48(r18)
    411c:	80a1c83a 	sub	r16,r16,r2
    4120:	183fb426 	beq	r3,zero,3ff4 <_fflush_r+0x78>
    4124:	90800f17 	ldw	r2,60(r18)
    4128:	80a1c83a 	sub	r16,r16,r2
    412c:	003fb106 	br	3ff4 <_fflush_r+0x78>
    4130:	91400717 	ldw	r5,28(r18)
    4134:	9809883a 	mov	r4,r19
    4138:	000d883a 	mov	r6,zero
    413c:	01c00044 	movi	r7,1
    4140:	403ee83a 	callr	r8
    4144:	1021883a 	mov	r16,r2
    4148:	00bfffc4 	movi	r2,-1
    414c:	80800226 	beq	r16,r2,4158 <_fflush_r+0x1dc>
    4150:	92000a17 	ldw	r8,40(r18)
    4154:	003fa406 	br	3fe8 <_fflush_r+0x6c>
    4158:	98c00017 	ldw	r3,0(r19)
    415c:	00800744 	movi	r2,29
    4160:	18bfde26 	beq	r3,r2,40dc <_fflush_r+0x160>
    4164:	9080030b 	ldhu	r2,12(r18)
    4168:	8007883a 	mov	r3,r16
    416c:	10801014 	ori	r2,r2,64
    4170:	9080030d 	sth	r2,12(r18)
    4174:	003fcf06 	br	40b4 <_fflush_r+0x138>

00004178 <fflush>:
    4178:	01400034 	movhi	r5,0
    417c:	294fdf04 	addi	r5,r5,16252
    4180:	2007883a 	mov	r3,r4
    4184:	20000526 	beq	r4,zero,419c <fflush+0x24>
    4188:	00800034 	movhi	r2,0
    418c:	109bd804 	addi	r2,r2,28512
    4190:	11000017 	ldw	r4,0(r2)
    4194:	180b883a 	mov	r5,r3
    4198:	0003f7c1 	jmpi	3f7c <_fflush_r>
    419c:	00800034 	movhi	r2,0
    41a0:	109bd904 	addi	r2,r2,28516
    41a4:	11000017 	ldw	r4,0(r2)
    41a8:	00044a01 	jmpi	44a0 <_fwalk_reent>

000041ac <std>:
    41ac:	00800034 	movhi	r2,0
    41b0:	10921304 	addi	r2,r2,18508
    41b4:	20800b15 	stw	r2,44(r4)
    41b8:	00800034 	movhi	r2,0
    41bc:	10924e04 	addi	r2,r2,18744
    41c0:	20800815 	stw	r2,32(r4)
    41c4:	00c00034 	movhi	r3,0
    41c8:	18d22f04 	addi	r3,r3,18620
    41cc:	00800034 	movhi	r2,0
    41d0:	10921504 	addi	r2,r2,18516
    41d4:	2140030d 	sth	r5,12(r4)
    41d8:	2180038d 	sth	r6,14(r4)
    41dc:	20c00915 	stw	r3,36(r4)
    41e0:	20800a15 	stw	r2,40(r4)
    41e4:	20000015 	stw	zero,0(r4)
    41e8:	20000115 	stw	zero,4(r4)
    41ec:	20000215 	stw	zero,8(r4)
    41f0:	20000415 	stw	zero,16(r4)
    41f4:	20000515 	stw	zero,20(r4)
    41f8:	20000615 	stw	zero,24(r4)
    41fc:	21000715 	stw	r4,28(r4)
    4200:	f800283a 	ret

00004204 <__sfp_lock_acquire>:
    4204:	f800283a 	ret

00004208 <__sfp_lock_release>:
    4208:	f800283a 	ret

0000420c <__sinit_lock_acquire>:
    420c:	f800283a 	ret

00004210 <__sinit_lock_release>:
    4210:	f800283a 	ret

00004214 <__sinit>:
    4214:	20800e17 	ldw	r2,56(r4)
    4218:	defffd04 	addi	sp,sp,-12
    421c:	dc400115 	stw	r17,4(sp)
    4220:	dc000015 	stw	r16,0(sp)
    4224:	dfc00215 	stw	ra,8(sp)
    4228:	04400044 	movi	r17,1
    422c:	01400104 	movi	r5,4
    4230:	000d883a 	mov	r6,zero
    4234:	2021883a 	mov	r16,r4
    4238:	2200bb04 	addi	r8,r4,748
    423c:	200f883a 	mov	r7,r4
    4240:	10000526 	beq	r2,zero,4258 <__sinit+0x44>
    4244:	dfc00217 	ldw	ra,8(sp)
    4248:	dc400117 	ldw	r17,4(sp)
    424c:	dc000017 	ldw	r16,0(sp)
    4250:	dec00304 	addi	sp,sp,12
    4254:	f800283a 	ret
    4258:	21000117 	ldw	r4,4(r4)
    425c:	00800034 	movhi	r2,0
    4260:	1090be04 	addi	r2,r2,17144
    4264:	00c000c4 	movi	r3,3
    4268:	80800f15 	stw	r2,60(r16)
    426c:	80c0b915 	stw	r3,740(r16)
    4270:	8200ba15 	stw	r8,744(r16)
    4274:	84400e15 	stw	r17,56(r16)
    4278:	8000b815 	stw	zero,736(r16)
    427c:	00041ac0 	call	41ac <std>
    4280:	81000217 	ldw	r4,8(r16)
    4284:	880d883a 	mov	r6,r17
    4288:	800f883a 	mov	r7,r16
    428c:	01400284 	movi	r5,10
    4290:	00041ac0 	call	41ac <std>
    4294:	81000317 	ldw	r4,12(r16)
    4298:	800f883a 	mov	r7,r16
    429c:	01400484 	movi	r5,18
    42a0:	01800084 	movi	r6,2
    42a4:	dfc00217 	ldw	ra,8(sp)
    42a8:	dc400117 	ldw	r17,4(sp)
    42ac:	dc000017 	ldw	r16,0(sp)
    42b0:	dec00304 	addi	sp,sp,12
    42b4:	00041ac1 	jmpi	41ac <std>

000042b8 <__fp_lock>:
    42b8:	0005883a 	mov	r2,zero
    42bc:	f800283a 	ret

000042c0 <__fp_unlock>:
    42c0:	0005883a 	mov	r2,zero
    42c4:	f800283a 	ret

000042c8 <__fp_unlock_all>:
    42c8:	00800034 	movhi	r2,0
    42cc:	109bd804 	addi	r2,r2,28512
    42d0:	11000017 	ldw	r4,0(r2)
    42d4:	01400034 	movhi	r5,0
    42d8:	2950b004 	addi	r5,r5,17088
    42dc:	00045681 	jmpi	4568 <_fwalk>

000042e0 <__fp_lock_all>:
    42e0:	00800034 	movhi	r2,0
    42e4:	109bd804 	addi	r2,r2,28512
    42e8:	11000017 	ldw	r4,0(r2)
    42ec:	01400034 	movhi	r5,0
    42f0:	2950ae04 	addi	r5,r5,17080
    42f4:	00045681 	jmpi	4568 <_fwalk>

000042f8 <_cleanup_r>:
    42f8:	01400034 	movhi	r5,0
    42fc:	2952e404 	addi	r5,r5,19344
    4300:	00045681 	jmpi	4568 <_fwalk>

00004304 <_cleanup>:
    4304:	00800034 	movhi	r2,0
    4308:	109bd904 	addi	r2,r2,28516
    430c:	11000017 	ldw	r4,0(r2)
    4310:	00042f81 	jmpi	42f8 <_cleanup_r>

00004314 <__sfmoreglue>:
    4314:	defffc04 	addi	sp,sp,-16
    4318:	dc000015 	stw	r16,0(sp)
    431c:	2821883a 	mov	r16,r5
    4320:	dc400115 	stw	r17,4(sp)
    4324:	01401704 	movi	r5,92
    4328:	2023883a 	mov	r17,r4
    432c:	8009883a 	mov	r4,r16
    4330:	dfc00315 	stw	ra,12(sp)
    4334:	dcc00215 	stw	r19,8(sp)
    4338:	00007e80 	call	7e8 <__mulsi3>
    433c:	11400304 	addi	r5,r2,12
    4340:	8809883a 	mov	r4,r17
    4344:	1027883a 	mov	r19,r2
    4348:	00008480 	call	848 <_malloc_r>
    434c:	10c00304 	addi	r3,r2,12
    4350:	1023883a 	mov	r17,r2
    4354:	1809883a 	mov	r4,r3
    4358:	980d883a 	mov	r6,r19
    435c:	000b883a 	mov	r5,zero
    4360:	10000b26 	beq	r2,zero,4390 <__sfmoreglue+0x7c>
    4364:	14000115 	stw	r16,4(r2)
    4368:	10c00215 	stw	r3,8(r2)
    436c:	10000015 	stw	zero,0(r2)
    4370:	00047b40 	call	47b4 <memset>
    4374:	8805883a 	mov	r2,r17
    4378:	dfc00317 	ldw	ra,12(sp)
    437c:	dcc00217 	ldw	r19,8(sp)
    4380:	dc400117 	ldw	r17,4(sp)
    4384:	dc000017 	ldw	r16,0(sp)
    4388:	dec00404 	addi	sp,sp,16
    438c:	f800283a 	ret
    4390:	0023883a 	mov	r17,zero
    4394:	8805883a 	mov	r2,r17
    4398:	dfc00317 	ldw	ra,12(sp)
    439c:	dcc00217 	ldw	r19,8(sp)
    43a0:	dc400117 	ldw	r17,4(sp)
    43a4:	dc000017 	ldw	r16,0(sp)
    43a8:	dec00404 	addi	sp,sp,16
    43ac:	f800283a 	ret

000043b0 <__sfp>:
    43b0:	defffd04 	addi	sp,sp,-12
    43b4:	00800034 	movhi	r2,0
    43b8:	109bd904 	addi	r2,r2,28516
    43bc:	dc000015 	stw	r16,0(sp)
    43c0:	14000017 	ldw	r16,0(r2)
    43c4:	dc400115 	stw	r17,4(sp)
    43c8:	dfc00215 	stw	ra,8(sp)
    43cc:	80800e17 	ldw	r2,56(r16)
    43d0:	2023883a 	mov	r17,r4
    43d4:	10002626 	beq	r2,zero,4470 <__sfp+0xc0>
    43d8:	8400b804 	addi	r16,r16,736
    43dc:	80800117 	ldw	r2,4(r16)
    43e0:	81000217 	ldw	r4,8(r16)
    43e4:	10ffffc4 	addi	r3,r2,-1
    43e8:	18000916 	blt	r3,zero,4410 <__sfp+0x60>
    43ec:	2080030f 	ldh	r2,12(r4)
    43f0:	10000b26 	beq	r2,zero,4420 <__sfp+0x70>
    43f4:	017fffc4 	movi	r5,-1
    43f8:	00000206 	br	4404 <__sfp+0x54>
    43fc:	2080030f 	ldh	r2,12(r4)
    4400:	10000726 	beq	r2,zero,4420 <__sfp+0x70>
    4404:	18ffffc4 	addi	r3,r3,-1
    4408:	21001704 	addi	r4,r4,92
    440c:	197ffb1e 	bne	r3,r5,43fc <__sfp+0x4c>
    4410:	80800017 	ldw	r2,0(r16)
    4414:	10001926 	beq	r2,zero,447c <__sfp+0xcc>
    4418:	1021883a 	mov	r16,r2
    441c:	003fef06 	br	43dc <__sfp+0x2c>
    4420:	00bfffc4 	movi	r2,-1
    4424:	00c00044 	movi	r3,1
    4428:	2080038d 	sth	r2,14(r4)
    442c:	20c0030d 	sth	r3,12(r4)
    4430:	20000015 	stw	zero,0(r4)
    4434:	20000215 	stw	zero,8(r4)
    4438:	20000115 	stw	zero,4(r4)
    443c:	20000415 	stw	zero,16(r4)
    4440:	20000515 	stw	zero,20(r4)
    4444:	20000615 	stw	zero,24(r4)
    4448:	20000c15 	stw	zero,48(r4)
    444c:	20000d15 	stw	zero,52(r4)
    4450:	20001115 	stw	zero,68(r4)
    4454:	20001215 	stw	zero,72(r4)
    4458:	2005883a 	mov	r2,r4
    445c:	dfc00217 	ldw	ra,8(sp)
    4460:	dc400117 	ldw	r17,4(sp)
    4464:	dc000017 	ldw	r16,0(sp)
    4468:	dec00304 	addi	sp,sp,12
    446c:	f800283a 	ret
    4470:	8009883a 	mov	r4,r16
    4474:	00042140 	call	4214 <__sinit>
    4478:	003fd706 	br	43d8 <__sfp+0x28>
    447c:	8809883a 	mov	r4,r17
    4480:	01400104 	movi	r5,4
    4484:	00043140 	call	4314 <__sfmoreglue>
    4488:	80800015 	stw	r2,0(r16)
    448c:	103fe21e 	bne	r2,zero,4418 <__sfp+0x68>
    4490:	00800304 	movi	r2,12
    4494:	0009883a 	mov	r4,zero
    4498:	88800015 	stw	r2,0(r17)
    449c:	003fee06 	br	4458 <__sfp+0xa8>

000044a0 <_fwalk_reent>:
    44a0:	defff704 	addi	sp,sp,-36
    44a4:	dcc00315 	stw	r19,12(sp)
    44a8:	24c0b804 	addi	r19,r4,736
    44ac:	dd800615 	stw	r22,24(sp)
    44b0:	dd400515 	stw	r21,20(sp)
    44b4:	dfc00815 	stw	ra,32(sp)
    44b8:	ddc00715 	stw	r23,28(sp)
    44bc:	dd000415 	stw	r20,16(sp)
    44c0:	dc800215 	stw	r18,8(sp)
    44c4:	dc400115 	stw	r17,4(sp)
    44c8:	dc000015 	stw	r16,0(sp)
    44cc:	202b883a 	mov	r21,r4
    44d0:	282d883a 	mov	r22,r5
    44d4:	00042040 	call	4204 <__sfp_lock_acquire>
    44d8:	98002126 	beq	r19,zero,4560 <_fwalk_reent+0xc0>
    44dc:	002f883a 	mov	r23,zero
    44e0:	9c800117 	ldw	r18,4(r19)
    44e4:	9c000217 	ldw	r16,8(r19)
    44e8:	90bfffc4 	addi	r2,r18,-1
    44ec:	10000d16 	blt	r2,zero,4524 <_fwalk_reent+0x84>
    44f0:	0023883a 	mov	r17,zero
    44f4:	053fffc4 	movi	r20,-1
    44f8:	8080030f 	ldh	r2,12(r16)
    44fc:	8c400044 	addi	r17,r17,1
    4500:	10000626 	beq	r2,zero,451c <_fwalk_reent+0x7c>
    4504:	8080038f 	ldh	r2,14(r16)
    4508:	800b883a 	mov	r5,r16
    450c:	a809883a 	mov	r4,r21
    4510:	15000226 	beq	r2,r20,451c <_fwalk_reent+0x7c>
    4514:	b03ee83a 	callr	r22
    4518:	b8aeb03a 	or	r23,r23,r2
    451c:	84001704 	addi	r16,r16,92
    4520:	947ff51e 	bne	r18,r17,44f8 <_fwalk_reent+0x58>
    4524:	9cc00017 	ldw	r19,0(r19)
    4528:	983fed1e 	bne	r19,zero,44e0 <_fwalk_reent+0x40>
    452c:	00042080 	call	4208 <__sfp_lock_release>
    4530:	b805883a 	mov	r2,r23
    4534:	dfc00817 	ldw	ra,32(sp)
    4538:	ddc00717 	ldw	r23,28(sp)
    453c:	dd800617 	ldw	r22,24(sp)
    4540:	dd400517 	ldw	r21,20(sp)
    4544:	dd000417 	ldw	r20,16(sp)
    4548:	dcc00317 	ldw	r19,12(sp)
    454c:	dc800217 	ldw	r18,8(sp)
    4550:	dc400117 	ldw	r17,4(sp)
    4554:	dc000017 	ldw	r16,0(sp)
    4558:	dec00904 	addi	sp,sp,36
    455c:	f800283a 	ret
    4560:	002f883a 	mov	r23,zero
    4564:	003ff106 	br	452c <_fwalk_reent+0x8c>

00004568 <_fwalk>:
    4568:	defff804 	addi	sp,sp,-32
    456c:	dcc00315 	stw	r19,12(sp)
    4570:	24c0b804 	addi	r19,r4,736
    4574:	dd400515 	stw	r21,20(sp)
    4578:	dfc00715 	stw	ra,28(sp)
    457c:	dd800615 	stw	r22,24(sp)
    4580:	dd000415 	stw	r20,16(sp)
    4584:	dc800215 	stw	r18,8(sp)
    4588:	dc400115 	stw	r17,4(sp)
    458c:	dc000015 	stw	r16,0(sp)
    4590:	282b883a 	mov	r21,r5
    4594:	00042040 	call	4204 <__sfp_lock_acquire>
    4598:	98001f26 	beq	r19,zero,4618 <_fwalk+0xb0>
    459c:	002d883a 	mov	r22,zero
    45a0:	9c800117 	ldw	r18,4(r19)
    45a4:	9c000217 	ldw	r16,8(r19)
    45a8:	90bfffc4 	addi	r2,r18,-1
    45ac:	10000c16 	blt	r2,zero,45e0 <_fwalk+0x78>
    45b0:	0023883a 	mov	r17,zero
    45b4:	053fffc4 	movi	r20,-1
    45b8:	8080030f 	ldh	r2,12(r16)
    45bc:	8c400044 	addi	r17,r17,1
    45c0:	10000526 	beq	r2,zero,45d8 <_fwalk+0x70>
    45c4:	8080038f 	ldh	r2,14(r16)
    45c8:	8009883a 	mov	r4,r16
    45cc:	15000226 	beq	r2,r20,45d8 <_fwalk+0x70>
    45d0:	a83ee83a 	callr	r21
    45d4:	b0acb03a 	or	r22,r22,r2
    45d8:	84001704 	addi	r16,r16,92
    45dc:	947ff61e 	bne	r18,r17,45b8 <_fwalk+0x50>
    45e0:	9cc00017 	ldw	r19,0(r19)
    45e4:	983fee1e 	bne	r19,zero,45a0 <_fwalk+0x38>
    45e8:	00042080 	call	4208 <__sfp_lock_release>
    45ec:	b005883a 	mov	r2,r22
    45f0:	dfc00717 	ldw	ra,28(sp)
    45f4:	dd800617 	ldw	r22,24(sp)
    45f8:	dd400517 	ldw	r21,20(sp)
    45fc:	dd000417 	ldw	r20,16(sp)
    4600:	dcc00317 	ldw	r19,12(sp)
    4604:	dc800217 	ldw	r18,8(sp)
    4608:	dc400117 	ldw	r17,4(sp)
    460c:	dc000017 	ldw	r16,0(sp)
    4610:	dec00804 	addi	sp,sp,32
    4614:	f800283a 	ret
    4618:	002d883a 	mov	r22,zero
    461c:	003ff206 	br	45e8 <_fwalk+0x80>

00004620 <__smakebuf_r>:
    4620:	2880030b 	ldhu	r2,12(r5)
    4624:	deffed04 	addi	sp,sp,-76
    4628:	dc401015 	stw	r17,64(sp)
    462c:	1080008c 	andi	r2,r2,2
    4630:	dc000f15 	stw	r16,60(sp)
    4634:	dfc01215 	stw	ra,72(sp)
    4638:	dc801115 	stw	r18,68(sp)
    463c:	2821883a 	mov	r16,r5
    4640:	2023883a 	mov	r17,r4
    4644:	10000b26 	beq	r2,zero,4674 <__smakebuf_r+0x54>
    4648:	28c010c4 	addi	r3,r5,67
    464c:	00800044 	movi	r2,1
    4650:	28800515 	stw	r2,20(r5)
    4654:	28c00415 	stw	r3,16(r5)
    4658:	28c00015 	stw	r3,0(r5)
    465c:	dfc01217 	ldw	ra,72(sp)
    4660:	dc801117 	ldw	r18,68(sp)
    4664:	dc401017 	ldw	r17,64(sp)
    4668:	dc000f17 	ldw	r16,60(sp)
    466c:	dec01304 	addi	sp,sp,76
    4670:	f800283a 	ret
    4674:	2940038f 	ldh	r5,14(r5)
    4678:	28002116 	blt	r5,zero,4700 <__smakebuf_r+0xe0>
    467c:	d80d883a 	mov	r6,sp
    4680:	0004ba40 	call	4ba4 <_fstat_r>
    4684:	10001e16 	blt	r2,zero,4700 <__smakebuf_r+0xe0>
    4688:	d8800117 	ldw	r2,4(sp)
    468c:	00e00014 	movui	r3,32768
    4690:	113c000c 	andi	r4,r2,61440
    4694:	20c03126 	beq	r4,r3,475c <__smakebuf_r+0x13c>
    4698:	8080030b 	ldhu	r2,12(r16)
    469c:	00c80004 	movi	r3,8192
    46a0:	10820014 	ori	r2,r2,2048
    46a4:	8080030d 	sth	r2,12(r16)
    46a8:	20c01e26 	beq	r4,r3,4724 <__smakebuf_r+0x104>
    46ac:	04810004 	movi	r18,1024
    46b0:	8809883a 	mov	r4,r17
    46b4:	900b883a 	mov	r5,r18
    46b8:	00008480 	call	848 <_malloc_r>
    46bc:	1009883a 	mov	r4,r2
    46c0:	10003126 	beq	r2,zero,4788 <__smakebuf_r+0x168>
    46c4:	80c0030b 	ldhu	r3,12(r16)
    46c8:	00800034 	movhi	r2,0
    46cc:	1090be04 	addi	r2,r2,17144
    46d0:	88800f15 	stw	r2,60(r17)
    46d4:	18c02014 	ori	r3,r3,128
    46d8:	84800515 	stw	r18,20(r16)
    46dc:	80c0030d 	sth	r3,12(r16)
    46e0:	81000415 	stw	r4,16(r16)
    46e4:	81000015 	stw	r4,0(r16)
    46e8:	dfc01217 	ldw	ra,72(sp)
    46ec:	dc801117 	ldw	r18,68(sp)
    46f0:	dc401017 	ldw	r17,64(sp)
    46f4:	dc000f17 	ldw	r16,60(sp)
    46f8:	dec01304 	addi	sp,sp,76
    46fc:	f800283a 	ret
    4700:	80c0030b 	ldhu	r3,12(r16)
    4704:	1880200c 	andi	r2,r3,128
    4708:	10000426 	beq	r2,zero,471c <__smakebuf_r+0xfc>
    470c:	04801004 	movi	r18,64
    4710:	18820014 	ori	r2,r3,2048
    4714:	8080030d 	sth	r2,12(r16)
    4718:	003fe506 	br	46b0 <__smakebuf_r+0x90>
    471c:	04810004 	movi	r18,1024
    4720:	003ffb06 	br	4710 <__smakebuf_r+0xf0>
    4724:	8140038f 	ldh	r5,14(r16)
    4728:	8809883a 	mov	r4,r17
    472c:	0004c180 	call	4c18 <_isatty_r>
    4730:	103fde26 	beq	r2,zero,46ac <__smakebuf_r+0x8c>
    4734:	8080030b 	ldhu	r2,12(r16)
    4738:	80c010c4 	addi	r3,r16,67
    473c:	04810004 	movi	r18,1024
    4740:	10800054 	ori	r2,r2,1
    4744:	8080030d 	sth	r2,12(r16)
    4748:	00800044 	movi	r2,1
    474c:	80c00415 	stw	r3,16(r16)
    4750:	80800515 	stw	r2,20(r16)
    4754:	80c00015 	stw	r3,0(r16)
    4758:	003fd506 	br	46b0 <__smakebuf_r+0x90>
    475c:	80c00a17 	ldw	r3,40(r16)
    4760:	00800034 	movhi	r2,0
    4764:	10921504 	addi	r2,r2,18516
    4768:	18bfcb1e 	bne	r3,r2,4698 <__smakebuf_r+0x78>
    476c:	8080030b 	ldhu	r2,12(r16)
    4770:	00c10004 	movi	r3,1024
    4774:	1825883a 	mov	r18,r3
    4778:	10c4b03a 	or	r2,r2,r3
    477c:	8080030d 	sth	r2,12(r16)
    4780:	80c01315 	stw	r3,76(r16)
    4784:	003fca06 	br	46b0 <__smakebuf_r+0x90>
    4788:	8100030b 	ldhu	r4,12(r16)
    478c:	2080800c 	andi	r2,r4,512
    4790:	103fb21e 	bne	r2,zero,465c <__smakebuf_r+0x3c>
    4794:	80c010c4 	addi	r3,r16,67
    4798:	21000094 	ori	r4,r4,2
    479c:	00800044 	movi	r2,1
    47a0:	80800515 	stw	r2,20(r16)
    47a4:	8100030d 	sth	r4,12(r16)
    47a8:	80c00415 	stw	r3,16(r16)
    47ac:	80c00015 	stw	r3,0(r16)
    47b0:	003faa06 	br	465c <__smakebuf_r+0x3c>

000047b4 <memset>:
    47b4:	008000c4 	movi	r2,3
    47b8:	29403fcc 	andi	r5,r5,255
    47bc:	2007883a 	mov	r3,r4
    47c0:	1180022e 	bgeu	r2,r6,47cc <memset+0x18>
    47c4:	2084703a 	and	r2,r4,r2
    47c8:	10000826 	beq	r2,zero,47ec <memset+0x38>
    47cc:	30000526 	beq	r6,zero,47e4 <memset+0x30>
    47d0:	2805883a 	mov	r2,r5
    47d4:	30cd883a 	add	r6,r6,r3
    47d8:	18800005 	stb	r2,0(r3)
    47dc:	18c00044 	addi	r3,r3,1
    47e0:	19bffd1e 	bne	r3,r6,47d8 <memset+0x24>
    47e4:	2005883a 	mov	r2,r4
    47e8:	f800283a 	ret
    47ec:	2804923a 	slli	r2,r5,8
    47f0:	020003c4 	movi	r8,15
    47f4:	200f883a 	mov	r7,r4
    47f8:	2884b03a 	or	r2,r5,r2
    47fc:	1006943a 	slli	r3,r2,16
    4800:	10c6b03a 	or	r3,r2,r3
    4804:	41800a2e 	bgeu	r8,r6,4830 <memset+0x7c>
    4808:	4005883a 	mov	r2,r8
    480c:	31bffc04 	addi	r6,r6,-16
    4810:	38c00015 	stw	r3,0(r7)
    4814:	38c00115 	stw	r3,4(r7)
    4818:	38c00215 	stw	r3,8(r7)
    481c:	38c00315 	stw	r3,12(r7)
    4820:	39c00404 	addi	r7,r7,16
    4824:	11bff936 	bltu	r2,r6,480c <memset+0x58>
    4828:	008000c4 	movi	r2,3
    482c:	1180052e 	bgeu	r2,r6,4844 <memset+0x90>
    4830:	31bfff04 	addi	r6,r6,-4
    4834:	008000c4 	movi	r2,3
    4838:	38c00015 	stw	r3,0(r7)
    483c:	39c00104 	addi	r7,r7,4
    4840:	11bffb36 	bltu	r2,r6,4830 <memset+0x7c>
    4844:	3807883a 	mov	r3,r7
    4848:	003fe006 	br	47cc <memset+0x18>

0000484c <__sclose>:
    484c:	2940038f 	ldh	r5,14(r5)
    4850:	0004a101 	jmpi	4a10 <_close_r>

00004854 <__sseek>:
    4854:	defffe04 	addi	sp,sp,-8
    4858:	dc000015 	stw	r16,0(sp)
    485c:	2821883a 	mov	r16,r5
    4860:	2940038f 	ldh	r5,14(r5)
    4864:	dfc00115 	stw	ra,4(sp)
    4868:	0004c880 	call	4c88 <_lseek_r>
    486c:	1007883a 	mov	r3,r2
    4870:	00bfffc4 	movi	r2,-1
    4874:	18800926 	beq	r3,r2,489c <__sseek+0x48>
    4878:	8080030b 	ldhu	r2,12(r16)
    487c:	80c01415 	stw	r3,80(r16)
    4880:	10840014 	ori	r2,r2,4096
    4884:	8080030d 	sth	r2,12(r16)
    4888:	1805883a 	mov	r2,r3
    488c:	dfc00117 	ldw	ra,4(sp)
    4890:	dc000017 	ldw	r16,0(sp)
    4894:	dec00204 	addi	sp,sp,8
    4898:	f800283a 	ret
    489c:	8080030b 	ldhu	r2,12(r16)
    48a0:	10bbffcc 	andi	r2,r2,61439
    48a4:	8080030d 	sth	r2,12(r16)
    48a8:	1805883a 	mov	r2,r3
    48ac:	dfc00117 	ldw	ra,4(sp)
    48b0:	dc000017 	ldw	r16,0(sp)
    48b4:	dec00204 	addi	sp,sp,8
    48b8:	f800283a 	ret

000048bc <__swrite>:
    48bc:	2880030b 	ldhu	r2,12(r5)
    48c0:	defffb04 	addi	sp,sp,-20
    48c4:	dcc00315 	stw	r19,12(sp)
    48c8:	1080400c 	andi	r2,r2,256
    48cc:	dc800215 	stw	r18,8(sp)
    48d0:	dc400115 	stw	r17,4(sp)
    48d4:	dc000015 	stw	r16,0(sp)
    48d8:	3027883a 	mov	r19,r6
    48dc:	3825883a 	mov	r18,r7
    48e0:	dfc00415 	stw	ra,16(sp)
    48e4:	2821883a 	mov	r16,r5
    48e8:	000d883a 	mov	r6,zero
    48ec:	01c00084 	movi	r7,2
    48f0:	2023883a 	mov	r17,r4
    48f4:	10000226 	beq	r2,zero,4900 <__swrite+0x44>
    48f8:	2940038f 	ldh	r5,14(r5)
    48fc:	0004c880 	call	4c88 <_lseek_r>
    4900:	8080030b 	ldhu	r2,12(r16)
    4904:	8140038f 	ldh	r5,14(r16)
    4908:	8809883a 	mov	r4,r17
    490c:	10bbffcc 	andi	r2,r2,61439
    4910:	980d883a 	mov	r6,r19
    4914:	900f883a 	mov	r7,r18
    4918:	8080030d 	sth	r2,12(r16)
    491c:	dfc00417 	ldw	ra,16(sp)
    4920:	dcc00317 	ldw	r19,12(sp)
    4924:	dc800217 	ldw	r18,8(sp)
    4928:	dc400117 	ldw	r17,4(sp)
    492c:	dc000017 	ldw	r16,0(sp)
    4930:	dec00504 	addi	sp,sp,20
    4934:	00049981 	jmpi	4998 <_write_r>

00004938 <__sread>:
    4938:	defffe04 	addi	sp,sp,-8
    493c:	dc000015 	stw	r16,0(sp)
    4940:	2821883a 	mov	r16,r5
    4944:	2940038f 	ldh	r5,14(r5)
    4948:	dfc00115 	stw	ra,4(sp)
    494c:	0004d000 	call	4d00 <_read_r>
    4950:	1007883a 	mov	r3,r2
    4954:	10000816 	blt	r2,zero,4978 <__sread+0x40>
    4958:	80801417 	ldw	r2,80(r16)
    495c:	10c5883a 	add	r2,r2,r3
    4960:	80801415 	stw	r2,80(r16)
    4964:	1805883a 	mov	r2,r3
    4968:	dfc00117 	ldw	ra,4(sp)
    496c:	dc000017 	ldw	r16,0(sp)
    4970:	dec00204 	addi	sp,sp,8
    4974:	f800283a 	ret
    4978:	8080030b 	ldhu	r2,12(r16)
    497c:	10bbffcc 	andi	r2,r2,61439
    4980:	8080030d 	sth	r2,12(r16)
    4984:	1805883a 	mov	r2,r3
    4988:	dfc00117 	ldw	ra,4(sp)
    498c:	dc000017 	ldw	r16,0(sp)
    4990:	dec00204 	addi	sp,sp,8
    4994:	f800283a 	ret

00004998 <_write_r>:
    4998:	defffd04 	addi	sp,sp,-12
    499c:	dc000015 	stw	r16,0(sp)
    49a0:	04000074 	movhi	r16,1
    49a4:	84227a04 	addi	r16,r16,-30232
    49a8:	dc400115 	stw	r17,4(sp)
    49ac:	80000015 	stw	zero,0(r16)
    49b0:	2023883a 	mov	r17,r4
    49b4:	2809883a 	mov	r4,r5
    49b8:	300b883a 	mov	r5,r6
    49bc:	380d883a 	mov	r6,r7
    49c0:	dfc00215 	stw	ra,8(sp)
    49c4:	000530c0 	call	530c <write>
    49c8:	1007883a 	mov	r3,r2
    49cc:	00bfffc4 	movi	r2,-1
    49d0:	18800626 	beq	r3,r2,49ec <_write_r+0x54>
    49d4:	1805883a 	mov	r2,r3
    49d8:	dfc00217 	ldw	ra,8(sp)
    49dc:	dc400117 	ldw	r17,4(sp)
    49e0:	dc000017 	ldw	r16,0(sp)
    49e4:	dec00304 	addi	sp,sp,12
    49e8:	f800283a 	ret
    49ec:	80800017 	ldw	r2,0(r16)
    49f0:	103ff826 	beq	r2,zero,49d4 <_write_r+0x3c>
    49f4:	88800015 	stw	r2,0(r17)
    49f8:	1805883a 	mov	r2,r3
    49fc:	dfc00217 	ldw	ra,8(sp)
    4a00:	dc400117 	ldw	r17,4(sp)
    4a04:	dc000017 	ldw	r16,0(sp)
    4a08:	dec00304 	addi	sp,sp,12
    4a0c:	f800283a 	ret

00004a10 <_close_r>:
    4a10:	defffd04 	addi	sp,sp,-12
    4a14:	dc000015 	stw	r16,0(sp)
    4a18:	04000074 	movhi	r16,1
    4a1c:	84227a04 	addi	r16,r16,-30232
    4a20:	dc400115 	stw	r17,4(sp)
    4a24:	80000015 	stw	zero,0(r16)
    4a28:	2023883a 	mov	r17,r4
    4a2c:	2809883a 	mov	r4,r5
    4a30:	dfc00215 	stw	ra,8(sp)
    4a34:	00028900 	call	2890 <close>
    4a38:	1007883a 	mov	r3,r2
    4a3c:	00bfffc4 	movi	r2,-1
    4a40:	18800626 	beq	r3,r2,4a5c <_close_r+0x4c>
    4a44:	1805883a 	mov	r2,r3
    4a48:	dfc00217 	ldw	ra,8(sp)
    4a4c:	dc400117 	ldw	r17,4(sp)
    4a50:	dc000017 	ldw	r16,0(sp)
    4a54:	dec00304 	addi	sp,sp,12
    4a58:	f800283a 	ret
    4a5c:	80800017 	ldw	r2,0(r16)
    4a60:	103ff826 	beq	r2,zero,4a44 <_close_r+0x34>
    4a64:	88800015 	stw	r2,0(r17)
    4a68:	1805883a 	mov	r2,r3
    4a6c:	dfc00217 	ldw	ra,8(sp)
    4a70:	dc400117 	ldw	r17,4(sp)
    4a74:	dc000017 	ldw	r16,0(sp)
    4a78:	dec00304 	addi	sp,sp,12
    4a7c:	f800283a 	ret

00004a80 <_fclose_r>:
    4a80:	defffc04 	addi	sp,sp,-16
    4a84:	dc400115 	stw	r17,4(sp)
    4a88:	dc000015 	stw	r16,0(sp)
    4a8c:	dfc00315 	stw	ra,12(sp)
    4a90:	dc800215 	stw	r18,8(sp)
    4a94:	2821883a 	mov	r16,r5
    4a98:	2023883a 	mov	r17,r4
    4a9c:	28002926 	beq	r5,zero,4b44 <_fclose_r+0xc4>
    4aa0:	00042040 	call	4204 <__sfp_lock_acquire>
    4aa4:	88000226 	beq	r17,zero,4ab0 <_fclose_r+0x30>
    4aa8:	88800e17 	ldw	r2,56(r17)
    4aac:	10002d26 	beq	r2,zero,4b64 <_fclose_r+0xe4>
    4ab0:	8080030f 	ldh	r2,12(r16)
    4ab4:	10002226 	beq	r2,zero,4b40 <_fclose_r+0xc0>
    4ab8:	8809883a 	mov	r4,r17
    4abc:	800b883a 	mov	r5,r16
    4ac0:	0003f7c0 	call	3f7c <_fflush_r>
    4ac4:	1025883a 	mov	r18,r2
    4ac8:	80800b17 	ldw	r2,44(r16)
    4acc:	10000426 	beq	r2,zero,4ae0 <_fclose_r+0x60>
    4ad0:	81400717 	ldw	r5,28(r16)
    4ad4:	8809883a 	mov	r4,r17
    4ad8:	103ee83a 	callr	r2
    4adc:	10002a16 	blt	r2,zero,4b88 <_fclose_r+0x108>
    4ae0:	8080030b 	ldhu	r2,12(r16)
    4ae4:	1080200c 	andi	r2,r2,128
    4ae8:	1000231e 	bne	r2,zero,4b78 <_fclose_r+0xf8>
    4aec:	81400c17 	ldw	r5,48(r16)
    4af0:	28000526 	beq	r5,zero,4b08 <_fclose_r+0x88>
    4af4:	80801004 	addi	r2,r16,64
    4af8:	28800226 	beq	r5,r2,4b04 <_fclose_r+0x84>
    4afc:	8809883a 	mov	r4,r17
    4b00:	00011240 	call	1124 <_free_r>
    4b04:	80000c15 	stw	zero,48(r16)
    4b08:	81401117 	ldw	r5,68(r16)
    4b0c:	28000326 	beq	r5,zero,4b1c <_fclose_r+0x9c>
    4b10:	8809883a 	mov	r4,r17
    4b14:	00011240 	call	1124 <_free_r>
    4b18:	80001115 	stw	zero,68(r16)
    4b1c:	8000030d 	sth	zero,12(r16)
    4b20:	00042080 	call	4208 <__sfp_lock_release>
    4b24:	9005883a 	mov	r2,r18
    4b28:	dfc00317 	ldw	ra,12(sp)
    4b2c:	dc800217 	ldw	r18,8(sp)
    4b30:	dc400117 	ldw	r17,4(sp)
    4b34:	dc000017 	ldw	r16,0(sp)
    4b38:	dec00404 	addi	sp,sp,16
    4b3c:	f800283a 	ret
    4b40:	00042080 	call	4208 <__sfp_lock_release>
    4b44:	0025883a 	mov	r18,zero
    4b48:	9005883a 	mov	r2,r18
    4b4c:	dfc00317 	ldw	ra,12(sp)
    4b50:	dc800217 	ldw	r18,8(sp)
    4b54:	dc400117 	ldw	r17,4(sp)
    4b58:	dc000017 	ldw	r16,0(sp)
    4b5c:	dec00404 	addi	sp,sp,16
    4b60:	f800283a 	ret
    4b64:	8809883a 	mov	r4,r17
    4b68:	00042140 	call	4214 <__sinit>
    4b6c:	8080030f 	ldh	r2,12(r16)
    4b70:	103fd11e 	bne	r2,zero,4ab8 <_fclose_r+0x38>
    4b74:	003ff206 	br	4b40 <_fclose_r+0xc0>
    4b78:	81400417 	ldw	r5,16(r16)
    4b7c:	8809883a 	mov	r4,r17
    4b80:	00011240 	call	1124 <_free_r>
    4b84:	003fd906 	br	4aec <_fclose_r+0x6c>
    4b88:	04bfffc4 	movi	r18,-1
    4b8c:	003fd406 	br	4ae0 <_fclose_r+0x60>

00004b90 <fclose>:
    4b90:	00800034 	movhi	r2,0
    4b94:	109bd804 	addi	r2,r2,28512
    4b98:	200b883a 	mov	r5,r4
    4b9c:	11000017 	ldw	r4,0(r2)
    4ba0:	0004a801 	jmpi	4a80 <_fclose_r>

00004ba4 <_fstat_r>:
    4ba4:	defffd04 	addi	sp,sp,-12
    4ba8:	dc000015 	stw	r16,0(sp)
    4bac:	04000074 	movhi	r16,1
    4bb0:	84227a04 	addi	r16,r16,-30232
    4bb4:	dc400115 	stw	r17,4(sp)
    4bb8:	80000015 	stw	zero,0(r16)
    4bbc:	2023883a 	mov	r17,r4
    4bc0:	2809883a 	mov	r4,r5
    4bc4:	300b883a 	mov	r5,r6
    4bc8:	dfc00215 	stw	ra,8(sp)
    4bcc:	0004dd80 	call	4dd8 <fstat>
    4bd0:	1007883a 	mov	r3,r2
    4bd4:	00bfffc4 	movi	r2,-1
    4bd8:	18800626 	beq	r3,r2,4bf4 <_fstat_r+0x50>
    4bdc:	1805883a 	mov	r2,r3
    4be0:	dfc00217 	ldw	ra,8(sp)
    4be4:	dc400117 	ldw	r17,4(sp)
    4be8:	dc000017 	ldw	r16,0(sp)
    4bec:	dec00304 	addi	sp,sp,12
    4bf0:	f800283a 	ret
    4bf4:	80800017 	ldw	r2,0(r16)
    4bf8:	103ff826 	beq	r2,zero,4bdc <_fstat_r+0x38>
    4bfc:	88800015 	stw	r2,0(r17)
    4c00:	1805883a 	mov	r2,r3
    4c04:	dfc00217 	ldw	ra,8(sp)
    4c08:	dc400117 	ldw	r17,4(sp)
    4c0c:	dc000017 	ldw	r16,0(sp)
    4c10:	dec00304 	addi	sp,sp,12
    4c14:	f800283a 	ret

00004c18 <_isatty_r>:
    4c18:	defffd04 	addi	sp,sp,-12
    4c1c:	dc000015 	stw	r16,0(sp)
    4c20:	04000074 	movhi	r16,1
    4c24:	84227a04 	addi	r16,r16,-30232
    4c28:	dc400115 	stw	r17,4(sp)
    4c2c:	80000015 	stw	zero,0(r16)
    4c30:	2023883a 	mov	r17,r4
    4c34:	2809883a 	mov	r4,r5
    4c38:	dfc00215 	stw	ra,8(sp)
    4c3c:	0004f100 	call	4f10 <isatty>
    4c40:	1007883a 	mov	r3,r2
    4c44:	00bfffc4 	movi	r2,-1
    4c48:	18800626 	beq	r3,r2,4c64 <_isatty_r+0x4c>
    4c4c:	1805883a 	mov	r2,r3
    4c50:	dfc00217 	ldw	ra,8(sp)
    4c54:	dc400117 	ldw	r17,4(sp)
    4c58:	dc000017 	ldw	r16,0(sp)
    4c5c:	dec00304 	addi	sp,sp,12
    4c60:	f800283a 	ret
    4c64:	80800017 	ldw	r2,0(r16)
    4c68:	103ff826 	beq	r2,zero,4c4c <_isatty_r+0x34>
    4c6c:	88800015 	stw	r2,0(r17)
    4c70:	1805883a 	mov	r2,r3
    4c74:	dfc00217 	ldw	ra,8(sp)
    4c78:	dc400117 	ldw	r17,4(sp)
    4c7c:	dc000017 	ldw	r16,0(sp)
    4c80:	dec00304 	addi	sp,sp,12
    4c84:	f800283a 	ret

00004c88 <_lseek_r>:
    4c88:	defffd04 	addi	sp,sp,-12
    4c8c:	dc000015 	stw	r16,0(sp)
    4c90:	04000074 	movhi	r16,1
    4c94:	84227a04 	addi	r16,r16,-30232
    4c98:	dc400115 	stw	r17,4(sp)
    4c9c:	80000015 	stw	zero,0(r16)
    4ca0:	2023883a 	mov	r17,r4
    4ca4:	2809883a 	mov	r4,r5
    4ca8:	300b883a 	mov	r5,r6
    4cac:	380d883a 	mov	r6,r7
    4cb0:	dfc00215 	stw	ra,8(sp)
    4cb4:	00050340 	call	5034 <lseek>
    4cb8:	1007883a 	mov	r3,r2
    4cbc:	00bfffc4 	movi	r2,-1
    4cc0:	18800626 	beq	r3,r2,4cdc <_lseek_r+0x54>
    4cc4:	1805883a 	mov	r2,r3
    4cc8:	dfc00217 	ldw	ra,8(sp)
    4ccc:	dc400117 	ldw	r17,4(sp)
    4cd0:	dc000017 	ldw	r16,0(sp)
    4cd4:	dec00304 	addi	sp,sp,12
    4cd8:	f800283a 	ret
    4cdc:	80800017 	ldw	r2,0(r16)
    4ce0:	103ff826 	beq	r2,zero,4cc4 <_lseek_r+0x3c>
    4ce4:	88800015 	stw	r2,0(r17)
    4ce8:	1805883a 	mov	r2,r3
    4cec:	dfc00217 	ldw	ra,8(sp)
    4cf0:	dc400117 	ldw	r17,4(sp)
    4cf4:	dc000017 	ldw	r16,0(sp)
    4cf8:	dec00304 	addi	sp,sp,12
    4cfc:	f800283a 	ret

00004d00 <_read_r>:
    4d00:	defffd04 	addi	sp,sp,-12
    4d04:	dc000015 	stw	r16,0(sp)
    4d08:	04000074 	movhi	r16,1
    4d0c:	84227a04 	addi	r16,r16,-30232
    4d10:	dc400115 	stw	r17,4(sp)
    4d14:	80000015 	stw	zero,0(r16)
    4d18:	2023883a 	mov	r17,r4
    4d1c:	2809883a 	mov	r4,r5
    4d20:	300b883a 	mov	r5,r6
    4d24:	380d883a 	mov	r6,r7
    4d28:	dfc00215 	stw	ra,8(sp)
    4d2c:	00051880 	call	5188 <read>
    4d30:	1007883a 	mov	r3,r2
    4d34:	00bfffc4 	movi	r2,-1
    4d38:	18800626 	beq	r3,r2,4d54 <_read_r+0x54>
    4d3c:	1805883a 	mov	r2,r3
    4d40:	dfc00217 	ldw	ra,8(sp)
    4d44:	dc400117 	ldw	r17,4(sp)
    4d48:	dc000017 	ldw	r16,0(sp)
    4d4c:	dec00304 	addi	sp,sp,12
    4d50:	f800283a 	ret
    4d54:	80800017 	ldw	r2,0(r16)
    4d58:	103ff826 	beq	r2,zero,4d3c <_read_r+0x3c>
    4d5c:	88800015 	stw	r2,0(r17)
    4d60:	1805883a 	mov	r2,r3
    4d64:	dfc00217 	ldw	ra,8(sp)
    4d68:	dc400117 	ldw	r17,4(sp)
    4d6c:	dc000017 	ldw	r16,0(sp)
    4d70:	dec00304 	addi	sp,sp,12
    4d74:	f800283a 	ret

00004d78 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    4d78:	defffd04 	addi	sp,sp,-12
    4d7c:	df000215 	stw	fp,8(sp)
    4d80:	df000204 	addi	fp,sp,8
    4d84:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    4d88:	e0bfff17 	ldw	r2,-4(fp)
    4d8c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4d90:	e0bffe17 	ldw	r2,-8(fp)
    4d94:	1005003a 	cmpeq	r2,r2,zero
    4d98:	1000021e 	bne	r2,zero,4da4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    4d9c:	002af070 	cmpltui	zero,zero,43969
    4da0:	00000106 	br	4da8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    4da4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    4da8:	e037883a 	mov	sp,fp
    4dac:	df000017 	ldw	fp,0(sp)
    4db0:	dec00104 	addi	sp,sp,4
    4db4:	f800283a 	ret

00004db8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4db8:	defffd04 	addi	sp,sp,-12
    4dbc:	dfc00215 	stw	ra,8(sp)
    4dc0:	df000115 	stw	fp,4(sp)
    4dc4:	df000104 	addi	fp,sp,4
    4dc8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    4dcc:	e13fff17 	ldw	r4,-4(fp)
    4dd0:	0004d780 	call	4d78 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4dd4:	003fff06 	br	4dd4 <_exit+0x1c>

00004dd8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4dd8:	defff904 	addi	sp,sp,-28
    4ddc:	dfc00615 	stw	ra,24(sp)
    4de0:	df000515 	stw	fp,20(sp)
    4de4:	df000504 	addi	fp,sp,20
    4de8:	e13ffc15 	stw	r4,-16(fp)
    4dec:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4df0:	e0bffc17 	ldw	r2,-16(fp)
    4df4:	1004803a 	cmplt	r2,r2,zero
    4df8:	1000091e 	bne	r2,zero,4e20 <fstat+0x48>
    4dfc:	e13ffc17 	ldw	r4,-16(fp)
    4e00:	01400304 	movi	r5,12
    4e04:	00007e80 	call	7e8 <__mulsi3>
    4e08:	1007883a 	mov	r3,r2
    4e0c:	00800034 	movhi	r2,0
    4e10:	109b7604 	addi	r2,r2,28120
    4e14:	1887883a 	add	r3,r3,r2
    4e18:	e0ffff15 	stw	r3,-4(fp)
    4e1c:	00000106 	br	4e24 <fstat+0x4c>
    4e20:	e03fff15 	stw	zero,-4(fp)
    4e24:	e0bfff17 	ldw	r2,-4(fp)
    4e28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4e2c:	e0bffb17 	ldw	r2,-20(fp)
    4e30:	1005003a 	cmpeq	r2,r2,zero
    4e34:	1000121e 	bne	r2,zero,4e80 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4e38:	e0bffb17 	ldw	r2,-20(fp)
    4e3c:	10800017 	ldw	r2,0(r2)
    4e40:	10800817 	ldw	r2,32(r2)
    4e44:	1005003a 	cmpeq	r2,r2,zero
    4e48:	1000081e 	bne	r2,zero,4e6c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    4e4c:	e0bffb17 	ldw	r2,-20(fp)
    4e50:	10800017 	ldw	r2,0(r2)
    4e54:	10800817 	ldw	r2,32(r2)
    4e58:	e13ffb17 	ldw	r4,-20(fp)
    4e5c:	e17ffd17 	ldw	r5,-12(fp)
    4e60:	103ee83a 	callr	r2
    4e64:	e0bffe15 	stw	r2,-8(fp)
    4e68:	00000b06 	br	4e98 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4e6c:	e0fffd17 	ldw	r3,-12(fp)
    4e70:	00880004 	movi	r2,8192
    4e74:	18800115 	stw	r2,4(r3)
      return 0;
    4e78:	e03ffe15 	stw	zero,-8(fp)
    4e7c:	00000606 	br	4e98 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4e80:	0004eb00 	call	4eb0 <alt_get_errno>
    4e84:	1007883a 	mov	r3,r2
    4e88:	00801444 	movi	r2,81
    4e8c:	18800015 	stw	r2,0(r3)
    return -1;
    4e90:	00bfffc4 	movi	r2,-1
    4e94:	e0bffe15 	stw	r2,-8(fp)
    4e98:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    4e9c:	e037883a 	mov	sp,fp
    4ea0:	dfc00117 	ldw	ra,4(sp)
    4ea4:	df000017 	ldw	fp,0(sp)
    4ea8:	dec00204 	addi	sp,sp,8
    4eac:	f800283a 	ret

00004eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4eb0:	defffd04 	addi	sp,sp,-12
    4eb4:	dfc00215 	stw	ra,8(sp)
    4eb8:	df000115 	stw	fp,4(sp)
    4ebc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4ec0:	00800034 	movhi	r2,0
    4ec4:	109be204 	addi	r2,r2,28552
    4ec8:	10800017 	ldw	r2,0(r2)
    4ecc:	1005003a 	cmpeq	r2,r2,zero
    4ed0:	1000061e 	bne	r2,zero,4eec <alt_get_errno+0x3c>
    4ed4:	00800034 	movhi	r2,0
    4ed8:	109be204 	addi	r2,r2,28552
    4edc:	10800017 	ldw	r2,0(r2)
    4ee0:	103ee83a 	callr	r2
    4ee4:	e0bfff15 	stw	r2,-4(fp)
    4ee8:	00000306 	br	4ef8 <alt_get_errno+0x48>
    4eec:	00800074 	movhi	r2,1
    4ef0:	10a27a04 	addi	r2,r2,-30232
    4ef4:	e0bfff15 	stw	r2,-4(fp)
    4ef8:	e0bfff17 	ldw	r2,-4(fp)
}
    4efc:	e037883a 	mov	sp,fp
    4f00:	dfc00117 	ldw	ra,4(sp)
    4f04:	df000017 	ldw	fp,0(sp)
    4f08:	dec00204 	addi	sp,sp,8
    4f0c:	f800283a 	ret

00004f10 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4f10:	deffeb04 	addi	sp,sp,-84
    4f14:	dfc01415 	stw	ra,80(sp)
    4f18:	df001315 	stw	fp,76(sp)
    4f1c:	df001304 	addi	fp,sp,76
    4f20:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4f24:	e0bffd17 	ldw	r2,-12(fp)
    4f28:	1004803a 	cmplt	r2,r2,zero
    4f2c:	1000091e 	bne	r2,zero,4f54 <isatty+0x44>
    4f30:	e13ffd17 	ldw	r4,-12(fp)
    4f34:	01400304 	movi	r5,12
    4f38:	00007e80 	call	7e8 <__mulsi3>
    4f3c:	1007883a 	mov	r3,r2
    4f40:	00800034 	movhi	r2,0
    4f44:	109b7604 	addi	r2,r2,28120
    4f48:	1887883a 	add	r3,r3,r2
    4f4c:	e0ffff15 	stw	r3,-4(fp)
    4f50:	00000106 	br	4f58 <isatty+0x48>
    4f54:	e03fff15 	stw	zero,-4(fp)
    4f58:	e0bfff17 	ldw	r2,-4(fp)
    4f5c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    4f60:	e0bfed17 	ldw	r2,-76(fp)
    4f64:	1005003a 	cmpeq	r2,r2,zero
    4f68:	10000f1e 	bne	r2,zero,4fa8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4f6c:	e0bfed17 	ldw	r2,-76(fp)
    4f70:	10800017 	ldw	r2,0(r2)
    4f74:	10800817 	ldw	r2,32(r2)
    4f78:	1004c03a 	cmpne	r2,r2,zero
    4f7c:	1000031e 	bne	r2,zero,4f8c <isatty+0x7c>
    {
      return 1;
    4f80:	00800044 	movi	r2,1
    4f84:	e0bffe15 	stw	r2,-8(fp)
    4f88:	00000c06 	br	4fbc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4f8c:	e17fee04 	addi	r5,fp,-72
    4f90:	e13ffd17 	ldw	r4,-12(fp)
    4f94:	0004dd80 	call	4dd8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4f98:	e0bfef17 	ldw	r2,-68(fp)
    4f9c:	10880020 	cmpeqi	r2,r2,8192
    4fa0:	e0bffe15 	stw	r2,-8(fp)
    4fa4:	00000506 	br	4fbc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4fa8:	0004fd40 	call	4fd4 <alt_get_errno>
    4fac:	1007883a 	mov	r3,r2
    4fb0:	00801444 	movi	r2,81
    4fb4:	18800015 	stw	r2,0(r3)
    return 0;
    4fb8:	e03ffe15 	stw	zero,-8(fp)
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    4fc0:	e037883a 	mov	sp,fp
    4fc4:	dfc00117 	ldw	ra,4(sp)
    4fc8:	df000017 	ldw	fp,0(sp)
    4fcc:	dec00204 	addi	sp,sp,8
    4fd0:	f800283a 	ret

00004fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4fd4:	defffd04 	addi	sp,sp,-12
    4fd8:	dfc00215 	stw	ra,8(sp)
    4fdc:	df000115 	stw	fp,4(sp)
    4fe0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4fe4:	00800034 	movhi	r2,0
    4fe8:	109be204 	addi	r2,r2,28552
    4fec:	10800017 	ldw	r2,0(r2)
    4ff0:	1005003a 	cmpeq	r2,r2,zero
    4ff4:	1000061e 	bne	r2,zero,5010 <alt_get_errno+0x3c>
    4ff8:	00800034 	movhi	r2,0
    4ffc:	109be204 	addi	r2,r2,28552
    5000:	10800017 	ldw	r2,0(r2)
    5004:	103ee83a 	callr	r2
    5008:	e0bfff15 	stw	r2,-4(fp)
    500c:	00000306 	br	501c <alt_get_errno+0x48>
    5010:	00800074 	movhi	r2,1
    5014:	10a27a04 	addi	r2,r2,-30232
    5018:	e0bfff15 	stw	r2,-4(fp)
    501c:	e0bfff17 	ldw	r2,-4(fp)
}
    5020:	e037883a 	mov	sp,fp
    5024:	dfc00117 	ldw	ra,4(sp)
    5028:	df000017 	ldw	fp,0(sp)
    502c:	dec00204 	addi	sp,sp,8
    5030:	f800283a 	ret

00005034 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5034:	defff804 	addi	sp,sp,-32
    5038:	dfc00715 	stw	ra,28(sp)
    503c:	df000615 	stw	fp,24(sp)
    5040:	df000604 	addi	fp,sp,24
    5044:	e13ffc15 	stw	r4,-16(fp)
    5048:	e17ffd15 	stw	r5,-12(fp)
    504c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    5050:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5054:	e0bffc17 	ldw	r2,-16(fp)
    5058:	1004803a 	cmplt	r2,r2,zero
    505c:	1000091e 	bne	r2,zero,5084 <lseek+0x50>
    5060:	e13ffc17 	ldw	r4,-16(fp)
    5064:	01400304 	movi	r5,12
    5068:	00007e80 	call	7e8 <__mulsi3>
    506c:	1007883a 	mov	r3,r2
    5070:	00800034 	movhi	r2,0
    5074:	109b7604 	addi	r2,r2,28120
    5078:	1887883a 	add	r3,r3,r2
    507c:	e0ffff15 	stw	r3,-4(fp)
    5080:	00000106 	br	5088 <lseek+0x54>
    5084:	e03fff15 	stw	zero,-4(fp)
    5088:	e0bfff17 	ldw	r2,-4(fp)
    508c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    5090:	e0bffb17 	ldw	r2,-20(fp)
    5094:	1005003a 	cmpeq	r2,r2,zero
    5098:	1000111e 	bne	r2,zero,50e0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    509c:	e0bffb17 	ldw	r2,-20(fp)
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	10800717 	ldw	r2,28(r2)
    50a8:	1005003a 	cmpeq	r2,r2,zero
    50ac:	1000091e 	bne	r2,zero,50d4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    50b0:	e0bffb17 	ldw	r2,-20(fp)
    50b4:	10800017 	ldw	r2,0(r2)
    50b8:	10800717 	ldw	r2,28(r2)
    50bc:	e13ffb17 	ldw	r4,-20(fp)
    50c0:	e17ffd17 	ldw	r5,-12(fp)
    50c4:	e1bffe17 	ldw	r6,-8(fp)
    50c8:	103ee83a 	callr	r2
    50cc:	e0bffa15 	stw	r2,-24(fp)
    50d0:	00000506 	br	50e8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    50d4:	00bfde84 	movi	r2,-134
    50d8:	e0bffa15 	stw	r2,-24(fp)
    50dc:	00000206 	br	50e8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    50e0:	00bfebc4 	movi	r2,-81
    50e4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    50e8:	e0bffa17 	ldw	r2,-24(fp)
    50ec:	1004403a 	cmpge	r2,r2,zero
    50f0:	1000071e 	bne	r2,zero,5110 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    50f4:	00051280 	call	5128 <alt_get_errno>
    50f8:	1007883a 	mov	r3,r2
    50fc:	e0bffa17 	ldw	r2,-24(fp)
    5100:	0085c83a 	sub	r2,zero,r2
    5104:	18800015 	stw	r2,0(r3)
    rc = -1;
    5108:	00bfffc4 	movi	r2,-1
    510c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    5110:	e0bffa17 	ldw	r2,-24(fp)
}
    5114:	e037883a 	mov	sp,fp
    5118:	dfc00117 	ldw	ra,4(sp)
    511c:	df000017 	ldw	fp,0(sp)
    5120:	dec00204 	addi	sp,sp,8
    5124:	f800283a 	ret

00005128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5128:	defffd04 	addi	sp,sp,-12
    512c:	dfc00215 	stw	ra,8(sp)
    5130:	df000115 	stw	fp,4(sp)
    5134:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5138:	00800034 	movhi	r2,0
    513c:	109be204 	addi	r2,r2,28552
    5140:	10800017 	ldw	r2,0(r2)
    5144:	1005003a 	cmpeq	r2,r2,zero
    5148:	1000061e 	bne	r2,zero,5164 <alt_get_errno+0x3c>
    514c:	00800034 	movhi	r2,0
    5150:	109be204 	addi	r2,r2,28552
    5154:	10800017 	ldw	r2,0(r2)
    5158:	103ee83a 	callr	r2
    515c:	e0bfff15 	stw	r2,-4(fp)
    5160:	00000306 	br	5170 <alt_get_errno+0x48>
    5164:	00800074 	movhi	r2,1
    5168:	10a27a04 	addi	r2,r2,-30232
    516c:	e0bfff15 	stw	r2,-4(fp)
    5170:	e0bfff17 	ldw	r2,-4(fp)
}
    5174:	e037883a 	mov	sp,fp
    5178:	dfc00117 	ldw	ra,4(sp)
    517c:	df000017 	ldw	fp,0(sp)
    5180:	dec00204 	addi	sp,sp,8
    5184:	f800283a 	ret

00005188 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5188:	defff704 	addi	sp,sp,-36
    518c:	dfc00815 	stw	ra,32(sp)
    5190:	df000715 	stw	fp,28(sp)
    5194:	df000704 	addi	fp,sp,28
    5198:	e13ffb15 	stw	r4,-20(fp)
    519c:	e17ffc15 	stw	r5,-16(fp)
    51a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    51a4:	e0bffb17 	ldw	r2,-20(fp)
    51a8:	1004803a 	cmplt	r2,r2,zero
    51ac:	1000091e 	bne	r2,zero,51d4 <read+0x4c>
    51b0:	e13ffb17 	ldw	r4,-20(fp)
    51b4:	01400304 	movi	r5,12
    51b8:	00007e80 	call	7e8 <__mulsi3>
    51bc:	1007883a 	mov	r3,r2
    51c0:	00800034 	movhi	r2,0
    51c4:	109b7604 	addi	r2,r2,28120
    51c8:	1887883a 	add	r3,r3,r2
    51cc:	e0ffff15 	stw	r3,-4(fp)
    51d0:	00000106 	br	51d8 <read+0x50>
    51d4:	e03fff15 	stw	zero,-4(fp)
    51d8:	e0bfff17 	ldw	r2,-4(fp)
    51dc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    51e0:	e0bffa17 	ldw	r2,-24(fp)
    51e4:	1005003a 	cmpeq	r2,r2,zero
    51e8:	1000241e 	bne	r2,zero,527c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    51ec:	e0bffa17 	ldw	r2,-24(fp)
    51f0:	10800217 	ldw	r2,8(r2)
    51f4:	108000cc 	andi	r2,r2,3
    51f8:	10800060 	cmpeqi	r2,r2,1
    51fc:	10001a1e 	bne	r2,zero,5268 <read+0xe0>
    5200:	e0bffa17 	ldw	r2,-24(fp)
    5204:	10800017 	ldw	r2,0(r2)
    5208:	10800517 	ldw	r2,20(r2)
    520c:	1005003a 	cmpeq	r2,r2,zero
    5210:	1000151e 	bne	r2,zero,5268 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5214:	e0bffa17 	ldw	r2,-24(fp)
    5218:	10800017 	ldw	r2,0(r2)
    521c:	10800517 	ldw	r2,20(r2)
    5220:	e17ffc17 	ldw	r5,-16(fp)
    5224:	e1bffd17 	ldw	r6,-12(fp)
    5228:	e13ffa17 	ldw	r4,-24(fp)
    522c:	103ee83a 	callr	r2
    5230:	e0bff915 	stw	r2,-28(fp)
    5234:	e0bff917 	ldw	r2,-28(fp)
    5238:	1004403a 	cmpge	r2,r2,zero
    523c:	1000071e 	bne	r2,zero,525c <read+0xd4>
        {
          ALT_ERRNO = -rval;
    5240:	00052ac0 	call	52ac <alt_get_errno>
    5244:	e0fff917 	ldw	r3,-28(fp)
    5248:	00c7c83a 	sub	r3,zero,r3
    524c:	10c00015 	stw	r3,0(r2)
          return -1;
    5250:	00bfffc4 	movi	r2,-1
    5254:	e0bffe15 	stw	r2,-8(fp)
    5258:	00000e06 	br	5294 <read+0x10c>
        }
        return rval;
    525c:	e0bff917 	ldw	r2,-28(fp)
    5260:	e0bffe15 	stw	r2,-8(fp)
    5264:	00000b06 	br	5294 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5268:	00052ac0 	call	52ac <alt_get_errno>
    526c:	1007883a 	mov	r3,r2
    5270:	00800344 	movi	r2,13
    5274:	18800015 	stw	r2,0(r3)
    5278:	00000406 	br	528c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    527c:	00052ac0 	call	52ac <alt_get_errno>
    5280:	1007883a 	mov	r3,r2
    5284:	00801444 	movi	r2,81
    5288:	18800015 	stw	r2,0(r3)
  }
  return -1;
    528c:	00bfffc4 	movi	r2,-1
    5290:	e0bffe15 	stw	r2,-8(fp)
    5294:	e0bffe17 	ldw	r2,-8(fp)
}
    5298:	e037883a 	mov	sp,fp
    529c:	dfc00117 	ldw	ra,4(sp)
    52a0:	df000017 	ldw	fp,0(sp)
    52a4:	dec00204 	addi	sp,sp,8
    52a8:	f800283a 	ret

000052ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    52ac:	defffd04 	addi	sp,sp,-12
    52b0:	dfc00215 	stw	ra,8(sp)
    52b4:	df000115 	stw	fp,4(sp)
    52b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    52bc:	00800034 	movhi	r2,0
    52c0:	109be204 	addi	r2,r2,28552
    52c4:	10800017 	ldw	r2,0(r2)
    52c8:	1005003a 	cmpeq	r2,r2,zero
    52cc:	1000061e 	bne	r2,zero,52e8 <alt_get_errno+0x3c>
    52d0:	00800034 	movhi	r2,0
    52d4:	109be204 	addi	r2,r2,28552
    52d8:	10800017 	ldw	r2,0(r2)
    52dc:	103ee83a 	callr	r2
    52e0:	e0bfff15 	stw	r2,-4(fp)
    52e4:	00000306 	br	52f4 <alt_get_errno+0x48>
    52e8:	00800074 	movhi	r2,1
    52ec:	10a27a04 	addi	r2,r2,-30232
    52f0:	e0bfff15 	stw	r2,-4(fp)
    52f4:	e0bfff17 	ldw	r2,-4(fp)
}
    52f8:	e037883a 	mov	sp,fp
    52fc:	dfc00117 	ldw	ra,4(sp)
    5300:	df000017 	ldw	fp,0(sp)
    5304:	dec00204 	addi	sp,sp,8
    5308:	f800283a 	ret

0000530c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    530c:	defff704 	addi	sp,sp,-36
    5310:	dfc00815 	stw	ra,32(sp)
    5314:	df000715 	stw	fp,28(sp)
    5318:	df000704 	addi	fp,sp,28
    531c:	e13ffb15 	stw	r4,-20(fp)
    5320:	e17ffc15 	stw	r5,-16(fp)
    5324:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5328:	e0bffb17 	ldw	r2,-20(fp)
    532c:	1004803a 	cmplt	r2,r2,zero
    5330:	1000091e 	bne	r2,zero,5358 <write+0x4c>
    5334:	e13ffb17 	ldw	r4,-20(fp)
    5338:	01400304 	movi	r5,12
    533c:	00007e80 	call	7e8 <__mulsi3>
    5340:	1007883a 	mov	r3,r2
    5344:	00800034 	movhi	r2,0
    5348:	109b7604 	addi	r2,r2,28120
    534c:	1887883a 	add	r3,r3,r2
    5350:	e0ffff15 	stw	r3,-4(fp)
    5354:	00000106 	br	535c <write+0x50>
    5358:	e03fff15 	stw	zero,-4(fp)
    535c:	e0bfff17 	ldw	r2,-4(fp)
    5360:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    5364:	e0bffa17 	ldw	r2,-24(fp)
    5368:	1005003a 	cmpeq	r2,r2,zero
    536c:	1000241e 	bne	r2,zero,5400 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5370:	e0bffa17 	ldw	r2,-24(fp)
    5374:	10800217 	ldw	r2,8(r2)
    5378:	108000cc 	andi	r2,r2,3
    537c:	1005003a 	cmpeq	r2,r2,zero
    5380:	10001a1e 	bne	r2,zero,53ec <write+0xe0>
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10800017 	ldw	r2,0(r2)
    538c:	10800617 	ldw	r2,24(r2)
    5390:	1005003a 	cmpeq	r2,r2,zero
    5394:	1000151e 	bne	r2,zero,53ec <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5398:	e0bffa17 	ldw	r2,-24(fp)
    539c:	10800017 	ldw	r2,0(r2)
    53a0:	10800617 	ldw	r2,24(r2)
    53a4:	e17ffc17 	ldw	r5,-16(fp)
    53a8:	e1bffd17 	ldw	r6,-12(fp)
    53ac:	e13ffa17 	ldw	r4,-24(fp)
    53b0:	103ee83a 	callr	r2
    53b4:	e0bff915 	stw	r2,-28(fp)
    53b8:	e0bff917 	ldw	r2,-28(fp)
    53bc:	1004403a 	cmpge	r2,r2,zero
    53c0:	1000071e 	bne	r2,zero,53e0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    53c4:	00054300 	call	5430 <alt_get_errno>
    53c8:	e0fff917 	ldw	r3,-28(fp)
    53cc:	00c7c83a 	sub	r3,zero,r3
    53d0:	10c00015 	stw	r3,0(r2)
        return -1;
    53d4:	00bfffc4 	movi	r2,-1
    53d8:	e0bffe15 	stw	r2,-8(fp)
    53dc:	00000e06 	br	5418 <write+0x10c>
      }
      return rval;
    53e0:	e0bff917 	ldw	r2,-28(fp)
    53e4:	e0bffe15 	stw	r2,-8(fp)
    53e8:	00000b06 	br	5418 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    53ec:	00054300 	call	5430 <alt_get_errno>
    53f0:	1007883a 	mov	r3,r2
    53f4:	00800344 	movi	r2,13
    53f8:	18800015 	stw	r2,0(r3)
    53fc:	00000406 	br	5410 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5400:	00054300 	call	5430 <alt_get_errno>
    5404:	1007883a 	mov	r3,r2
    5408:	00801444 	movi	r2,81
    540c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5410:	00bfffc4 	movi	r2,-1
    5414:	e0bffe15 	stw	r2,-8(fp)
    5418:	e0bffe17 	ldw	r2,-8(fp)
}
    541c:	e037883a 	mov	sp,fp
    5420:	dfc00117 	ldw	ra,4(sp)
    5424:	df000017 	ldw	fp,0(sp)
    5428:	dec00204 	addi	sp,sp,8
    542c:	f800283a 	ret

00005430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5430:	defffd04 	addi	sp,sp,-12
    5434:	dfc00215 	stw	ra,8(sp)
    5438:	df000115 	stw	fp,4(sp)
    543c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5440:	00800034 	movhi	r2,0
    5444:	109be204 	addi	r2,r2,28552
    5448:	10800017 	ldw	r2,0(r2)
    544c:	1005003a 	cmpeq	r2,r2,zero
    5450:	1000061e 	bne	r2,zero,546c <alt_get_errno+0x3c>
    5454:	00800034 	movhi	r2,0
    5458:	109be204 	addi	r2,r2,28552
    545c:	10800017 	ldw	r2,0(r2)
    5460:	103ee83a 	callr	r2
    5464:	e0bfff15 	stw	r2,-4(fp)
    5468:	00000306 	br	5478 <alt_get_errno+0x48>
    546c:	00800074 	movhi	r2,1
    5470:	10a27a04 	addi	r2,r2,-30232
    5474:	e0bfff15 	stw	r2,-4(fp)
    5478:	e0bfff17 	ldw	r2,-4(fp)
}
    547c:	e037883a 	mov	sp,fp
    5480:	dfc00117 	ldw	ra,4(sp)
    5484:	df000017 	ldw	fp,0(sp)
    5488:	dec00204 	addi	sp,sp,8
    548c:	f800283a 	ret
    5490:	00003dc8 	cmpgei	zero,zero,247
