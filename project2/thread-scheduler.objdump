
thread-scheduler.elf:     file format elf32-littlenios2
thread-scheduler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005864 memsz 0x00005864 flags r-x
    LOAD off    0x00006884 vaddr 0x00005884 paddr 0x000072cc align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008d14 vaddr 0x00008d14 paddr 0x00008d14 align 2**12
         filesz 0x00000000 memsz 0x00000334 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005598  000001d8  000001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  00005770  00005770  00006770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00005884  000072cc  00006884  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000334  00008d14  00008d14  00008d14  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000082cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  000082f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000efd  00000000  00000000  00008c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a50c  00000000  00000000  00009b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000522a  00000000  00000000  00024039  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c513  00000000  00000000  00029263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001230  00000000  00000000  00035778  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016d9  00000000  00000000  000369a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000362d  00000000  00000000  00038081  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003dfff  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003e002  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003e005  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003e006  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003e00a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003e00e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003e012  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003e01b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003e024  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003e02d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  0003e067  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d8 l    d  .text	00000000 .text
00005770 l    d  .rodata	00000000 .rodata
00005884 l    d  .rwdata	00000000 .rwdata
00008d14 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000210 l       .text	00000000 alt_after_alt_main
000000bc l       .exceptions	00000000 schedule_threads
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000978 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00005c8c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
000018e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000072a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000608c l     O .rwdata	00001060 JTAG_UART
00001f88 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000021c8 l     F .text	00000228 altera_avalon_jtag_uart_irq
000023f0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00002a6c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00002c6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002ce8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002dc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000031d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00003328 l     F .text	000000f8 alt_file_locked
000035ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000040a4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004488 l     F .text	00000058 std
00004594 l     F .text	00000008 __fp_lock
0000459c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005054 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000518c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000052b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00005404 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00005588 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0000570c l     F .text	00000060 alt_get_errno
00004ef4 g     F .text	00000070 _isatty_r
00001954 g     F .text	0000006c alt_main
00008db8 g     O .bss	00000100 alt_irq
00004f64 g     F .text	00000078 _lseek_r
000072cc g       *ABS*	00000000 __flash_rwdata_start
00009048 g       *ABS*	00000000 __alt_heap_start
00000914 g     F .text	00000020 get_global_flag
00004b30 g     F .text	00000068 __sseek
000044f0 g     F .text	000000a4 __sinit
00003ce8 g     F .text	00000130 __swbuf_r
000045f0 g     F .text	0000009c __sfmoreglue
000019e0 g     F .text	00000020 __malloc_unlock
000008f4 g     F .text	00000020 reset_global_flag
000045e0 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00008d70 g     O .bss	00000030 run_queue
00000000 g     F .entry	0000000c __reset
00000574 g     F .text	0000011c prune_queue
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004e80 g     F .text	00000074 _fstat_r
00008d2c g     O .bss	00000004 errno
00008d34 g     O .bss	00000004 alt_argv
0000f294 g       *ABS*	00000000 _gp
00007114 g     O .rwdata	00000180 alt_fd_list
000036a4 g     F .text	00000094 alt_find_dev
000039e8 g     F .text	000000a0 memcpy
000045d4 g     F .text	0000000c _cleanup_r
000032b0 g     F .text	00000078 alt_io_redirect
00005770 g       *ABS*	00000000 __DTOR_END__
00003684 g     F .text	00000020 altera_nios2_irq_init
00002608 g     F .text	00000224 altera_avalon_jtag_uart_read
00000b10 g     F .text	00000014 malloc
00000ab4 g     F .text	00000008 __udivsi3
000051ec g     F .text	000000c4 isatty
00008d20 g     O .bss	00000004 __malloc_top_pad
00001264 g     F .text	00000070 _sbrk_r
00004fdc g     F .text	00000078 _read_r
000072c0 g     O .rwdata	00000004 alt_max_fd
00004d5c g     F .text	00000110 _fclose_r
00004454 g     F .text	00000034 fflush
00008d24 g     O .bss	00000004 __malloc_max_sbrked_mem
00000500 g     F .text	0000004c destroy_thread
00008d18 g     O .bss	00000004 current_thread
00005310 g     F .text	000000f4 lseek
000072a0 g     O .rwdata	00000004 _global_impure_ptr
00009048 g       *ABS*	00000000 __bss_end
000030e0 g     F .text	000000f8 alt_iic_isr_register
00001dec g     F .text	0000010c alt_tick
00000240 g     F .text	000000a8 mythread
00008d14 g     O .bss	00000004 global_flag
000045bc g     F .text	00000018 __fp_lock_all
00003098 g     F .text	00000048 alt_ic_irq_enabled
00008da0 g     O .bss	00000018 alarm
00001d54 g     F .text	00000098 alt_alarm_stop
00008d44 g     O .bss	00000004 alt_irq_active
00000110 g     F .exceptions	000000c8 alt_irq_handler
000070ec g     O .rwdata	00000028 alt_dev_null
00002ccc g     F .text	0000001c alt_dcache_flush_all
000072cc g       *ABS*	00000000 __ram_rwdata_end
000072b8 g     O .rwdata	00000008 alt_dev_list
000055e8 g     F .text	00000124 write
00003b8c g     F .text	000000e8 _putc_r
00005884 g       *ABS*	00000000 __ram_rodata_end
000050b4 g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00000abc g     F .text	00000008 __umodsi3
00009048 g       *ABS*	00000000 end
00002108 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000576c g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00002adc g     F .text	00000090 alt_avalon_timer_sc_init
0000282c g     F .text	00000240 altera_avalon_jtag_uart_write
000044e0 g     F .text	00000004 __sfp_lock_acquire
00001400 g     F .text	00000314 _free_r
00001a00 g     F .text	00000258 alt_printf
000040a8 g     F .text	000001b0 __call_exitprocs
00007298 g     O .rwdata	00000004 __malloc_sbrk_base
000001d8 g     F .text	0000003c _start
00008d3c g     O .bss	00000004 _alt_tick_rate
00008d40 g     O .bss	00000004 _alt_nticks
00005464 g     F .text	00000124 read
00001f2c g     F .text	0000005c alt_sys_init
00003f70 g     F .text	00000134 __register_exitproc
000024a0 g     F .text	00000074 altera_avalon_jtag_uart_close
00000ac4 g     F .text	00000038 __mulsi3
00005884 g       *ABS*	00000000 __ram_rwdata_start
00005770 g       *ABS*	00000000 __ram_rodata_start
00008d48 g     O .bss	00000028 __malloc_current_mallinfo
00001fc0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00003858 g     F .text	000000d0 alt_get_fd
00004cec g     F .text	00000070 _close_r
00003974 g     F .text	00000074 memcmp
00002070 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00009048 g       *ABS*	00000000 __alt_stack_base
000020b8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003e34 g     F .text	0000013c __swsetup_r
0000468c g     F .text	000000f0 __sfp
00005884 g     O .rwdata	00000408 __malloc_av_
000044ec g     F .text	00000004 __sinit_lock_release
00004c14 g     F .text	00000060 __sread
00003738 g     F .text	00000120 alt_find_file
00002d14 g     F .text	000000b4 alt_dev_llist_insert
000019c0 g     F .text	00000020 __malloc_lock
00001c98 g     F .text	000000bc sbrk
00004258 g     F .text	000001fc _fflush_r
00008d14 g       *ABS*	00000000 __bss_start
00004a90 g     F .text	00000098 memset
00000214 g     F .text	0000002c main
00008d38 g     O .bss	00000004 alt_envp
00008d28 g     O .bss	00000004 __malloc_max_total_mem
00002018 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00003e18 g     F .text	0000001c __swbuf
00004b28 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004e6c g     F .text	00000014 fclose
00008eb8 g     O .bss	00000190 _atexit0
00000b24 g     F .text	00000740 _malloc_r
000072c4 g     O .rwdata	00000004 alt_errno
00004844 g     F .text	000000b8 _fwalk
00003a88 g     F .text	00000104 putc
000009f4 g     F .text	00000060 __divsi3
000012d4 g     F .text	0000012c _malloc_trim_r
00005770 g       *ABS*	00000000 __CTOR_END__
00005770 g       *ABS*	00000000 __flash_rodata_start
00005770 g       *ABS*	00000000 __DTOR_LIST__
00000888 g     F .text	0000006c interrupt_handler
00001ef8 g     F .text	00000034 alt_irq_init
0000360c g     F .text	00000078 alt_release_fd
00003928 g     F .text	00000014 atexit
0000054c g     F .text	00000028 finish_thread
00004c74 g     F .text	00000078 _write_r
0000729c g     O .rwdata	00000004 _impure_ptr
00008d30 g     O .bss	00000004 alt_argc
00002e8c g     F .text	00000064 _do_dtors
00000934 g     F .text	00000020 disable_interrupts
00000020 g       .exceptions	00000000 alt_irq_entry
00008d1c g     O .bss	00000004 run_queue_count
000045a4 g     F .text	00000018 __fp_unlock_all
000072b0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002f0c g     F .text	00000050 alt_ic_isr_register
000072cc g       *ABS*	00000000 _edata
00009048 g       *ABS*	00000000 _end
000001d8 g       *ABS*	00000000 __ram_exceptions_end
00002514 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000007b0 g     F .text	000000d8 prototype_os
00002ff8 g     F .text	000000a0 alt_ic_irq_disable
00004b98 g     F .text	0000007c __swrite
00007294 g     O .rwdata	00000004 __malloc_trim_threshold
0000393c g     F .text	00000038 exit
0000477c g     F .text	000000c8 _fwalk_reent
00000a54 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000044e4 g     F .text	00000004 __sfp_lock_release
00005094 g     F .text	00000020 _exit
00001714 g     F .text	00000154 alt_alarm_start
000048fc g     F .text	00000194 __smakebuf_r
00003c74 g     F .text	00000074 strlen
00003420 g     F .text	0000018c open
00001c58 g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
00002ef0 g     F .text	0000001c alt_icache_flush_all
00000954 g     F .text	00000024 enable_interrupts
000002e8 g     F .text	00000104 thread_create
000072c8 g     O .rwdata	00000004 alt_priority_mask
00002f5c g     F .text	0000009c alt_ic_irq_enable
00000428 g     F .text	000000d8 thread_scheduler
000072a8 g     O .rwdata	00000008 alt_alarm_list
00002e28 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00002b6c g     F .text	00000100 close
000003ec g     F .text	0000003c thread_join
00001868 g     F .text	00000080 alt_load
00000afc g     F .text	00000014 free
000044e8 g     F .text	00000004 __sinit_lock_acquire
00000690 g     F .text	00000120 prioritize_queue



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407614 	ori	at,at,472
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001100 	call	110 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
.section .exceptions.exit.user, "xa"
call get_global_flag
  98:	00009140 	call	914 <get_global_flag>
movi r8, 1
  9c:	02000044 	movi	r8,1
bne r2, r8, schedule_threads
  a0:	1200061e 	bne	r2,r8,bc <schedule_threads>
call reset_global_flag
  a4:	00008f40 	call	8f4 <reset_global_flag>
mov r4, sp
  a8:	d809883a 	mov	r4,sp
mov r5, fp
  ac:	e00b883a 	mov	r5,fp
call thread_scheduler
  b0:	00004280 	call	428 <thread_scheduler>
mov sp, r2
  b4:	1037883a 	mov	sp,r2
mov fp, r3
  b8:	1839883a 	mov	fp,r3

000000bc <schedule_threads>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  bc:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  c0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  c4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  cc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  d0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  dc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  e0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e4:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  ec:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  f0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  f4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  fc:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 100:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 104:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 108:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10c:	ef80083a 	eret

00000110 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 110:	defff904 	addi	sp,sp,-28
 114:	dfc00615 	stw	ra,24(sp)
 118:	df000515 	stw	fp,20(sp)
 11c:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 120:	0005313a 	rdctl	r2,ipending
 124:	e0bffc15 	stw	r2,-16(fp)

  return active;
 128:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 12c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 134:	00800044 	movi	r2,1
 138:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 13c:	e0ffff17 	ldw	r3,-4(fp)
 140:	e0bffe17 	ldw	r2,-8(fp)
 144:	1884703a 	and	r2,r3,r2
 148:	1005003a 	cmpeq	r2,r2,zero
 14c:	1000161e 	bne	r2,zero,1a8 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	00c00074 	movhi	r3,1
 158:	18e36e04 	addi	r3,r3,-29256
 15c:	100490fa 	slli	r2,r2,3
 160:	10c5883a 	add	r2,r2,r3
 164:	11400017 	ldw	r5,0(r2)
 168:	e0bffd17 	ldw	r2,-12(fp)
 16c:	00c00074 	movhi	r3,1
 170:	18e36e04 	addi	r3,r3,-29256
 174:	100490fa 	slli	r2,r2,3
 178:	10c5883a 	add	r2,r2,r3
 17c:	10800104 	addi	r2,r2,4
 180:	11000017 	ldw	r4,0(r2)
 184:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 190:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 194:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 198:	e0bfff17 	ldw	r2,-4(fp)
 19c:	1004c03a 	cmpne	r2,r2,zero
 1a0:	103fe31e 	bne	r2,zero,130 <alt_irq_handler+0x20>
 1a4:	00000706 	br	1c4 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a8:	e0bffe17 	ldw	r2,-8(fp)
 1ac:	1085883a 	add	r2,r2,r2
 1b0:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1b4:	e0bffd17 	ldw	r2,-12(fp)
 1b8:	10800044 	addi	r2,r2,1
 1bc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1c0:	003fde06 	br	13c <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c4:	e037883a 	mov	sp,fp
 1c8:	dfc00117 	ldw	ra,4(sp)
 1cc:	df000017 	ldw	fp,0(sp)
 1d0:	dec00204 	addi	sp,sp,8
 1d4:	f800283a 	ret

Disassembly of section .text:

000001d8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1dc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1e0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1e4:	d6bca514 	ori	gp,gp,62100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1ec:	10a34514 	ori	r2,r2,36116

    movhi r3, %hi(__bss_end)
     1f0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1f4:	18e41214 	ori	r3,r3,36936

    beq r2, r3, 1f
     1f8:	10c00326 	beq	r2,r3,208 <_start+0x30>

0:
    stw zero, (r2)
     1fc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     200:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     204:	10fffd36 	bltu	r2,r3,1fc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     208:	00018680 	call	1868 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     20c:	00019540 	call	1954 <alt_main>

00000210 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     210:	003fff06 	br	210 <alt_after_alt_main>

00000214 <main>:
int run_queue_count;
/* the currently running thread */
tcb* current_thread;

int main()
{
     214:	defffe04 	addi	sp,sp,-8
     218:	dfc00115 	stw	ra,4(sp)
     21c:	df000015 	stw	fp,0(sp)
     220:	d839883a 	mov	fp,sp
	//disable_interrupts();
	// begin execution of the operating system
	prototype_os();
     224:	00007b00 	call	7b0 <prototype_os>
	return 0;
     228:	0005883a 	mov	r2,zero
}
     22c:	e037883a 	mov	sp,fp
     230:	dfc00117 	ldw	ra,4(sp)
     234:	df000017 	ldw	fp,0(sp)
     238:	dec00204 	addi	sp,sp,8
     23c:	f800283a 	ret

00000240 <mythread>:

void mythread(int thread_id)
{
     240:	defff904 	addi	sp,sp,-28
     244:	dfc00615 	stw	ra,24(sp)
     248:	df000515 	stw	fp,20(sp)
     24c:	df000504 	addi	fp,sp,20
     250:	e13ffe15 	stw	r4,-8(fp)
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
     254:	e0bffe17 	ldw	r2,-8(fp)
     258:	1080004c 	andi	r2,r2,1
     25c:	1004c03a 	cmpne	r2,r2,zero
     260:	1000031e 	bne	r2,zero,270 <mythread+0x30>
     264:	00800284 	movi	r2,10
     268:	e0bfff15 	stw	r2,-4(fp)
     26c:	00000206 	br	278 <mythread+0x38>
     270:	008003c4 	movi	r2,15
     274:	e0bfff15 	stw	r2,-4(fp)
     278:	e0bfff17 	ldw	r2,-4(fp)
     27c:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++)
     280:	e03ffd15 	stw	zero,-12(fp)
     284:	00001006 	br	2c8 <mythread+0x88>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
     288:	01000034 	movhi	r4,0
     28c:	2115dc04 	addi	r4,r4,22384
     290:	e17ffd17 	ldw	r5,-12(fp)
     294:	e1bffe17 	ldw	r6,-8(fp)
     298:	0001a000 	call	1a00 <alt_printf>
		for (j = 0; j < MAX; j++);
     29c:	e03ffc15 	stw	zero,-16(fp)
     2a0:	00000306 	br	2b0 <mythread+0x70>
     2a4:	e0bffc17 	ldw	r2,-16(fp)
     2a8:	10800044 	addi	r2,r2,1
     2ac:	e0bffc15 	stw	r2,-16(fp)
     2b0:	e0bffc17 	ldw	r2,-16(fp)
     2b4:	1089c410 	cmplti	r2,r2,10000
     2b8:	103ffa1e 	bne	r2,zero,2a4 <mythread+0x64>

void mythread(int thread_id)
{
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
	for (i = 0; i < n; i++)
     2bc:	e0bffd17 	ldw	r2,-12(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bffd15 	stw	r2,-12(fp)
     2c8:	e0fffd17 	ldw	r3,-12(fp)
     2cc:	e0bffb17 	ldw	r2,-20(fp)
     2d0:	18bfed16 	blt	r3,r2,288 <mythread+0x48>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
		for (j = 0; j < MAX; j++);
	}
}
     2d4:	e037883a 	mov	sp,fp
     2d8:	dfc00117 	ldw	ra,4(sp)
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00204 	addi	sp,sp,8
     2e4:	f800283a 	ret

000002e8 <thread_create>:

void thread_create(int thread_id, tcb *thread)
{
     2e8:	defffb04 	addi	sp,sp,-20
     2ec:	dfc00415 	stw	ra,16(sp)
     2f0:	df000315 	stw	fp,12(sp)
     2f4:	df000304 	addi	fp,sp,12
     2f8:	e13ffe15 	stw	r4,-8(fp)
     2fc:	e17fff15 	stw	r5,-4(fp)
	// allocate memory for the thread's workspace and stack
	tcb *t = (tcb *)malloc(sizeof(tcb) + STACK_SIZE);
     300:	0100ff04 	movi	r4,1020
     304:	0000b100 	call	b10 <malloc>
     308:	e0bffd15 	stw	r2,-12(fp)
	t->thread_id = thread_id;
     30c:	e0fffd17 	ldw	r3,-12(fp)
     310:	e0bffe17 	ldw	r2,-8(fp)
     314:	18800015 	stw	r2,0(r3)
	t->scheduled_count = 0;
     318:	e0bffd17 	ldw	r2,-12(fp)
     31c:	10000115 	stw	zero,4(r2)
	// set stack pointer
	t->fp = t + sizeof(tcb) + STACK_SIZE;
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	1093ec04 	addi	r2,r2,20400
     328:	1007883a 	mov	r3,r2
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	10c00415 	stw	r3,16(r2)
	// set frame pointer
	t->sp = t->fp - 19;
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	10800417 	ldw	r2,16(r2)
     33c:	10ffed04 	addi	r3,r2,-76
     340:	e0bffd17 	ldw	r2,-12(fp)
     344:	10c00315 	stw	r3,12(r2)
	// set the thread's function to run
	*(t->sp + 18) = mythread; // set ea (function to run)
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10800317 	ldw	r2,12(r2)
     350:	10c01204 	addi	r3,r2,72
     354:	00800034 	movhi	r2,0
     358:	10809004 	addi	r2,r2,576
     35c:	18800015 	stw	r2,0(r3)
	*(t->sp + 5) = thread_id; // set r4 (argument for mythread)
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	10800317 	ldw	r2,12(r2)
     368:	10c00504 	addi	r3,r2,20
     36c:	e0bffe17 	ldw	r2,-8(fp)
     370:	18800015 	stw	r2,0(r3)
	*(t->sp + 17) = 1; // enable interrupts (estatus)
     374:	e0bffd17 	ldw	r2,-12(fp)
     378:	10800317 	ldw	r2,12(r2)
     37c:	10c01104 	addi	r3,r2,68
     380:	00800044 	movi	r2,1
     384:	18800015 	stw	r2,0(r3)
	*(t->sp) = finish_thread; // set ra (thread completion function)
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	10c00317 	ldw	r3,12(r2)
     390:	00800034 	movhi	r2,0
     394:	10815304 	addi	r2,r2,1356
     398:	18800015 	stw	r2,0(r3)

	// add thread to run_queue
	run_queue[thread_id] = t;
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	00c00074 	movhi	r3,1
     3a4:	18e35c04 	addi	r3,r3,-29328
     3a8:	1085883a 	add	r2,r2,r2
     3ac:	1085883a 	add	r2,r2,r2
     3b0:	10c7883a 	add	r3,r2,r3
     3b4:	e0bffd17 	ldw	r2,-12(fp)
     3b8:	18800015 	stw	r2,0(r3)
	run_queue_count++;
     3bc:	d0a6a217 	ldw	r2,-25976(gp)
     3c0:	10800044 	addi	r2,r2,1
     3c4:	d0a6a215 	stw	r2,-25976(gp)
	// thread has been added to queue; set its status to scheduled
	t->status = scheduled;
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	10000215 	stw	zero,8(r2)
	thread = t;
     3d0:	e0bffd17 	ldw	r2,-12(fp)
     3d4:	e0bfff15 	stw	r2,-4(fp)
}
     3d8:	e037883a 	mov	sp,fp
     3dc:	dfc00117 	ldw	ra,4(sp)
     3e0:	df000017 	ldw	fp,0(sp)
     3e4:	dec00204 	addi	sp,sp,8
     3e8:	f800283a 	ret

000003ec <thread_join>:

void thread_join(tcb *thread)
{
     3ec:	defffe04 	addi	sp,sp,-8
     3f0:	df000115 	stw	fp,4(sp)
     3f4:	df000104 	addi	fp,sp,4
     3f8:	e13fff15 	stw	r4,-4(fp)
	if (thread != NULL)
     3fc:	e0bfff17 	ldw	r2,-4(fp)
     400:	1005003a 	cmpeq	r2,r2,zero
     404:	1000041e 	bne	r2,zero,418 <thread_join+0x2c>
	{
		while(thread->status != finished);
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	10800217 	ldw	r2,8(r2)
     410:	10800098 	cmpnei	r2,r2,2
     414:	103ffc1e 	bne	r2,zero,408 <thread_join+0x1c>
	}
}
     418:	e037883a 	mov	sp,fp
     41c:	df000017 	ldw	fp,0(sp)
     420:	dec00104 	addi	sp,sp,4
     424:	f800283a 	ret

00000428 <thread_scheduler>:

stack_context thread_scheduler(void *sp, void *fp)
{
     428:	defffa04 	addi	sp,sp,-24
     42c:	dfc00515 	stw	ra,20(sp)
     430:	df000415 	stw	fp,16(sp)
     434:	df000404 	addi	fp,sp,16
     438:	e13ffe15 	stw	r4,-8(fp)
     43c:	e17fff15 	stw	r5,-4(fp)
	alt_printf("scheduling threads...\n");
     440:	01000034 	movhi	r4,0
     444:	2115e504 	addi	r4,r4,22420
     448:	0001a000 	call	1a00 <alt_printf>

	// save the yielded thread's progress via sp, fp
	current_thread->sp = (int *)sp;
     44c:	d0e6a117 	ldw	r3,-25980(gp)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	18800315 	stw	r2,12(r3)
	current_thread->fp = (int *)fp;
     458:	d0e6a117 	ldw	r3,-25980(gp)
     45c:	e0bfff17 	ldw	r2,-4(fp)
     460:	18800415 	stw	r2,16(r3)

	if(run_queue_count > 0)
     464:	d0a6a217 	ldw	r2,-25976(gp)
     468:	10800050 	cmplti	r2,r2,1
     46c:	1000101e 	bne	r2,zero,4b0 <thread_scheduler+0x88>
	{
		// remove completed threads from the queue
		prune_queue();
     470:	00005740 	call	574 <prune_queue>
		// reprioritize the queue
		prioritize_queue();
     474:	00006900 	call	690 <prioritize_queue>

		// set the next-to-run to run as the current thread
		current_thread = run_queue[0];
     478:	00800074 	movhi	r2,1
     47c:	10a35c04 	addi	r2,r2,-29328
     480:	10800017 	ldw	r2,0(r2)
     484:	d0a6a115 	stw	r2,-25980(gp)
		// update next-to-run thread's number of times scheduled count
		current_thread->scheduled_count++;
     488:	d0e6a117 	ldw	r3,-25980(gp)
     48c:	18800117 	ldw	r2,4(r3)
     490:	10800044 	addi	r2,r2,1
     494:	18800115 	stw	r2,4(r3)

		alt_printf("next thread to run: %d\n", current_thread->thread_id);
     498:	d0a6a117 	ldw	r2,-25980(gp)
     49c:	11400017 	ldw	r5,0(r2)
     4a0:	01000034 	movhi	r4,0
     4a4:	2115eb04 	addi	r4,r4,22444
     4a8:	0001a000 	call	1a00 <alt_printf>
     4ac:	00000306 	br	4bc <thread_scheduler+0x94>
	}
	else
	{
		alt_printf("Interrupted by the DE2 timer!\n");
     4b0:	01000034 	movhi	r4,0
     4b4:	2115f104 	addi	r4,r4,22468
     4b8:	0001a000 	call	1a00 <alt_printf>
	}
	// send the next-to-run thread's stack context back to assembly to be run
	stack_context context;
	context.sp = current_thread->sp;
     4bc:	d0a6a117 	ldw	r2,-25980(gp)
     4c0:	10800317 	ldw	r2,12(r2)
     4c4:	e0bffc15 	stw	r2,-16(fp)
	context.fp = current_thread->fp;
     4c8:	d0a6a117 	ldw	r2,-25980(gp)
     4cc:	10800417 	ldw	r2,16(r2)
     4d0:	e0bffd15 	stw	r2,-12(fp)
//	*(context.sp + 17) = 1;
//	*(context.sp + 18) = mythread;
	return context;
     4d4:	e17ffc17 	ldw	r5,-16(fp)
     4d8:	e1bffd17 	ldw	r6,-12(fp)
     4dc:	2807883a 	mov	r3,r5
     4e0:	3009883a 	mov	r4,r6
}
     4e4:	1805883a 	mov	r2,r3
     4e8:	2007883a 	mov	r3,r4
     4ec:	e037883a 	mov	sp,fp
     4f0:	dfc00117 	ldw	ra,4(sp)
     4f4:	df000017 	ldw	fp,0(sp)
     4f8:	dec00204 	addi	sp,sp,8
     4fc:	f800283a 	ret

00000500 <destroy_thread>:

void destroy_thread(tcb *thread)
{
     500:	defffd04 	addi	sp,sp,-12
     504:	dfc00215 	stw	ra,8(sp)
     508:	df000115 	stw	fp,4(sp)
     50c:	df000104 	addi	fp,sp,4
     510:	e13fff15 	stw	r4,-4(fp)
	alt_printf("thread %d destroyed; was scheduled %d times\n", thread->thread_id, thread->scheduled_count);
     514:	e0bfff17 	ldw	r2,-4(fp)
     518:	11400017 	ldw	r5,0(r2)
     51c:	e0bfff17 	ldw	r2,-4(fp)
     520:	11800117 	ldw	r6,4(r2)
     524:	01000034 	movhi	r4,0
     528:	2115f904 	addi	r4,r4,22500
     52c:	0001a000 	call	1a00 <alt_printf>
	free(thread);
     530:	e13fff17 	ldw	r4,-4(fp)
     534:	0000afc0 	call	afc <free>
}
     538:	e037883a 	mov	sp,fp
     53c:	dfc00117 	ldw	ra,4(sp)
     540:	df000017 	ldw	fp,0(sp)
     544:	dec00204 	addi	sp,sp,8
     548:	f800283a 	ret

0000054c <finish_thread>:

void finish_thread()
{
     54c:	deffff04 	addi	sp,sp,-4
     550:	df000015 	stw	fp,0(sp)
     554:	d839883a 	mov	fp,sp
	current_thread->status = finished;
     558:	d0e6a117 	ldw	r3,-25980(gp)
     55c:	00800084 	movi	r2,2
     560:	18800215 	stw	r2,8(r3)
}
     564:	e037883a 	mov	sp,fp
     568:	df000017 	ldw	fp,0(sp)
     56c:	dec00104 	addi	sp,sp,4
     570:	f800283a 	ret

00000574 <prune_queue>:

void prune_queue()
{
     574:	defffb04 	addi	sp,sp,-20
     578:	dfc00415 	stw	ra,16(sp)
     57c:	df000315 	stw	fp,12(sp)
     580:	df000304 	addi	fp,sp,12
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     584:	e03fff15 	stw	zero,-4(fp)
     588:	00003906 	br	670 <prune_queue+0xfc>
	{
		tcb *thread = run_queue[i];
     58c:	e0bfff17 	ldw	r2,-4(fp)
     590:	00c00074 	movhi	r3,1
     594:	18e35c04 	addi	r3,r3,-29328
     598:	1085883a 	add	r2,r2,r2
     59c:	1085883a 	add	r2,r2,r2
     5a0:	10c5883a 	add	r2,r2,r3
     5a4:	10800017 	ldw	r2,0(r2)
     5a8:	e0bffd15 	stw	r2,-12(fp)
		// thread has finished and exited
		if (thread != NULL && thread->status == finished)
     5ac:	e0bffd17 	ldw	r2,-12(fp)
     5b0:	1005003a 	cmpeq	r2,r2,zero
     5b4:	10002b1e 	bne	r2,zero,664 <prune_queue+0xf0>
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	10800217 	ldw	r2,8(r2)
     5c0:	10800098 	cmpnei	r2,r2,2
     5c4:	1000271e 	bne	r2,zero,664 <prune_queue+0xf0>
		{
			// remove the completed thread from the queue
			run_queue[i] = NULL;
     5c8:	e0bfff17 	ldw	r2,-4(fp)
     5cc:	00c00074 	movhi	r3,1
     5d0:	18e35c04 	addi	r3,r3,-29328
     5d4:	1085883a 	add	r2,r2,r2
     5d8:	1085883a 	add	r2,r2,r2
     5dc:	10c5883a 	add	r2,r2,r3
     5e0:	10000015 	stw	zero,0(r2)
			run_queue_count--;
     5e4:	d0a6a217 	ldw	r2,-25976(gp)
     5e8:	10bfffc4 	addi	r2,r2,-1
     5ec:	d0a6a215 	stw	r2,-25976(gp)
			destroy_thread(thread);
     5f0:	e13ffd17 	ldw	r4,-12(fp)
     5f4:	00005000 	call	500 <destroy_thread>
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	e0bffe15 	stw	r2,-8(fp)
     600:	00001206 	br	64c <prune_queue+0xd8>
			{
				run_queue[j] = run_queue[j+1];
     604:	e17ffe17 	ldw	r5,-8(fp)
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	10800044 	addi	r2,r2,1
     610:	00c00074 	movhi	r3,1
     614:	18e35c04 	addi	r3,r3,-29328
     618:	1085883a 	add	r2,r2,r2
     61c:	1085883a 	add	r2,r2,r2
     620:	10c5883a 	add	r2,r2,r3
     624:	11000017 	ldw	r4,0(r2)
     628:	00c00074 	movhi	r3,1
     62c:	18e35c04 	addi	r3,r3,-29328
     630:	2945883a 	add	r2,r5,r5
     634:	1085883a 	add	r2,r2,r2
     638:	10c5883a 	add	r2,r2,r3
     63c:	11000015 	stw	r4,0(r2)
			// remove the completed thread from the queue
			run_queue[i] = NULL;
			run_queue_count--;
			destroy_thread(thread);
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     640:	e0bffe17 	ldw	r2,-8(fp)
     644:	10800044 	addi	r2,r2,1
     648:	e0bffe15 	stw	r2,-8(fp)
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	108002d0 	cmplti	r2,r2,11
     654:	103feb1e 	bne	r2,zero,604 <prune_queue+0x90>
			{
				run_queue[j] = run_queue[j+1];
			}
			run_queue[NUM_THREADS-1] = NULL;
     658:	00800074 	movhi	r2,1
     65c:	10a35c04 	addi	r2,r2,-29328
     660:	10000b15 	stw	zero,44(r2)

void prune_queue()
{
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     664:	e0bfff17 	ldw	r2,-4(fp)
     668:	10800044 	addi	r2,r2,1
     66c:	e0bfff15 	stw	r2,-4(fp)
     670:	e0bfff17 	ldw	r2,-4(fp)
     674:	10800310 	cmplti	r2,r2,12
     678:	103fc41e 	bne	r2,zero,58c <prune_queue+0x18>
				run_queue[j] = run_queue[j+1];
			}
			run_queue[NUM_THREADS-1] = NULL;
		}
	}
}
     67c:	e037883a 	mov	sp,fp
     680:	dfc00117 	ldw	ra,4(sp)
     684:	df000017 	ldw	fp,0(sp)
     688:	dec00204 	addi	sp,sp,8
     68c:	f800283a 	ret

00000690 <prioritize_queue>:

void prioritize_queue()
{
     690:	defffb04 	addi	sp,sp,-20
     694:	dfc00415 	stw	ra,16(sp)
     698:	df000315 	stw	fp,12(sp)
     69c:	df000304 	addi	fp,sp,12
	// determine how many open spots are available in the queue
	// snapshot the current highest priority thread
	tcb *current_thread = run_queue[0];
     6a0:	00800074 	movhi	r2,1
     6a4:	10a35c04 	addi	r2,r2,-29328
     6a8:	10800017 	ldw	r2,0(r2)
     6ac:	e0bfff15 	stw	r2,-4(fp)
	if (current_thread == NULL)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1004c03a 	cmpne	r2,r2,zero
     6b8:	1000041e 	bne	r2,zero,6cc <prioritize_queue+0x3c>
	{
		alt_printf("run queue is empty");
     6bc:	01000034 	movhi	r4,0
     6c0:	21160504 	addi	r4,r4,22548
     6c4:	0001a000 	call	1a00 <alt_printf>
		return;
     6c8:	00003406 	br	79c <prioritize_queue+0x10c>
	}
	int i;
	int flag = 0;
     6cc:	e03ffd15 	stw	zero,-12(fp)
	for(i = 0; i < NUM_THREADS-1; i++)
     6d0:	e03ffe15 	stw	zero,-8(fp)
     6d4:	00002706 	br	774 <prioritize_queue+0xe4>
	{
		// the rest of the queue is empty slots
		if (run_queue[i] == NULL)
     6d8:	e0bffe17 	ldw	r2,-8(fp)
     6dc:	00c00074 	movhi	r3,1
     6e0:	18e35c04 	addi	r3,r3,-29328
     6e4:	1085883a 	add	r2,r2,r2
     6e8:	1085883a 	add	r2,r2,r2
     6ec:	10c5883a 	add	r2,r2,r3
     6f0:	10800017 	ldw	r2,0(r2)
     6f4:	1004c03a 	cmpne	r2,r2,zero
     6f8:	10000c1e 	bne	r2,zero,72c <prioritize_queue+0x9c>
		{
			// insert the former highest priority thread at the back of the queue
			run_queue[i-1] = current_thread;
     6fc:	e0bffe17 	ldw	r2,-8(fp)
     700:	10bfffc4 	addi	r2,r2,-1
     704:	00c00074 	movhi	r3,1
     708:	18e35c04 	addi	r3,r3,-29328
     70c:	1085883a 	add	r2,r2,r2
     710:	1085883a 	add	r2,r2,r2
     714:	10c7883a 	add	r3,r2,r3
     718:	e0bfff17 	ldw	r2,-4(fp)
     71c:	18800015 	stw	r2,0(r3)
			flag = 1;
     720:	00800044 	movi	r2,1
     724:	e0bffd15 	stw	r2,-12(fp)
			break;
     728:	00001506 	br	780 <prioritize_queue+0xf0>
		}
		run_queue[i] = run_queue[i+1];
     72c:	e17ffe17 	ldw	r5,-8(fp)
     730:	e0bffe17 	ldw	r2,-8(fp)
     734:	10800044 	addi	r2,r2,1
     738:	00c00074 	movhi	r3,1
     73c:	18e35c04 	addi	r3,r3,-29328
     740:	1085883a 	add	r2,r2,r2
     744:	1085883a 	add	r2,r2,r2
     748:	10c5883a 	add	r2,r2,r3
     74c:	11000017 	ldw	r4,0(r2)
     750:	00c00074 	movhi	r3,1
     754:	18e35c04 	addi	r3,r3,-29328
     758:	2945883a 	add	r2,r5,r5
     75c:	1085883a 	add	r2,r2,r2
     760:	10c5883a 	add	r2,r2,r3
     764:	11000015 	stw	r4,0(r2)
		alt_printf("run queue is empty");
		return;
	}
	int i;
	int flag = 0;
	for(i = 0; i < NUM_THREADS-1; i++)
     768:	e0bffe17 	ldw	r2,-8(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffe15 	stw	r2,-8(fp)
     774:	e0bffe17 	ldw	r2,-8(fp)
     778:	108002d0 	cmplti	r2,r2,11
     77c:	103fd61e 	bne	r2,zero,6d8 <prioritize_queue+0x48>
			flag = 1;
			break;
		}
		run_queue[i] = run_queue[i+1];
	}
	if (!flag)
     780:	e0bffd17 	ldw	r2,-12(fp)
     784:	1004c03a 	cmpne	r2,r2,zero
     788:	1000041e 	bne	r2,zero,79c <prioritize_queue+0x10c>
	{
		// insert the former highest priority thread at the back of the queue
		run_queue[NUM_THREADS-2] = current_thread;
     78c:	00c00074 	movhi	r3,1
     790:	18e35c04 	addi	r3,r3,-29328
     794:	e0bfff17 	ldw	r2,-4(fp)
     798:	18800a15 	stw	r2,40(r3)
	}
}
     79c:	e037883a 	mov	sp,fp
     7a0:	dfc00117 	ldw	ra,4(sp)
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00204 	addi	sp,sp,8
     7ac:	f800283a 	ret

000007b0 <prototype_os>:

void prototype_os()
{
     7b0:	defffc04 	addi	sp,sp,-16
     7b4:	dfc00315 	stw	ra,12(sp)
     7b8:	df000215 	stw	fp,8(sp)
     7bc:	df000204 	addi	fp,sp,8
	run_queue_count = 0;
     7c0:	d026a215 	stw	zero,-25976(gp)
	int i;
	// create new threads; set their function to execute to mythread
	for (i = 0; i < NUM_THREADS; i++)
     7c4:	e03fff15 	stw	zero,-4(fp)
     7c8:	00000606 	br	7e4 <prototype_os+0x34>
	{
		tcb *new_thread;
		thread_create(i, new_thread);
     7cc:	e13fff17 	ldw	r4,-4(fp)
     7d0:	e17ffe17 	ldw	r5,-8(fp)
     7d4:	00002e80 	call	2e8 <thread_create>
void prototype_os()
{
	run_queue_count = 0;
	int i;
	// create new threads; set their function to execute to mythread
	for (i = 0; i < NUM_THREADS; i++)
     7d8:	e0bfff17 	ldw	r2,-4(fp)
     7dc:	10800044 	addi	r2,r2,1
     7e0:	e0bfff15 	stw	r2,-4(fp)
     7e4:	e0bfff17 	ldw	r2,-4(fp)
     7e8:	10800310 	cmplti	r2,r2,12
     7ec:	103ff71e 	bne	r2,zero,7cc <prototype_os+0x1c>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     7f0:	00800074 	movhi	r2,1
     7f4:	10a34f04 	addi	r2,r2,-29380
     7f8:	10800017 	ldw	r2,0(r2)
     7fc:	100b883a 	mov	r5,r2
		tcb *new_thread;
		thread_create(i, new_thread);
	}
	
	// initialize the alarm to interrupt after 1 second and set the alarm's callback function
	alt_alarm_start(&alarm, alt_ticks_per_second(), interrupt_handler, NULL);
     800:	01000074 	movhi	r4,1
     804:	21236804 	addi	r4,r4,-29280
     808:	01800034 	movhi	r6,0
     80c:	31822204 	addi	r6,r6,2184
     810:	000f883a 	mov	r7,zero
     814:	00017140 	call	1714 <alt_alarm_start>
	//enable_interrupts();

	// join all threads on main (main paused until all threads finish)
	for (i = 0; i < NUM_THREADS; i++)
     818:	e03fff15 	stw	zero,-4(fp)
     81c:	00000b06 	br	84c <prototype_os+0x9c>
	{
		thread_join(run_queue[i]);
     820:	e0bfff17 	ldw	r2,-4(fp)
     824:	00c00074 	movhi	r3,1
     828:	18e35c04 	addi	r3,r3,-29328
     82c:	1085883a 	add	r2,r2,r2
     830:	1085883a 	add	r2,r2,r2
     834:	10c5883a 	add	r2,r2,r3
     838:	11000017 	ldw	r4,0(r2)
     83c:	00003ec0 	call	3ec <thread_join>
	// initialize the alarm to interrupt after 1 second and set the alarm's callback function
	alt_alarm_start(&alarm, alt_ticks_per_second(), interrupt_handler, NULL);
	//enable_interrupts();

	// join all threads on main (main paused until all threads finish)
	for (i = 0; i < NUM_THREADS; i++)
     840:	e0bfff17 	ldw	r2,-4(fp)
     844:	10800044 	addi	r2,r2,1
     848:	e0bfff15 	stw	r2,-4(fp)
     84c:	e0bfff17 	ldw	r2,-4(fp)
     850:	10800310 	cmplti	r2,r2,12
     854:	103ff21e 	bne	r2,zero,820 <prototype_os+0x70>
	}

	// loop endlessly
	while(1)
	{
		alt_printf("Hello from uOS!\n");
     858:	01000034 	movhi	r4,0
     85c:	21160a04 	addi	r4,r4,22568
     860:	0001a000 	call	1a00 <alt_printf>

		// loop; will be interrupted
		for (i = 0; i < 10000; i++);
     864:	e03fff15 	stw	zero,-4(fp)
     868:	00000306 	br	878 <prototype_os+0xc8>
     86c:	e0bfff17 	ldw	r2,-4(fp)
     870:	10800044 	addi	r2,r2,1
     874:	e0bfff15 	stw	r2,-4(fp)
     878:	e0bfff17 	ldw	r2,-4(fp)
     87c:	1089c410 	cmplti	r2,r2,10000
     880:	103ffa1e 	bne	r2,zero,86c <prototype_os+0xbc>
	}
     884:	003ff406 	br	858 <prototype_os+0xa8>

00000888 <interrupt_handler>:
}

alt_u32 interrupt_handler(void* context)
{
     888:	defffd04 	addi	sp,sp,-12
     88c:	dfc00215 	stw	ra,8(sp)
     890:	df000115 	stw	fp,4(sp)
     894:	df000104 	addi	fp,sp,4
     898:	e13fff15 	stw	r4,-4(fp)
	alt_printf("Interrupted by timer!\n");
     89c:	01000034 	movhi	r4,0
     8a0:	21160f04 	addi	r4,r4,22588
     8a4:	0001a000 	call	1a00 <alt_printf>
	// schedule new thread
	if (run_queue_count > 0) // TODO do we have to do this?
     8a8:	d0a6a217 	ldw	r2,-25976(gp)
     8ac:	10800050 	cmplti	r2,r2,1
     8b0:	1000021e 	bne	r2,zero,8bc <interrupt_handler+0x34>
	{
		global_flag = 1;
     8b4:	00800044 	movi	r2,1
     8b8:	d0a6a015 	stw	r2,-25984(gp)
     8bc:	00800074 	movhi	r2,1
     8c0:	10a34f04 	addi	r2,r2,-29380
     8c4:	10800017 	ldw	r2,0(r2)
     8c8:	1009883a 	mov	r4,r2
	}
	// reset the alarm to interrupt next in 0.5 seconds
	return ALARMTICKS(5);
     8cc:	01400144 	movi	r5,5
     8d0:	0000ac40 	call	ac4 <__mulsi3>
     8d4:	1009883a 	mov	r4,r2
     8d8:	01400284 	movi	r5,10
     8dc:	0000ab40 	call	ab4 <__udivsi3>
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <reset_global_flag>:

void reset_global_flag()
{
     8f4:	deffff04 	addi	sp,sp,-4
     8f8:	df000015 	stw	fp,0(sp)
     8fc:	d839883a 	mov	fp,sp
	global_flag = 0;
     900:	d026a015 	stw	zero,-25984(gp)
}
     904:	e037883a 	mov	sp,fp
     908:	df000017 	ldw	fp,0(sp)
     90c:	dec00104 	addi	sp,sp,4
     910:	f800283a 	ret

00000914 <get_global_flag>:

int get_global_flag()
{
     914:	deffff04 	addi	sp,sp,-4
     918:	df000015 	stw	fp,0(sp)
     91c:	d839883a 	mov	fp,sp
	return global_flag;
     920:	d0a6a017 	ldw	r2,-25984(gp)
}
     924:	e037883a 	mov	sp,fp
     928:	df000017 	ldw	fp,0(sp)
     92c:	dec00104 	addi	sp,sp,4
     930:	f800283a 	ret

00000934 <disable_interrupts>:

void disable_interrupts()
{
     934:	deffff04 	addi	sp,sp,-4
     938:	df000015 	stw	fp,0(sp)
     93c:	d839883a 	mov	fp,sp
	asm("wrctl status, zero");
     940:	0001703a 	wrctl	status,zero
}
     944:	e037883a 	mov	sp,fp
     948:	df000017 	ldw	fp,0(sp)
     94c:	dec00104 	addi	sp,sp,4
     950:	f800283a 	ret

00000954 <enable_interrupts>:

void enable_interrupts()
{
     954:	deffff04 	addi	sp,sp,-4
     958:	df000015 	stw	fp,0(sp)
     95c:	d839883a 	mov	fp,sp
	asm("movi et, 1");
     960:	06000044 	movi	et,1
	asm("wrctl status, et");
     964:	c001703a 	wrctl	status,et
}
     968:	e037883a 	mov	sp,fp
     96c:	df000017 	ldw	fp,0(sp)
     970:	dec00104 	addi	sp,sp,4
     974:	f800283a 	ret

00000978 <udivmodsi4>:
     978:	29001b2e 	bgeu	r5,r4,9e8 <udivmodsi4+0x70>
     97c:	28001a16 	blt	r5,zero,9e8 <udivmodsi4+0x70>
     980:	00800044 	movi	r2,1
     984:	0007883a 	mov	r3,zero
     988:	01c007c4 	movi	r7,31
     98c:	00000306 	br	99c <udivmodsi4+0x24>
     990:	19c01326 	beq	r3,r7,9e0 <udivmodsi4+0x68>
     994:	18c00044 	addi	r3,r3,1
     998:	28000416 	blt	r5,zero,9ac <udivmodsi4+0x34>
     99c:	294b883a 	add	r5,r5,r5
     9a0:	1085883a 	add	r2,r2,r2
     9a4:	293ffa36 	bltu	r5,r4,990 <udivmodsi4+0x18>
     9a8:	10000d26 	beq	r2,zero,9e0 <udivmodsi4+0x68>
     9ac:	0007883a 	mov	r3,zero
     9b0:	21400236 	bltu	r4,r5,9bc <udivmodsi4+0x44>
     9b4:	2149c83a 	sub	r4,r4,r5
     9b8:	1886b03a 	or	r3,r3,r2
     9bc:	1004d07a 	srli	r2,r2,1
     9c0:	280ad07a 	srli	r5,r5,1
     9c4:	103ffa1e 	bne	r2,zero,9b0 <udivmodsi4+0x38>
     9c8:	30000226 	beq	r6,zero,9d4 <udivmodsi4+0x5c>
     9cc:	2005883a 	mov	r2,r4
     9d0:	f800283a 	ret
     9d4:	1809883a 	mov	r4,r3
     9d8:	2005883a 	mov	r2,r4
     9dc:	f800283a 	ret
     9e0:	0007883a 	mov	r3,zero
     9e4:	003ff806 	br	9c8 <udivmodsi4+0x50>
     9e8:	00800044 	movi	r2,1
     9ec:	0007883a 	mov	r3,zero
     9f0:	003fef06 	br	9b0 <udivmodsi4+0x38>

000009f4 <__divsi3>:
     9f4:	defffe04 	addi	sp,sp,-8
     9f8:	dc000015 	stw	r16,0(sp)
     9fc:	dfc00115 	stw	ra,4(sp)
     a00:	0021883a 	mov	r16,zero
     a04:	20000c16 	blt	r4,zero,a38 <__divsi3+0x44>
     a08:	000d883a 	mov	r6,zero
     a0c:	28000e16 	blt	r5,zero,a48 <__divsi3+0x54>
     a10:	00009780 	call	978 <udivmodsi4>
     a14:	1007883a 	mov	r3,r2
     a18:	8005003a 	cmpeq	r2,r16,zero
     a1c:	1000011e 	bne	r2,zero,a24 <__divsi3+0x30>
     a20:	00c7c83a 	sub	r3,zero,r3
     a24:	1805883a 	mov	r2,r3
     a28:	dfc00117 	ldw	ra,4(sp)
     a2c:	dc000017 	ldw	r16,0(sp)
     a30:	dec00204 	addi	sp,sp,8
     a34:	f800283a 	ret
     a38:	0109c83a 	sub	r4,zero,r4
     a3c:	04000044 	movi	r16,1
     a40:	000d883a 	mov	r6,zero
     a44:	283ff20e 	bge	r5,zero,a10 <__divsi3+0x1c>
     a48:	014bc83a 	sub	r5,zero,r5
     a4c:	8021003a 	cmpeq	r16,r16,zero
     a50:	003fef06 	br	a10 <__divsi3+0x1c>

00000a54 <__modsi3>:
     a54:	deffff04 	addi	sp,sp,-4
     a58:	dfc00015 	stw	ra,0(sp)
     a5c:	01800044 	movi	r6,1
     a60:	2807883a 	mov	r3,r5
     a64:	20000416 	blt	r4,zero,a78 <__modsi3+0x24>
     a68:	28000c16 	blt	r5,zero,a9c <__modsi3+0x48>
     a6c:	dfc00017 	ldw	ra,0(sp)
     a70:	dec00104 	addi	sp,sp,4
     a74:	00009781 	jmpi	978 <udivmodsi4>
     a78:	0109c83a 	sub	r4,zero,r4
     a7c:	28000b16 	blt	r5,zero,aac <__modsi3+0x58>
     a80:	180b883a 	mov	r5,r3
     a84:	01800044 	movi	r6,1
     a88:	00009780 	call	978 <udivmodsi4>
     a8c:	0085c83a 	sub	r2,zero,r2
     a90:	dfc00017 	ldw	ra,0(sp)
     a94:	dec00104 	addi	sp,sp,4
     a98:	f800283a 	ret
     a9c:	014bc83a 	sub	r5,zero,r5
     aa0:	dfc00017 	ldw	ra,0(sp)
     aa4:	dec00104 	addi	sp,sp,4
     aa8:	00009781 	jmpi	978 <udivmodsi4>
     aac:	0147c83a 	sub	r3,zero,r5
     ab0:	003ff306 	br	a80 <__modsi3+0x2c>

00000ab4 <__udivsi3>:
     ab4:	000d883a 	mov	r6,zero
     ab8:	00009781 	jmpi	978 <udivmodsi4>

00000abc <__umodsi3>:
     abc:	01800044 	movi	r6,1
     ac0:	00009781 	jmpi	978 <udivmodsi4>

00000ac4 <__mulsi3>:
     ac4:	20000a26 	beq	r4,zero,af0 <__mulsi3+0x2c>
     ac8:	0007883a 	mov	r3,zero
     acc:	2080004c 	andi	r2,r4,1
     ad0:	1005003a 	cmpeq	r2,r2,zero
     ad4:	2008d07a 	srli	r4,r4,1
     ad8:	1000011e 	bne	r2,zero,ae0 <__mulsi3+0x1c>
     adc:	1947883a 	add	r3,r3,r5
     ae0:	294b883a 	add	r5,r5,r5
     ae4:	203ff91e 	bne	r4,zero,acc <__mulsi3+0x8>
     ae8:	1805883a 	mov	r2,r3
     aec:	f800283a 	ret
     af0:	0007883a 	mov	r3,zero
     af4:	1805883a 	mov	r2,r3
     af8:	f800283a 	ret

00000afc <free>:
     afc:	00800034 	movhi	r2,0
     b00:	109ca704 	addi	r2,r2,29340
     b04:	200b883a 	mov	r5,r4
     b08:	11000017 	ldw	r4,0(r2)
     b0c:	00014001 	jmpi	1400 <_free_r>

00000b10 <malloc>:
     b10:	00800034 	movhi	r2,0
     b14:	109ca704 	addi	r2,r2,29340
     b18:	200b883a 	mov	r5,r4
     b1c:	11000017 	ldw	r4,0(r2)
     b20:	0000b241 	jmpi	b24 <_malloc_r>

00000b24 <_malloc_r>:
     b24:	defff604 	addi	sp,sp,-40
     b28:	28c002c4 	addi	r3,r5,11
     b2c:	00800584 	movi	r2,22
     b30:	dc800215 	stw	r18,8(sp)
     b34:	dfc00915 	stw	ra,36(sp)
     b38:	df000815 	stw	fp,32(sp)
     b3c:	ddc00715 	stw	r23,28(sp)
     b40:	dd800615 	stw	r22,24(sp)
     b44:	dd400515 	stw	r21,20(sp)
     b48:	dd000415 	stw	r20,16(sp)
     b4c:	dcc00315 	stw	r19,12(sp)
     b50:	dc400115 	stw	r17,4(sp)
     b54:	dc000015 	stw	r16,0(sp)
     b58:	2025883a 	mov	r18,r4
     b5c:	10c01236 	bltu	r2,r3,ba8 <_malloc_r+0x84>
     b60:	04400404 	movi	r17,16
     b64:	8940142e 	bgeu	r17,r5,bb8 <_malloc_r+0x94>
     b68:	00800304 	movi	r2,12
     b6c:	0007883a 	mov	r3,zero
     b70:	90800015 	stw	r2,0(r18)
     b74:	1805883a 	mov	r2,r3
     b78:	dfc00917 	ldw	ra,36(sp)
     b7c:	df000817 	ldw	fp,32(sp)
     b80:	ddc00717 	ldw	r23,28(sp)
     b84:	dd800617 	ldw	r22,24(sp)
     b88:	dd400517 	ldw	r21,20(sp)
     b8c:	dd000417 	ldw	r20,16(sp)
     b90:	dcc00317 	ldw	r19,12(sp)
     b94:	dc800217 	ldw	r18,8(sp)
     b98:	dc400117 	ldw	r17,4(sp)
     b9c:	dc000017 	ldw	r16,0(sp)
     ba0:	dec00a04 	addi	sp,sp,40
     ba4:	f800283a 	ret
     ba8:	00bffe04 	movi	r2,-8
     bac:	18a2703a 	and	r17,r3,r2
     bb0:	883fed16 	blt	r17,zero,b68 <_malloc_r+0x44>
     bb4:	897fec36 	bltu	r17,r5,b68 <_malloc_r+0x44>
     bb8:	9009883a 	mov	r4,r18
     bbc:	00019c00 	call	19c0 <__malloc_lock>
     bc0:	00807dc4 	movi	r2,503
     bc4:	14402b2e 	bgeu	r2,r17,c74 <_malloc_r+0x150>
     bc8:	8806d27a 	srli	r3,r17,9
     bcc:	18003f1e 	bne	r3,zero,ccc <_malloc_r+0x1a8>
     bd0:	880cd0fa 	srli	r6,r17,3
     bd4:	300490fa 	slli	r2,r6,3
     bd8:	02c00034 	movhi	r11,0
     bdc:	5ad62104 	addi	r11,r11,22660
     be0:	12cb883a 	add	r5,r2,r11
     be4:	2c000317 	ldw	r16,12(r5)
     be8:	580f883a 	mov	r7,r11
     bec:	2c00041e 	bne	r5,r16,c00 <_malloc_r+0xdc>
     bf0:	00000a06 	br	c1c <_malloc_r+0xf8>
     bf4:	1800860e 	bge	r3,zero,e10 <_malloc_r+0x2ec>
     bf8:	84000317 	ldw	r16,12(r16)
     bfc:	2c000726 	beq	r5,r16,c1c <_malloc_r+0xf8>
     c00:	80800117 	ldw	r2,4(r16)
     c04:	00ffff04 	movi	r3,-4
     c08:	10c8703a 	and	r4,r2,r3
     c0c:	2447c83a 	sub	r3,r4,r17
     c10:	008003c4 	movi	r2,15
     c14:	10fff70e 	bge	r2,r3,bf4 <_malloc_r+0xd0>
     c18:	31bfffc4 	addi	r6,r6,-1
     c1c:	32400044 	addi	r9,r6,1
     c20:	02800034 	movhi	r10,0
     c24:	52962304 	addi	r10,r10,22668
     c28:	54000217 	ldw	r16,8(r10)
     c2c:	8280a026 	beq	r16,r10,eb0 <_malloc_r+0x38c>
     c30:	80800117 	ldw	r2,4(r16)
     c34:	00ffff04 	movi	r3,-4
     c38:	10ca703a 	and	r5,r2,r3
     c3c:	2c4dc83a 	sub	r6,r5,r17
     c40:	008003c4 	movi	r2,15
     c44:	11808316 	blt	r2,r6,e54 <_malloc_r+0x330>
     c48:	52800315 	stw	r10,12(r10)
     c4c:	52800215 	stw	r10,8(r10)
     c50:	30002916 	blt	r6,zero,cf8 <_malloc_r+0x1d4>
     c54:	8147883a 	add	r3,r16,r5
     c58:	18800117 	ldw	r2,4(r3)
     c5c:	9009883a 	mov	r4,r18
     c60:	10800054 	ori	r2,r2,1
     c64:	18800115 	stw	r2,4(r3)
     c68:	00019e00 	call	19e0 <__malloc_unlock>
     c6c:	80c00204 	addi	r3,r16,8
     c70:	003fc006 	br	b74 <_malloc_r+0x50>
     c74:	02c00034 	movhi	r11,0
     c78:	5ad62104 	addi	r11,r11,22660
     c7c:	8ac5883a 	add	r2,r17,r11
     c80:	14000317 	ldw	r16,12(r2)
     c84:	580f883a 	mov	r7,r11
     c88:	8806d0fa 	srli	r3,r17,3
     c8c:	14006c26 	beq	r2,r16,e40 <_malloc_r+0x31c>
     c90:	80c00117 	ldw	r3,4(r16)
     c94:	00bfff04 	movi	r2,-4
     c98:	81800317 	ldw	r6,12(r16)
     c9c:	1886703a 	and	r3,r3,r2
     ca0:	80c7883a 	add	r3,r16,r3
     ca4:	18800117 	ldw	r2,4(r3)
     ca8:	81400217 	ldw	r5,8(r16)
     cac:	9009883a 	mov	r4,r18
     cb0:	10800054 	ori	r2,r2,1
     cb4:	18800115 	stw	r2,4(r3)
     cb8:	31400215 	stw	r5,8(r6)
     cbc:	29800315 	stw	r6,12(r5)
     cc0:	00019e00 	call	19e0 <__malloc_unlock>
     cc4:	80c00204 	addi	r3,r16,8
     cc8:	003faa06 	br	b74 <_malloc_r+0x50>
     ccc:	00800104 	movi	r2,4
     cd0:	10c0052e 	bgeu	r2,r3,ce8 <_malloc_r+0x1c4>
     cd4:	00800504 	movi	r2,20
     cd8:	10c07836 	bltu	r2,r3,ebc <_malloc_r+0x398>
     cdc:	198016c4 	addi	r6,r3,91
     ce0:	300490fa 	slli	r2,r6,3
     ce4:	003fbc06 	br	bd8 <_malloc_r+0xb4>
     ce8:	8804d1ba 	srli	r2,r17,6
     cec:	11800e04 	addi	r6,r2,56
     cf0:	300490fa 	slli	r2,r6,3
     cf4:	003fb806 	br	bd8 <_malloc_r+0xb4>
     cf8:	00807fc4 	movi	r2,511
     cfc:	1140bb36 	bltu	r2,r5,fec <_malloc_r+0x4c8>
     d00:	2806d0fa 	srli	r3,r5,3
     d04:	573ffe04 	addi	fp,r10,-8
     d08:	00800044 	movi	r2,1
     d0c:	180890fa 	slli	r4,r3,3
     d10:	1807d0ba 	srai	r3,r3,2
     d14:	e1c00117 	ldw	r7,4(fp)
     d18:	5909883a 	add	r4,r11,r4
     d1c:	21400217 	ldw	r5,8(r4)
     d20:	10c4983a 	sll	r2,r2,r3
     d24:	81000315 	stw	r4,12(r16)
     d28:	81400215 	stw	r5,8(r16)
     d2c:	388eb03a 	or	r7,r7,r2
     d30:	2c000315 	stw	r16,12(r5)
     d34:	24000215 	stw	r16,8(r4)
     d38:	e1c00115 	stw	r7,4(fp)
     d3c:	4807883a 	mov	r3,r9
     d40:	4800cd16 	blt	r9,zero,1078 <_malloc_r+0x554>
     d44:	1807d0ba 	srai	r3,r3,2
     d48:	00800044 	movi	r2,1
     d4c:	10c8983a 	sll	r4,r2,r3
     d50:	39004436 	bltu	r7,r4,e64 <_malloc_r+0x340>
     d54:	21c4703a 	and	r2,r4,r7
     d58:	10000a1e 	bne	r2,zero,d84 <_malloc_r+0x260>
     d5c:	2109883a 	add	r4,r4,r4
     d60:	00bfff04 	movi	r2,-4
     d64:	4884703a 	and	r2,r9,r2
     d68:	3906703a 	and	r3,r7,r4
     d6c:	12400104 	addi	r9,r2,4
     d70:	1800041e 	bne	r3,zero,d84 <_malloc_r+0x260>
     d74:	2109883a 	add	r4,r4,r4
     d78:	3904703a 	and	r2,r7,r4
     d7c:	4a400104 	addi	r9,r9,4
     d80:	103ffc26 	beq	r2,zero,d74 <_malloc_r+0x250>
     d84:	480490fa 	slli	r2,r9,3
     d88:	4819883a 	mov	r12,r9
     d8c:	023fff04 	movi	r8,-4
     d90:	589b883a 	add	r13,r11,r2
     d94:	6807883a 	mov	r3,r13
     d98:	014003c4 	movi	r5,15
     d9c:	1c000317 	ldw	r16,12(r3)
     da0:	1c00041e 	bne	r3,r16,db4 <_malloc_r+0x290>
     da4:	0000a706 	br	1044 <_malloc_r+0x520>
     da8:	3000ab0e 	bge	r6,zero,1058 <_malloc_r+0x534>
     dac:	84000317 	ldw	r16,12(r16)
     db0:	1c00a426 	beq	r3,r16,1044 <_malloc_r+0x520>
     db4:	80800117 	ldw	r2,4(r16)
     db8:	1204703a 	and	r2,r2,r8
     dbc:	144dc83a 	sub	r6,r2,r17
     dc0:	29bff90e 	bge	r5,r6,da8 <_malloc_r+0x284>
     dc4:	81000317 	ldw	r4,12(r16)
     dc8:	80c00217 	ldw	r3,8(r16)
     dcc:	89400054 	ori	r5,r17,1
     dd0:	8445883a 	add	r2,r16,r17
     dd4:	20c00215 	stw	r3,8(r4)
     dd8:	19000315 	stw	r4,12(r3)
     ddc:	81400115 	stw	r5,4(r16)
     de0:	1187883a 	add	r3,r2,r6
     de4:	31000054 	ori	r4,r6,1
     de8:	50800315 	stw	r2,12(r10)
     dec:	50800215 	stw	r2,8(r10)
     df0:	19800015 	stw	r6,0(r3)
     df4:	11000115 	stw	r4,4(r2)
     df8:	12800215 	stw	r10,8(r2)
     dfc:	12800315 	stw	r10,12(r2)
     e00:	9009883a 	mov	r4,r18
     e04:	00019e00 	call	19e0 <__malloc_unlock>
     e08:	80c00204 	addi	r3,r16,8
     e0c:	003f5906 	br	b74 <_malloc_r+0x50>
     e10:	8109883a 	add	r4,r16,r4
     e14:	20800117 	ldw	r2,4(r4)
     e18:	80c00217 	ldw	r3,8(r16)
     e1c:	81400317 	ldw	r5,12(r16)
     e20:	10800054 	ori	r2,r2,1
     e24:	20800115 	stw	r2,4(r4)
     e28:	28c00215 	stw	r3,8(r5)
     e2c:	19400315 	stw	r5,12(r3)
     e30:	9009883a 	mov	r4,r18
     e34:	00019e00 	call	19e0 <__malloc_unlock>
     e38:	80c00204 	addi	r3,r16,8
     e3c:	003f4d06 	br	b74 <_malloc_r+0x50>
     e40:	80800204 	addi	r2,r16,8
     e44:	14000317 	ldw	r16,12(r2)
     e48:	143f911e 	bne	r2,r16,c90 <_malloc_r+0x16c>
     e4c:	1a400084 	addi	r9,r3,2
     e50:	003f7306 	br	c20 <_malloc_r+0xfc>
     e54:	88c00054 	ori	r3,r17,1
     e58:	8445883a 	add	r2,r16,r17
     e5c:	80c00115 	stw	r3,4(r16)
     e60:	003fdf06 	br	de0 <_malloc_r+0x2bc>
     e64:	e4000217 	ldw	r16,8(fp)
     e68:	00bfff04 	movi	r2,-4
     e6c:	80c00117 	ldw	r3,4(r16)
     e70:	802d883a 	mov	r22,r16
     e74:	18aa703a 	and	r21,r3,r2
     e78:	ac401636 	bltu	r21,r17,ed4 <_malloc_r+0x3b0>
     e7c:	ac49c83a 	sub	r4,r21,r17
     e80:	008003c4 	movi	r2,15
     e84:	1100130e 	bge	r2,r4,ed4 <_malloc_r+0x3b0>
     e88:	88800054 	ori	r2,r17,1
     e8c:	8447883a 	add	r3,r16,r17
     e90:	80800115 	stw	r2,4(r16)
     e94:	20800054 	ori	r2,r4,1
     e98:	18800115 	stw	r2,4(r3)
     e9c:	e0c00215 	stw	r3,8(fp)
     ea0:	9009883a 	mov	r4,r18
     ea4:	00019e00 	call	19e0 <__malloc_unlock>
     ea8:	80c00204 	addi	r3,r16,8
     eac:	003f3106 	br	b74 <_malloc_r+0x50>
     eb0:	39c00117 	ldw	r7,4(r7)
     eb4:	573ffe04 	addi	fp,r10,-8
     eb8:	003fa006 	br	d3c <_malloc_r+0x218>
     ebc:	00801504 	movi	r2,84
     ec0:	10c06736 	bltu	r2,r3,1060 <_malloc_r+0x53c>
     ec4:	8804d33a 	srli	r2,r17,12
     ec8:	11801b84 	addi	r6,r2,110
     ecc:	300490fa 	slli	r2,r6,3
     ed0:	003f4106 	br	bd8 <_malloc_r+0xb4>
     ed4:	d0a6a317 	ldw	r2,-25972(gp)
     ed8:	d0e00117 	ldw	r3,-32764(gp)
     edc:	053fffc4 	movi	r20,-1
     ee0:	10800404 	addi	r2,r2,16
     ee4:	88a7883a 	add	r19,r17,r2
     ee8:	1d000326 	beq	r3,r20,ef8 <_malloc_r+0x3d4>
     eec:	98c3ffc4 	addi	r3,r19,4095
     ef0:	00bc0004 	movi	r2,-4096
     ef4:	18a6703a 	and	r19,r3,r2
     ef8:	9009883a 	mov	r4,r18
     efc:	980b883a 	mov	r5,r19
     f00:	00012640 	call	1264 <_sbrk_r>
     f04:	1009883a 	mov	r4,r2
     f08:	15000426 	beq	r2,r20,f1c <_malloc_r+0x3f8>
     f0c:	854b883a 	add	r5,r16,r21
     f10:	1029883a 	mov	r20,r2
     f14:	11405a2e 	bgeu	r2,r5,1080 <_malloc_r+0x55c>
     f18:	87000c26 	beq	r16,fp,f4c <_malloc_r+0x428>
     f1c:	e4000217 	ldw	r16,8(fp)
     f20:	80c00117 	ldw	r3,4(r16)
     f24:	00bfff04 	movi	r2,-4
     f28:	1884703a 	and	r2,r3,r2
     f2c:	14400336 	bltu	r2,r17,f3c <_malloc_r+0x418>
     f30:	1449c83a 	sub	r4,r2,r17
     f34:	008003c4 	movi	r2,15
     f38:	113fd316 	blt	r2,r4,e88 <_malloc_r+0x364>
     f3c:	9009883a 	mov	r4,r18
     f40:	00019e00 	call	19e0 <__malloc_unlock>
     f44:	0007883a 	mov	r3,zero
     f48:	003f0a06 	br	b74 <_malloc_r+0x50>
     f4c:	05c00074 	movhi	r23,1
     f50:	bde35204 	addi	r23,r23,-29368
     f54:	b8800017 	ldw	r2,0(r23)
     f58:	988d883a 	add	r6,r19,r2
     f5c:	b9800015 	stw	r6,0(r23)
     f60:	d0e00117 	ldw	r3,-32764(gp)
     f64:	00bfffc4 	movi	r2,-1
     f68:	18808e26 	beq	r3,r2,11a4 <_malloc_r+0x680>
     f6c:	2145c83a 	sub	r2,r4,r5
     f70:	3085883a 	add	r2,r6,r2
     f74:	b8800015 	stw	r2,0(r23)
     f78:	20c001cc 	andi	r3,r4,7
     f7c:	18005f1e 	bne	r3,zero,10fc <_malloc_r+0x5d8>
     f80:	000b883a 	mov	r5,zero
     f84:	a4c5883a 	add	r2,r20,r19
     f88:	1083ffcc 	andi	r2,r2,4095
     f8c:	00c40004 	movi	r3,4096
     f90:	1887c83a 	sub	r3,r3,r2
     f94:	28e7883a 	add	r19,r5,r3
     f98:	9009883a 	mov	r4,r18
     f9c:	980b883a 	mov	r5,r19
     fa0:	00012640 	call	1264 <_sbrk_r>
     fa4:	1007883a 	mov	r3,r2
     fa8:	00bfffc4 	movi	r2,-1
     fac:	18807a26 	beq	r3,r2,1198 <_malloc_r+0x674>
     fb0:	1d05c83a 	sub	r2,r3,r20
     fb4:	9885883a 	add	r2,r19,r2
     fb8:	10c00054 	ori	r3,r2,1
     fbc:	b8800017 	ldw	r2,0(r23)
     fc0:	a021883a 	mov	r16,r20
     fc4:	a0c00115 	stw	r3,4(r20)
     fc8:	9885883a 	add	r2,r19,r2
     fcc:	b8800015 	stw	r2,0(r23)
     fd0:	e5000215 	stw	r20,8(fp)
     fd4:	b7003626 	beq	r22,fp,10b0 <_malloc_r+0x58c>
     fd8:	018003c4 	movi	r6,15
     fdc:	35404b36 	bltu	r6,r21,110c <_malloc_r+0x5e8>
     fe0:	00800044 	movi	r2,1
     fe4:	a0800115 	stw	r2,4(r20)
     fe8:	003fcd06 	br	f20 <_malloc_r+0x3fc>
     fec:	2808d27a 	srli	r4,r5,9
     ff0:	2000371e 	bne	r4,zero,10d0 <_malloc_r+0x5ac>
     ff4:	2808d0fa 	srli	r4,r5,3
     ff8:	200690fa 	slli	r3,r4,3
     ffc:	1ad1883a 	add	r8,r3,r11
    1000:	41800217 	ldw	r6,8(r8)
    1004:	41805b26 	beq	r8,r6,1174 <_malloc_r+0x650>
    1008:	30800117 	ldw	r2,4(r6)
    100c:	00ffff04 	movi	r3,-4
    1010:	10c4703a 	and	r2,r2,r3
    1014:	2880022e 	bgeu	r5,r2,1020 <_malloc_r+0x4fc>
    1018:	31800217 	ldw	r6,8(r6)
    101c:	41bffa1e 	bne	r8,r6,1008 <_malloc_r+0x4e4>
    1020:	32000317 	ldw	r8,12(r6)
    1024:	39c00117 	ldw	r7,4(r7)
    1028:	82000315 	stw	r8,12(r16)
    102c:	81800215 	stw	r6,8(r16)
    1030:	07000034 	movhi	fp,0
    1034:	e7162104 	addi	fp,fp,22660
    1038:	34000315 	stw	r16,12(r6)
    103c:	44000215 	stw	r16,8(r8)
    1040:	003f3e06 	br	d3c <_malloc_r+0x218>
    1044:	63000044 	addi	r12,r12,1
    1048:	608000cc 	andi	r2,r12,3
    104c:	10005d26 	beq	r2,zero,11c4 <_malloc_r+0x6a0>
    1050:	18c00204 	addi	r3,r3,8
    1054:	003f5106 	br	d9c <_malloc_r+0x278>
    1058:	8089883a 	add	r4,r16,r2
    105c:	003f6d06 	br	e14 <_malloc_r+0x2f0>
    1060:	00805504 	movi	r2,340
    1064:	10c02036 	bltu	r2,r3,10e8 <_malloc_r+0x5c4>
    1068:	8804d3fa 	srli	r2,r17,15
    106c:	11801dc4 	addi	r6,r2,119
    1070:	300490fa 	slli	r2,r6,3
    1074:	003ed806 	br	bd8 <_malloc_r+0xb4>
    1078:	48c000c4 	addi	r3,r9,3
    107c:	003f3106 	br	d44 <_malloc_r+0x220>
    1080:	05c00074 	movhi	r23,1
    1084:	bde35204 	addi	r23,r23,-29368
    1088:	b8800017 	ldw	r2,0(r23)
    108c:	988d883a 	add	r6,r19,r2
    1090:	b9800015 	stw	r6,0(r23)
    1094:	293fb21e 	bne	r5,r4,f60 <_malloc_r+0x43c>
    1098:	2083ffcc 	andi	r2,r4,4095
    109c:	103fb01e 	bne	r2,zero,f60 <_malloc_r+0x43c>
    10a0:	e4000217 	ldw	r16,8(fp)
    10a4:	9d45883a 	add	r2,r19,r21
    10a8:	10800054 	ori	r2,r2,1
    10ac:	80800115 	stw	r2,4(r16)
    10b0:	b8c00017 	ldw	r3,0(r23)
    10b4:	d0a6a417 	ldw	r2,-25968(gp)
    10b8:	10c0012e 	bgeu	r2,r3,10c0 <_malloc_r+0x59c>
    10bc:	d0e6a415 	stw	r3,-25968(gp)
    10c0:	d0a6a517 	ldw	r2,-25964(gp)
    10c4:	10ff962e 	bgeu	r2,r3,f20 <_malloc_r+0x3fc>
    10c8:	d0e6a515 	stw	r3,-25964(gp)
    10cc:	003f9406 	br	f20 <_malloc_r+0x3fc>
    10d0:	00800104 	movi	r2,4
    10d4:	11001e36 	bltu	r2,r4,1150 <_malloc_r+0x62c>
    10d8:	2804d1ba 	srli	r2,r5,6
    10dc:	11000e04 	addi	r4,r2,56
    10e0:	200690fa 	slli	r3,r4,3
    10e4:	003fc506 	br	ffc <_malloc_r+0x4d8>
    10e8:	00815504 	movi	r2,1364
    10ec:	10c01d2e 	bgeu	r2,r3,1164 <_malloc_r+0x640>
    10f0:	01801f84 	movi	r6,126
    10f4:	0080fc04 	movi	r2,1008
    10f8:	003eb706 	br	bd8 <_malloc_r+0xb4>
    10fc:	00800204 	movi	r2,8
    1100:	10cbc83a 	sub	r5,r2,r3
    1104:	2169883a 	add	r20,r4,r5
    1108:	003f9e06 	br	f84 <_malloc_r+0x460>
    110c:	00bffe04 	movi	r2,-8
    1110:	a93ffd04 	addi	r4,r21,-12
    1114:	2088703a 	and	r4,r4,r2
    1118:	b10b883a 	add	r5,r22,r4
    111c:	00c00144 	movi	r3,5
    1120:	28c00215 	stw	r3,8(r5)
    1124:	28c00115 	stw	r3,4(r5)
    1128:	b0800117 	ldw	r2,4(r22)
    112c:	1080004c 	andi	r2,r2,1
    1130:	2084b03a 	or	r2,r4,r2
    1134:	b0800115 	stw	r2,4(r22)
    1138:	313fdd2e 	bgeu	r6,r4,10b0 <_malloc_r+0x58c>
    113c:	b1400204 	addi	r5,r22,8
    1140:	9009883a 	mov	r4,r18
    1144:	00014000 	call	1400 <_free_r>
    1148:	e4000217 	ldw	r16,8(fp)
    114c:	003fd806 	br	10b0 <_malloc_r+0x58c>
    1150:	00800504 	movi	r2,20
    1154:	11001536 	bltu	r2,r4,11ac <_malloc_r+0x688>
    1158:	210016c4 	addi	r4,r4,91
    115c:	200690fa 	slli	r3,r4,3
    1160:	003fa606 	br	ffc <_malloc_r+0x4d8>
    1164:	8804d4ba 	srli	r2,r17,18
    1168:	11801f04 	addi	r6,r2,124
    116c:	300490fa 	slli	r2,r6,3
    1170:	003e9906 	br	bd8 <_malloc_r+0xb4>
    1174:	2009d0ba 	srai	r4,r4,2
    1178:	01400034 	movhi	r5,0
    117c:	29562104 	addi	r5,r5,22660
    1180:	00c00044 	movi	r3,1
    1184:	28800117 	ldw	r2,4(r5)
    1188:	1906983a 	sll	r3,r3,r4
    118c:	10c4b03a 	or	r2,r2,r3
    1190:	28800115 	stw	r2,4(r5)
    1194:	003fa306 	br	1024 <_malloc_r+0x500>
    1198:	0027883a 	mov	r19,zero
    119c:	00c00044 	movi	r3,1
    11a0:	003f8606 	br	fbc <_malloc_r+0x498>
    11a4:	d1200115 	stw	r4,-32764(gp)
    11a8:	003f7306 	br	f78 <_malloc_r+0x454>
    11ac:	00801504 	movi	r2,84
    11b0:	11001936 	bltu	r2,r4,1218 <_malloc_r+0x6f4>
    11b4:	2804d33a 	srli	r2,r5,12
    11b8:	11001b84 	addi	r4,r2,110
    11bc:	200690fa 	slli	r3,r4,3
    11c0:	003f8e06 	br	ffc <_malloc_r+0x4d8>
    11c4:	480b883a 	mov	r5,r9
    11c8:	6807883a 	mov	r3,r13
    11cc:	288000cc 	andi	r2,r5,3
    11d0:	18fffe04 	addi	r3,r3,-8
    11d4:	297fffc4 	addi	r5,r5,-1
    11d8:	10001526 	beq	r2,zero,1230 <_malloc_r+0x70c>
    11dc:	18800217 	ldw	r2,8(r3)
    11e0:	10fffa26 	beq	r2,r3,11cc <_malloc_r+0x6a8>
    11e4:	2109883a 	add	r4,r4,r4
    11e8:	393f1e36 	bltu	r7,r4,e64 <_malloc_r+0x340>
    11ec:	203f1d26 	beq	r4,zero,e64 <_malloc_r+0x340>
    11f0:	21c4703a 	and	r2,r4,r7
    11f4:	10000226 	beq	r2,zero,1200 <_malloc_r+0x6dc>
    11f8:	6013883a 	mov	r9,r12
    11fc:	003ee106 	br	d84 <_malloc_r+0x260>
    1200:	2109883a 	add	r4,r4,r4
    1204:	3904703a 	and	r2,r7,r4
    1208:	63000104 	addi	r12,r12,4
    120c:	103ffc26 	beq	r2,zero,1200 <_malloc_r+0x6dc>
    1210:	6013883a 	mov	r9,r12
    1214:	003edb06 	br	d84 <_malloc_r+0x260>
    1218:	00805504 	movi	r2,340
    121c:	11000836 	bltu	r2,r4,1240 <_malloc_r+0x71c>
    1220:	2804d3fa 	srli	r2,r5,15
    1224:	11001dc4 	addi	r4,r2,119
    1228:	200690fa 	slli	r3,r4,3
    122c:	003f7306 	br	ffc <_malloc_r+0x4d8>
    1230:	0104303a 	nor	r2,zero,r4
    1234:	388e703a 	and	r7,r7,r2
    1238:	e1c00115 	stw	r7,4(fp)
    123c:	003fe906 	br	11e4 <_malloc_r+0x6c0>
    1240:	00815504 	movi	r2,1364
    1244:	1100032e 	bgeu	r2,r4,1254 <_malloc_r+0x730>
    1248:	01001f84 	movi	r4,126
    124c:	00c0fc04 	movi	r3,1008
    1250:	003f6a06 	br	ffc <_malloc_r+0x4d8>
    1254:	2804d4ba 	srli	r2,r5,18
    1258:	11001f04 	addi	r4,r2,124
    125c:	200690fa 	slli	r3,r4,3
    1260:	003f6606 	br	ffc <_malloc_r+0x4d8>

00001264 <_sbrk_r>:
    1264:	defffd04 	addi	sp,sp,-12
    1268:	dc000015 	stw	r16,0(sp)
    126c:	04000074 	movhi	r16,1
    1270:	84234b04 	addi	r16,r16,-29396
    1274:	dc400115 	stw	r17,4(sp)
    1278:	80000015 	stw	zero,0(r16)
    127c:	2023883a 	mov	r17,r4
    1280:	2809883a 	mov	r4,r5
    1284:	dfc00215 	stw	ra,8(sp)
    1288:	0001c980 	call	1c98 <sbrk>
    128c:	1007883a 	mov	r3,r2
    1290:	00bfffc4 	movi	r2,-1
    1294:	18800626 	beq	r3,r2,12b0 <_sbrk_r+0x4c>
    1298:	1805883a 	mov	r2,r3
    129c:	dfc00217 	ldw	ra,8(sp)
    12a0:	dc400117 	ldw	r17,4(sp)
    12a4:	dc000017 	ldw	r16,0(sp)
    12a8:	dec00304 	addi	sp,sp,12
    12ac:	f800283a 	ret
    12b0:	80800017 	ldw	r2,0(r16)
    12b4:	103ff826 	beq	r2,zero,1298 <_sbrk_r+0x34>
    12b8:	88800015 	stw	r2,0(r17)
    12bc:	1805883a 	mov	r2,r3
    12c0:	dfc00217 	ldw	ra,8(sp)
    12c4:	dc400117 	ldw	r17,4(sp)
    12c8:	dc000017 	ldw	r16,0(sp)
    12cc:	dec00304 	addi	sp,sp,12
    12d0:	f800283a 	ret

000012d4 <_malloc_trim_r>:
    12d4:	defffb04 	addi	sp,sp,-20
    12d8:	dcc00315 	stw	r19,12(sp)
    12dc:	04c00034 	movhi	r19,0
    12e0:	9cd62104 	addi	r19,r19,22660
    12e4:	dc800215 	stw	r18,8(sp)
    12e8:	dc400115 	stw	r17,4(sp)
    12ec:	dc000015 	stw	r16,0(sp)
    12f0:	2823883a 	mov	r17,r5
    12f4:	2025883a 	mov	r18,r4
    12f8:	dfc00415 	stw	ra,16(sp)
    12fc:	00019c00 	call	19c0 <__malloc_lock>
    1300:	98800217 	ldw	r2,8(r19)
    1304:	9009883a 	mov	r4,r18
    1308:	000b883a 	mov	r5,zero
    130c:	10c00117 	ldw	r3,4(r2)
    1310:	00bfff04 	movi	r2,-4
    1314:	18a0703a 	and	r16,r3,r2
    1318:	8463c83a 	sub	r17,r16,r17
    131c:	8c43fbc4 	addi	r17,r17,4079
    1320:	8822d33a 	srli	r17,r17,12
    1324:	0083ffc4 	movi	r2,4095
    1328:	8c7fffc4 	addi	r17,r17,-1
    132c:	8822933a 	slli	r17,r17,12
    1330:	1440060e 	bge	r2,r17,134c <_malloc_trim_r+0x78>
    1334:	00012640 	call	1264 <_sbrk_r>
    1338:	98c00217 	ldw	r3,8(r19)
    133c:	9009883a 	mov	r4,r18
    1340:	044bc83a 	sub	r5,zero,r17
    1344:	80c7883a 	add	r3,r16,r3
    1348:	10c00926 	beq	r2,r3,1370 <_malloc_trim_r+0x9c>
    134c:	00019e00 	call	19e0 <__malloc_unlock>
    1350:	0005883a 	mov	r2,zero
    1354:	dfc00417 	ldw	ra,16(sp)
    1358:	dcc00317 	ldw	r19,12(sp)
    135c:	dc800217 	ldw	r18,8(sp)
    1360:	dc400117 	ldw	r17,4(sp)
    1364:	dc000017 	ldw	r16,0(sp)
    1368:	dec00504 	addi	sp,sp,20
    136c:	f800283a 	ret
    1370:	9009883a 	mov	r4,r18
    1374:	00012640 	call	1264 <_sbrk_r>
    1378:	844dc83a 	sub	r6,r16,r17
    137c:	00ffffc4 	movi	r3,-1
    1380:	9009883a 	mov	r4,r18
    1384:	000b883a 	mov	r5,zero
    1388:	01c00074 	movhi	r7,1
    138c:	39e35204 	addi	r7,r7,-29368
    1390:	31800054 	ori	r6,r6,1
    1394:	10c00926 	beq	r2,r3,13bc <_malloc_trim_r+0xe8>
    1398:	38800017 	ldw	r2,0(r7)
    139c:	98c00217 	ldw	r3,8(r19)
    13a0:	9009883a 	mov	r4,r18
    13a4:	1445c83a 	sub	r2,r2,r17
    13a8:	38800015 	stw	r2,0(r7)
    13ac:	19800115 	stw	r6,4(r3)
    13b0:	00019e00 	call	19e0 <__malloc_unlock>
    13b4:	00800044 	movi	r2,1
    13b8:	003fe606 	br	1354 <_malloc_trim_r+0x80>
    13bc:	00012640 	call	1264 <_sbrk_r>
    13c0:	99800217 	ldw	r6,8(r19)
    13c4:	100f883a 	mov	r7,r2
    13c8:	9009883a 	mov	r4,r18
    13cc:	1187c83a 	sub	r3,r2,r6
    13d0:	008003c4 	movi	r2,15
    13d4:	19400054 	ori	r5,r3,1
    13d8:	10ffdc0e 	bge	r2,r3,134c <_malloc_trim_r+0x78>
    13dc:	00800034 	movhi	r2,0
    13e0:	109ca604 	addi	r2,r2,29336
    13e4:	10c00017 	ldw	r3,0(r2)
    13e8:	00800074 	movhi	r2,1
    13ec:	10a35204 	addi	r2,r2,-29368
    13f0:	31400115 	stw	r5,4(r6)
    13f4:	38c7c83a 	sub	r3,r7,r3
    13f8:	10c00015 	stw	r3,0(r2)
    13fc:	003fd306 	br	134c <_malloc_trim_r+0x78>

00001400 <_free_r>:
    1400:	defffd04 	addi	sp,sp,-12
    1404:	dc400115 	stw	r17,4(sp)
    1408:	dc000015 	stw	r16,0(sp)
    140c:	dfc00215 	stw	ra,8(sp)
    1410:	2821883a 	mov	r16,r5
    1414:	2023883a 	mov	r17,r4
    1418:	28005a26 	beq	r5,zero,1584 <_free_r+0x184>
    141c:	00019c00 	call	19c0 <__malloc_lock>
    1420:	823ffe04 	addi	r8,r16,-8
    1424:	41400117 	ldw	r5,4(r8)
    1428:	00bfff84 	movi	r2,-2
    142c:	02800034 	movhi	r10,0
    1430:	52962104 	addi	r10,r10,22660
    1434:	288e703a 	and	r7,r5,r2
    1438:	41cd883a 	add	r6,r8,r7
    143c:	30c00117 	ldw	r3,4(r6)
    1440:	51000217 	ldw	r4,8(r10)
    1444:	00bfff04 	movi	r2,-4
    1448:	1892703a 	and	r9,r3,r2
    144c:	5017883a 	mov	r11,r10
    1450:	31006726 	beq	r6,r4,15f0 <_free_r+0x1f0>
    1454:	2880004c 	andi	r2,r5,1
    1458:	1005003a 	cmpeq	r2,r2,zero
    145c:	32400115 	stw	r9,4(r6)
    1460:	10001a1e 	bne	r2,zero,14cc <_free_r+0xcc>
    1464:	000b883a 	mov	r5,zero
    1468:	3247883a 	add	r3,r6,r9
    146c:	18800117 	ldw	r2,4(r3)
    1470:	1080004c 	andi	r2,r2,1
    1474:	1000231e 	bne	r2,zero,1504 <_free_r+0x104>
    1478:	280ac03a 	cmpne	r5,r5,zero
    147c:	3a4f883a 	add	r7,r7,r9
    1480:	2800451e 	bne	r5,zero,1598 <_free_r+0x198>
    1484:	31000217 	ldw	r4,8(r6)
    1488:	00800034 	movhi	r2,0
    148c:	10962304 	addi	r2,r2,22668
    1490:	20807b26 	beq	r4,r2,1680 <_free_r+0x280>
    1494:	30800317 	ldw	r2,12(r6)
    1498:	3a07883a 	add	r3,r7,r8
    149c:	19c00015 	stw	r7,0(r3)
    14a0:	11000215 	stw	r4,8(r2)
    14a4:	20800315 	stw	r2,12(r4)
    14a8:	38800054 	ori	r2,r7,1
    14ac:	40800115 	stw	r2,4(r8)
    14b0:	28001a26 	beq	r5,zero,151c <_free_r+0x11c>
    14b4:	8809883a 	mov	r4,r17
    14b8:	dfc00217 	ldw	ra,8(sp)
    14bc:	dc400117 	ldw	r17,4(sp)
    14c0:	dc000017 	ldw	r16,0(sp)
    14c4:	dec00304 	addi	sp,sp,12
    14c8:	00019e01 	jmpi	19e0 <__malloc_unlock>
    14cc:	80bffe17 	ldw	r2,-8(r16)
    14d0:	50c00204 	addi	r3,r10,8
    14d4:	4091c83a 	sub	r8,r8,r2
    14d8:	41000217 	ldw	r4,8(r8)
    14dc:	388f883a 	add	r7,r7,r2
    14e0:	20c06126 	beq	r4,r3,1668 <_free_r+0x268>
    14e4:	40800317 	ldw	r2,12(r8)
    14e8:	3247883a 	add	r3,r6,r9
    14ec:	000b883a 	mov	r5,zero
    14f0:	11000215 	stw	r4,8(r2)
    14f4:	20800315 	stw	r2,12(r4)
    14f8:	18800117 	ldw	r2,4(r3)
    14fc:	1080004c 	andi	r2,r2,1
    1500:	103fdd26 	beq	r2,zero,1478 <_free_r+0x78>
    1504:	38800054 	ori	r2,r7,1
    1508:	3a07883a 	add	r3,r7,r8
    150c:	280ac03a 	cmpne	r5,r5,zero
    1510:	40800115 	stw	r2,4(r8)
    1514:	19c00015 	stw	r7,0(r3)
    1518:	283fe61e 	bne	r5,zero,14b4 <_free_r+0xb4>
    151c:	00807fc4 	movi	r2,511
    1520:	11c01f2e 	bgeu	r2,r7,15a0 <_free_r+0x1a0>
    1524:	3806d27a 	srli	r3,r7,9
    1528:	1800481e 	bne	r3,zero,164c <_free_r+0x24c>
    152c:	3804d0fa 	srli	r2,r7,3
    1530:	100690fa 	slli	r3,r2,3
    1534:	1acd883a 	add	r6,r3,r11
    1538:	31400217 	ldw	r5,8(r6)
    153c:	31405926 	beq	r6,r5,16a4 <_free_r+0x2a4>
    1540:	28800117 	ldw	r2,4(r5)
    1544:	00ffff04 	movi	r3,-4
    1548:	10c4703a 	and	r2,r2,r3
    154c:	3880022e 	bgeu	r7,r2,1558 <_free_r+0x158>
    1550:	29400217 	ldw	r5,8(r5)
    1554:	317ffa1e 	bne	r6,r5,1540 <_free_r+0x140>
    1558:	29800317 	ldw	r6,12(r5)
    155c:	41800315 	stw	r6,12(r8)
    1560:	41400215 	stw	r5,8(r8)
    1564:	8809883a 	mov	r4,r17
    1568:	2a000315 	stw	r8,12(r5)
    156c:	32000215 	stw	r8,8(r6)
    1570:	dfc00217 	ldw	ra,8(sp)
    1574:	dc400117 	ldw	r17,4(sp)
    1578:	dc000017 	ldw	r16,0(sp)
    157c:	dec00304 	addi	sp,sp,12
    1580:	00019e01 	jmpi	19e0 <__malloc_unlock>
    1584:	dfc00217 	ldw	ra,8(sp)
    1588:	dc400117 	ldw	r17,4(sp)
    158c:	dc000017 	ldw	r16,0(sp)
    1590:	dec00304 	addi	sp,sp,12
    1594:	f800283a 	ret
    1598:	31000217 	ldw	r4,8(r6)
    159c:	003fbd06 	br	1494 <_free_r+0x94>
    15a0:	3806d0fa 	srli	r3,r7,3
    15a4:	00800044 	movi	r2,1
    15a8:	51400117 	ldw	r5,4(r10)
    15ac:	180890fa 	slli	r4,r3,3
    15b0:	1807d0ba 	srai	r3,r3,2
    15b4:	22c9883a 	add	r4,r4,r11
    15b8:	21800217 	ldw	r6,8(r4)
    15bc:	10c4983a 	sll	r2,r2,r3
    15c0:	41000315 	stw	r4,12(r8)
    15c4:	41800215 	stw	r6,8(r8)
    15c8:	288ab03a 	or	r5,r5,r2
    15cc:	22000215 	stw	r8,8(r4)
    15d0:	8809883a 	mov	r4,r17
    15d4:	51400115 	stw	r5,4(r10)
    15d8:	32000315 	stw	r8,12(r6)
    15dc:	dfc00217 	ldw	ra,8(sp)
    15e0:	dc400117 	ldw	r17,4(sp)
    15e4:	dc000017 	ldw	r16,0(sp)
    15e8:	dec00304 	addi	sp,sp,12
    15ec:	00019e01 	jmpi	19e0 <__malloc_unlock>
    15f0:	2880004c 	andi	r2,r5,1
    15f4:	3a4d883a 	add	r6,r7,r9
    15f8:	1000071e 	bne	r2,zero,1618 <_free_r+0x218>
    15fc:	80bffe17 	ldw	r2,-8(r16)
    1600:	4091c83a 	sub	r8,r8,r2
    1604:	41000317 	ldw	r4,12(r8)
    1608:	40c00217 	ldw	r3,8(r8)
    160c:	308d883a 	add	r6,r6,r2
    1610:	20c00215 	stw	r3,8(r4)
    1614:	19000315 	stw	r4,12(r3)
    1618:	00800034 	movhi	r2,0
    161c:	109ca504 	addi	r2,r2,29332
    1620:	11000017 	ldw	r4,0(r2)
    1624:	30c00054 	ori	r3,r6,1
    1628:	52000215 	stw	r8,8(r10)
    162c:	40c00115 	stw	r3,4(r8)
    1630:	313fa036 	bltu	r6,r4,14b4 <_free_r+0xb4>
    1634:	00800074 	movhi	r2,1
    1638:	10a34804 	addi	r2,r2,-29408
    163c:	11400017 	ldw	r5,0(r2)
    1640:	8809883a 	mov	r4,r17
    1644:	00012d40 	call	12d4 <_malloc_trim_r>
    1648:	003f9a06 	br	14b4 <_free_r+0xb4>
    164c:	00800104 	movi	r2,4
    1650:	10c0072e 	bgeu	r2,r3,1670 <_free_r+0x270>
    1654:	00800504 	movi	r2,20
    1658:	10c01936 	bltu	r2,r3,16c0 <_free_r+0x2c0>
    165c:	188016c4 	addi	r2,r3,91
    1660:	100690fa 	slli	r3,r2,3
    1664:	003fb306 	br	1534 <_free_r+0x134>
    1668:	01400044 	movi	r5,1
    166c:	003f7e06 	br	1468 <_free_r+0x68>
    1670:	3804d1ba 	srli	r2,r7,6
    1674:	10800e04 	addi	r2,r2,56
    1678:	100690fa 	slli	r3,r2,3
    167c:	003fad06 	br	1534 <_free_r+0x134>
    1680:	22000315 	stw	r8,12(r4)
    1684:	22000215 	stw	r8,8(r4)
    1688:	3a05883a 	add	r2,r7,r8
    168c:	38c00054 	ori	r3,r7,1
    1690:	11c00015 	stw	r7,0(r2)
    1694:	41000215 	stw	r4,8(r8)
    1698:	40c00115 	stw	r3,4(r8)
    169c:	41000315 	stw	r4,12(r8)
    16a0:	003f8406 	br	14b4 <_free_r+0xb4>
    16a4:	1005d0ba 	srai	r2,r2,2
    16a8:	00c00044 	movi	r3,1
    16ac:	51000117 	ldw	r4,4(r10)
    16b0:	1886983a 	sll	r3,r3,r2
    16b4:	20c8b03a 	or	r4,r4,r3
    16b8:	51000115 	stw	r4,4(r10)
    16bc:	003fa706 	br	155c <_free_r+0x15c>
    16c0:	00801504 	movi	r2,84
    16c4:	10c00436 	bltu	r2,r3,16d8 <_free_r+0x2d8>
    16c8:	3804d33a 	srli	r2,r7,12
    16cc:	10801b84 	addi	r2,r2,110
    16d0:	100690fa 	slli	r3,r2,3
    16d4:	003f9706 	br	1534 <_free_r+0x134>
    16d8:	00805504 	movi	r2,340
    16dc:	10c00436 	bltu	r2,r3,16f0 <_free_r+0x2f0>
    16e0:	3804d3fa 	srli	r2,r7,15
    16e4:	10801dc4 	addi	r2,r2,119
    16e8:	100690fa 	slli	r3,r2,3
    16ec:	003f9106 	br	1534 <_free_r+0x134>
    16f0:	00815504 	movi	r2,1364
    16f4:	10c0032e 	bgeu	r2,r3,1704 <_free_r+0x304>
    16f8:	00801f84 	movi	r2,126
    16fc:	00c0fc04 	movi	r3,1008
    1700:	003f8c06 	br	1534 <_free_r+0x134>
    1704:	3804d4ba 	srli	r2,r7,18
    1708:	10801f04 	addi	r2,r2,124
    170c:	100690fa 	slli	r3,r2,3
    1710:	003f8806 	br	1534 <_free_r+0x134>

00001714 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1714:	defff404 	addi	sp,sp,-48
    1718:	df000b15 	stw	fp,44(sp)
    171c:	df000b04 	addi	fp,sp,44
    1720:	e13ffb15 	stw	r4,-20(fp)
    1724:	e17ffc15 	stw	r5,-16(fp)
    1728:	e1bffd15 	stw	r6,-12(fp)
    172c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1730:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1734:	00800074 	movhi	r2,1
    1738:	10a34f04 	addi	r2,r2,-29380
    173c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1740:	1005003a 	cmpeq	r2,r2,zero
    1744:	1000411e 	bne	r2,zero,184c <alt_alarm_start+0x138>
  {
    if (alarm)
    1748:	e0bffb17 	ldw	r2,-20(fp)
    174c:	1005003a 	cmpeq	r2,r2,zero
    1750:	10003b1e 	bne	r2,zero,1840 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    1754:	e0fffb17 	ldw	r3,-20(fp)
    1758:	e0bffd17 	ldw	r2,-12(fp)
    175c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    1760:	e0fffb17 	ldw	r3,-20(fp)
    1764:	e0bffe17 	ldw	r2,-8(fp)
    1768:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    176c:	0005303a 	rdctl	r2,status
    1770:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1774:	e0fff817 	ldw	r3,-32(fp)
    1778:	00bfff84 	movi	r2,-2
    177c:	1884703a 	and	r2,r3,r2
    1780:	1001703a 	wrctl	status,r2
  
  return context;
    1784:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1788:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    178c:	00800074 	movhi	r2,1
    1790:	10a35004 	addi	r2,r2,-29376
    1794:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1798:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    179c:	e0fffc17 	ldw	r3,-16(fp)
    17a0:	e0bff917 	ldw	r2,-28(fp)
    17a4:	1885883a 	add	r2,r3,r2
    17a8:	10c00044 	addi	r3,r2,1
    17ac:	e0bffb17 	ldw	r2,-20(fp)
    17b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    17b4:	e0bffb17 	ldw	r2,-20(fp)
    17b8:	10c00217 	ldw	r3,8(r2)
    17bc:	e0bff917 	ldw	r2,-28(fp)
    17c0:	1880042e 	bgeu	r3,r2,17d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    17c4:	e0fffb17 	ldw	r3,-20(fp)
    17c8:	00800044 	movi	r2,1
    17cc:	18800405 	stb	r2,16(r3)
    17d0:	00000206 	br	17dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    17d4:	e0bffb17 	ldw	r2,-20(fp)
    17d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    17dc:	e0fffb17 	ldw	r3,-20(fp)
    17e0:	00800034 	movhi	r2,0
    17e4:	109caa04 	addi	r2,r2,29352
    17e8:	e0bff615 	stw	r2,-40(fp)
    17ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    17f0:	e0fff717 	ldw	r3,-36(fp)
    17f4:	e0bff617 	ldw	r2,-40(fp)
    17f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    17fc:	e0bff617 	ldw	r2,-40(fp)
    1800:	10c00017 	ldw	r3,0(r2)
    1804:	e0bff717 	ldw	r2,-36(fp)
    1808:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    180c:	e0bff617 	ldw	r2,-40(fp)
    1810:	10c00017 	ldw	r3,0(r2)
    1814:	e0bff717 	ldw	r2,-36(fp)
    1818:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    181c:	e0fff617 	ldw	r3,-40(fp)
    1820:	e0bff717 	ldw	r2,-36(fp)
    1824:	18800015 	stw	r2,0(r3)
    1828:	e0bffa17 	ldw	r2,-24(fp)
    182c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1830:	e0bff517 	ldw	r2,-44(fp)
    1834:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1838:	e03fff15 	stw	zero,-4(fp)
    183c:	00000506 	br	1854 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    1840:	00bffa84 	movi	r2,-22
    1844:	e0bfff15 	stw	r2,-4(fp)
    1848:	00000206 	br	1854 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    184c:	00bfde84 	movi	r2,-134
    1850:	e0bfff15 	stw	r2,-4(fp)
    1854:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    1858:	e037883a 	mov	sp,fp
    185c:	df000017 	ldw	fp,0(sp)
    1860:	dec00104 	addi	sp,sp,4
    1864:	f800283a 	ret

00001868 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1868:	defffe04 	addi	sp,sp,-8
    186c:	dfc00115 	stw	ra,4(sp)
    1870:	df000015 	stw	fp,0(sp)
    1874:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1878:	01000034 	movhi	r4,0
    187c:	211cb304 	addi	r4,r4,29388
    1880:	01400034 	movhi	r5,0
    1884:	29562104 	addi	r5,r5,22660
    1888:	01800034 	movhi	r6,0
    188c:	319cb304 	addi	r6,r6,29388
    1890:	00018e80 	call	18e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1894:	01000034 	movhi	r4,0
    1898:	21000804 	addi	r4,r4,32
    189c:	01400034 	movhi	r5,0
    18a0:	29400804 	addi	r5,r5,32
    18a4:	01800034 	movhi	r6,0
    18a8:	31807604 	addi	r6,r6,472
    18ac:	00018e80 	call	18e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    18b0:	01000034 	movhi	r4,0
    18b4:	2115dc04 	addi	r4,r4,22384
    18b8:	01400034 	movhi	r5,0
    18bc:	2955dc04 	addi	r5,r5,22384
    18c0:	01800034 	movhi	r6,0
    18c4:	31962104 	addi	r6,r6,22660
    18c8:	00018e80 	call	18e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    18cc:	0002ccc0 	call	2ccc <alt_dcache_flush_all>
  alt_icache_flush_all();
    18d0:	0002ef00 	call	2ef0 <alt_icache_flush_all>
}
    18d4:	e037883a 	mov	sp,fp
    18d8:	dfc00117 	ldw	ra,4(sp)
    18dc:	df000017 	ldw	fp,0(sp)
    18e0:	dec00204 	addi	sp,sp,8
    18e4:	f800283a 	ret

000018e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    18e8:	defffc04 	addi	sp,sp,-16
    18ec:	df000315 	stw	fp,12(sp)
    18f0:	df000304 	addi	fp,sp,12
    18f4:	e13ffd15 	stw	r4,-12(fp)
    18f8:	e17ffe15 	stw	r5,-8(fp)
    18fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1900:	e0fffe17 	ldw	r3,-8(fp)
    1904:	e0bffd17 	ldw	r2,-12(fp)
    1908:	18800e26 	beq	r3,r2,1944 <alt_load_section+0x5c>
  {
    while( to != end )
    190c:	00000a06 	br	1938 <alt_load_section+0x50>
    {
      *to++ = *from++;
    1910:	e0bffd17 	ldw	r2,-12(fp)
    1914:	10c00017 	ldw	r3,0(r2)
    1918:	e0bffe17 	ldw	r2,-8(fp)
    191c:	10c00015 	stw	r3,0(r2)
    1920:	e0bffe17 	ldw	r2,-8(fp)
    1924:	10800104 	addi	r2,r2,4
    1928:	e0bffe15 	stw	r2,-8(fp)
    192c:	e0bffd17 	ldw	r2,-12(fp)
    1930:	10800104 	addi	r2,r2,4
    1934:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1938:	e0fffe17 	ldw	r3,-8(fp)
    193c:	e0bfff17 	ldw	r2,-4(fp)
    1940:	18bff31e 	bne	r3,r2,1910 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1944:	e037883a 	mov	sp,fp
    1948:	df000017 	ldw	fp,0(sp)
    194c:	dec00104 	addi	sp,sp,4
    1950:	f800283a 	ret

00001954 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1954:	defffd04 	addi	sp,sp,-12
    1958:	dfc00215 	stw	ra,8(sp)
    195c:	df000115 	stw	fp,4(sp)
    1960:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1964:	0009883a 	mov	r4,zero
    1968:	0001ef80 	call	1ef8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    196c:	0001f2c0 	call	1f2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1970:	01000034 	movhi	r4,0
    1974:	21161604 	addi	r4,r4,22616
    1978:	01400034 	movhi	r5,0
    197c:	29561604 	addi	r5,r5,22616
    1980:	01800034 	movhi	r6,0
    1984:	31961604 	addi	r6,r6,22616
    1988:	00032b00 	call	32b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    198c:	0002e280 	call	2e28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1990:	01000034 	movhi	r4,0
    1994:	210ba304 	addi	r4,r4,11916
    1998:	00039280 	call	3928 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    199c:	d126a717 	ldw	r4,-25956(gp)
    19a0:	d166a817 	ldw	r5,-25952(gp)
    19a4:	d1a6a917 	ldw	r6,-25948(gp)
    19a8:	00002140 	call	214 <main>
    19ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    19b0:	01000044 	movi	r4,1
    19b4:	0002b6c0 	call	2b6c <close>
  exit (result);
    19b8:	e13fff17 	ldw	r4,-4(fp)
    19bc:	000393c0 	call	393c <exit>

000019c0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    19c0:	defffe04 	addi	sp,sp,-8
    19c4:	df000115 	stw	fp,4(sp)
    19c8:	df000104 	addi	fp,sp,4
    19cc:	e13fff15 	stw	r4,-4(fp)
}
    19d0:	e037883a 	mov	sp,fp
    19d4:	df000017 	ldw	fp,0(sp)
    19d8:	dec00104 	addi	sp,sp,4
    19dc:	f800283a 	ret

000019e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    19e0:	defffe04 	addi	sp,sp,-8
    19e4:	df000115 	stw	fp,4(sp)
    19e8:	df000104 	addi	fp,sp,4
    19ec:	e13fff15 	stw	r4,-4(fp)
}
    19f0:	e037883a 	mov	sp,fp
    19f4:	df000017 	ldw	fp,0(sp)
    19f8:	dec00104 	addi	sp,sp,4
    19fc:	f800283a 	ret

00001a00 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1a00:	defff204 	addi	sp,sp,-56
    1a04:	dfc00a15 	stw	ra,40(sp)
    1a08:	df000915 	stw	fp,36(sp)
    1a0c:	df000904 	addi	fp,sp,36
    1a10:	e1400215 	stw	r5,8(fp)
    1a14:	e1800315 	stw	r6,12(fp)
    1a18:	e1c00415 	stw	r7,16(fp)
    1a1c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    1a20:	e0800204 	addi	r2,fp,8
    1a24:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    1a28:	e0bfff17 	ldw	r2,-4(fp)
    1a2c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    1a30:	00007806 	br	1c14 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1a34:	e0bffc07 	ldb	r2,-16(fp)
    1a38:	10800960 	cmpeqi	r2,r2,37
    1a3c:	1000031e 	bne	r2,zero,1a4c <alt_printf+0x4c>
        {
            alt_putchar(c);
    1a40:	e13ffc07 	ldb	r4,-16(fp)
    1a44:	0001c580 	call	1c58 <alt_putchar>
    1a48:	00007206 	br	1c14 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1a4c:	e0bffd17 	ldw	r2,-12(fp)
    1a50:	10800003 	ldbu	r2,0(r2)
    1a54:	e0bffc05 	stb	r2,-16(fp)
    1a58:	e0bffc07 	ldb	r2,-16(fp)
    1a5c:	1004c03a 	cmpne	r2,r2,zero
    1a60:	1007883a 	mov	r3,r2
    1a64:	e0bffd17 	ldw	r2,-12(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffd15 	stw	r2,-12(fp)
    1a70:	18803fcc 	andi	r2,r3,255
    1a74:	1005003a 	cmpeq	r2,r2,zero
    1a78:	1000721e 	bne	r2,zero,1c44 <alt_printf+0x244>
            {
                if (c == '%')
    1a7c:	e0bffc07 	ldb	r2,-16(fp)
    1a80:	10800958 	cmpnei	r2,r2,37
    1a84:	1000031e 	bne	r2,zero,1a94 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1a88:	e13ffc07 	ldb	r4,-16(fp)
    1a8c:	0001c580 	call	1c58 <alt_putchar>
    1a90:	00006006 	br	1c14 <alt_printf+0x214>
                } 
                else if (c == 'c')
    1a94:	e0bffc07 	ldb	r2,-16(fp)
    1a98:	108018d8 	cmpnei	r2,r2,99
    1a9c:	1000091e 	bne	r2,zero,1ac4 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    1aa0:	e0fffe17 	ldw	r3,-8(fp)
    1aa4:	18800104 	addi	r2,r3,4
    1aa8:	e0bffe15 	stw	r2,-8(fp)
    1aac:	1805883a 	mov	r2,r3
    1ab0:	10800017 	ldw	r2,0(r2)
    1ab4:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    1ab8:	e13ffb17 	ldw	r4,-20(fp)
    1abc:	0001c580 	call	1c58 <alt_putchar>
    1ac0:	00005406 	br	1c14 <alt_printf+0x214>
                }
                else if (c == 'x')
    1ac4:	e0bffc07 	ldb	r2,-16(fp)
    1ac8:	10801e18 	cmpnei	r2,r2,120
    1acc:	1000371e 	bne	r2,zero,1bac <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    1ad0:	e0fffe17 	ldw	r3,-8(fp)
    1ad4:	18800104 	addi	r2,r3,4
    1ad8:	e0bffe15 	stw	r2,-8(fp)
    1adc:	1805883a 	mov	r2,r3
    1ae0:	10800017 	ldw	r2,0(r2)
    1ae4:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1ae8:	e0bffa17 	ldw	r2,-24(fp)
    1aec:	1004c03a 	cmpne	r2,r2,zero
    1af0:	1000031e 	bne	r2,zero,1b00 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    1af4:	01000c04 	movi	r4,48
    1af8:	0001c580 	call	1c58 <alt_putchar>
                        continue;
    1afc:	00004506 	br	1c14 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    1b00:	00800704 	movi	r2,28
    1b04:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    1b08:	00000306 	br	1b18 <alt_printf+0x118>
                        digit_shift -= 4;
    1b0c:	e0bff817 	ldw	r2,-32(fp)
    1b10:	10bfff04 	addi	r2,r2,-4
    1b14:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1b18:	00c003c4 	movi	r3,15
    1b1c:	e0bff817 	ldw	r2,-32(fp)
    1b20:	1884983a 	sll	r2,r3,r2
    1b24:	1007883a 	mov	r3,r2
    1b28:	e0bffa17 	ldw	r2,-24(fp)
    1b2c:	1884703a 	and	r2,r3,r2
    1b30:	1005003a 	cmpeq	r2,r2,zero
    1b34:	103ff51e 	bne	r2,zero,1b0c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1b38:	00001806 	br	1b9c <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1b3c:	00c003c4 	movi	r3,15
    1b40:	e0bff817 	ldw	r2,-32(fp)
    1b44:	1884983a 	sll	r2,r3,r2
    1b48:	1007883a 	mov	r3,r2
    1b4c:	e0bffa17 	ldw	r2,-24(fp)
    1b50:	1886703a 	and	r3,r3,r2
    1b54:	e0bff817 	ldw	r2,-32(fp)
    1b58:	1884d83a 	srl	r2,r3,r2
    1b5c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    1b60:	e0bff917 	ldw	r2,-28(fp)
    1b64:	108002a8 	cmpgeui	r2,r2,10
    1b68:	1000041e 	bne	r2,zero,1b7c <alt_printf+0x17c>
                            c = '0' + digit;
    1b6c:	e0bff917 	ldw	r2,-28(fp)
    1b70:	10800c04 	addi	r2,r2,48
    1b74:	e0bffc05 	stb	r2,-16(fp)
    1b78:	00000306 	br	1b88 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    1b7c:	e0bff917 	ldw	r2,-28(fp)
    1b80:	108015c4 	addi	r2,r2,87
    1b84:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    1b88:	e13ffc07 	ldb	r4,-16(fp)
    1b8c:	0001c580 	call	1c58 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1b90:	e0bff817 	ldw	r2,-32(fp)
    1b94:	10bfff04 	addi	r2,r2,-4
    1b98:	e0bff815 	stw	r2,-32(fp)
    1b9c:	e0bff817 	ldw	r2,-32(fp)
    1ba0:	1004403a 	cmpge	r2,r2,zero
    1ba4:	103fe51e 	bne	r2,zero,1b3c <alt_printf+0x13c>
    1ba8:	00001a06 	br	1c14 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1bac:	e0bffc07 	ldb	r2,-16(fp)
    1bb0:	10801cd8 	cmpnei	r2,r2,115
    1bb4:	1000171e 	bne	r2,zero,1c14 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1bb8:	e0fffe17 	ldw	r3,-8(fp)
    1bbc:	18800104 	addi	r2,r3,4
    1bc0:	e0bffe15 	stw	r2,-8(fp)
    1bc4:	1805883a 	mov	r2,r3
    1bc8:	10800017 	ldw	r2,0(r2)
    1bcc:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    1bd0:	00000906 	br	1bf8 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    1bd4:	e0bff717 	ldw	r2,-36(fp)
    1bd8:	10800003 	ldbu	r2,0(r2)
    1bdc:	11003fcc 	andi	r4,r2,255
    1be0:	2100201c 	xori	r4,r4,128
    1be4:	213fe004 	addi	r4,r4,-128
    1be8:	e0bff717 	ldw	r2,-36(fp)
    1bec:	10800044 	addi	r2,r2,1
    1bf0:	e0bff715 	stw	r2,-36(fp)
    1bf4:	0001c580 	call	1c58 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    1bf8:	e0bff717 	ldw	r2,-36(fp)
    1bfc:	10800003 	ldbu	r2,0(r2)
    1c00:	10803fcc 	andi	r2,r2,255
    1c04:	1080201c 	xori	r2,r2,128
    1c08:	10bfe004 	addi	r2,r2,-128
    1c0c:	1004c03a 	cmpne	r2,r2,zero
    1c10:	103ff01e 	bne	r2,zero,1bd4 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1c14:	e0bffd17 	ldw	r2,-12(fp)
    1c18:	10800003 	ldbu	r2,0(r2)
    1c1c:	e0bffc05 	stb	r2,-16(fp)
    1c20:	e0bffc07 	ldb	r2,-16(fp)
    1c24:	1004c03a 	cmpne	r2,r2,zero
    1c28:	1007883a 	mov	r3,r2
    1c2c:	e0bffd17 	ldw	r2,-12(fp)
    1c30:	10800044 	addi	r2,r2,1
    1c34:	e0bffd15 	stw	r2,-12(fp)
    1c38:	18803fcc 	andi	r2,r3,255
    1c3c:	1004c03a 	cmpne	r2,r2,zero
    1c40:	103f7c1e 	bne	r2,zero,1a34 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    1c44:	e037883a 	mov	sp,fp
    1c48:	dfc00117 	ldw	ra,4(sp)
    1c4c:	df000017 	ldw	fp,0(sp)
    1c50:	dec00504 	addi	sp,sp,20
    1c54:	f800283a 	ret

00001c58 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1c58:	defffd04 	addi	sp,sp,-12
    1c5c:	dfc00215 	stw	ra,8(sp)
    1c60:	df000115 	stw	fp,4(sp)
    1c64:	df000104 	addi	fp,sp,4
    1c68:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    1c6c:	00800034 	movhi	r2,0
    1c70:	109ca704 	addi	r2,r2,29340
    1c74:	10800017 	ldw	r2,0(r2)
    1c78:	11400217 	ldw	r5,8(r2)
    1c7c:	e13fff17 	ldw	r4,-4(fp)
    1c80:	0003a880 	call	3a88 <putc>
#endif
}
    1c84:	e037883a 	mov	sp,fp
    1c88:	dfc00117 	ldw	ra,4(sp)
    1c8c:	df000017 	ldw	fp,0(sp)
    1c90:	dec00204 	addi	sp,sp,8
    1c94:	f800283a 	ret

00001c98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    1c98:	defff804 	addi	sp,sp,-32
    1c9c:	df000715 	stw	fp,28(sp)
    1ca0:	df000704 	addi	fp,sp,28
    1ca4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ca8:	0005303a 	rdctl	r2,status
    1cac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1cb0:	e0fffb17 	ldw	r3,-20(fp)
    1cb4:	00bfff84 	movi	r2,-2
    1cb8:	1884703a 	and	r2,r3,r2
    1cbc:	1001703a 	wrctl	status,r2
  
  return context;
    1cc0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    1cc4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1cc8:	d0a00417 	ldw	r2,-32752(gp)
    1ccc:	10c000c4 	addi	r3,r2,3
    1cd0:	00bfff04 	movi	r2,-4
    1cd4:	1884703a 	and	r2,r3,r2
    1cd8:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1cdc:	d0e00417 	ldw	r3,-32752(gp)
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	1887883a 	add	r3,r3,r2
    1ce8:	00802034 	movhi	r2,128
    1cec:	10800004 	addi	r2,r2,0
    1cf0:	10c0072e 	bgeu	r2,r3,1d10 <sbrk+0x78>
    1cf4:	e0bffd17 	ldw	r2,-12(fp)
    1cf8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1cfc:	e0bffa17 	ldw	r2,-24(fp)
    1d00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    1d04:	00bfffc4 	movi	r2,-1
    1d08:	e0bfff15 	stw	r2,-4(fp)
    1d0c:	00000c06 	br	1d40 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    1d10:	d0a00417 	ldw	r2,-32752(gp)
    1d14:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    1d18:	d0e00417 	ldw	r3,-32752(gp)
    1d1c:	e0bffe17 	ldw	r2,-8(fp)
    1d20:	1885883a 	add	r2,r3,r2
    1d24:	d0a00415 	stw	r2,-32752(gp)
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	e0bff915 	stw	r2,-28(fp)
    1d30:	e0bff917 	ldw	r2,-28(fp)
    1d34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1d38:	e0bffc17 	ldw	r2,-16(fp)
    1d3c:	e0bfff15 	stw	r2,-4(fp)
    1d40:	e0bfff17 	ldw	r2,-4(fp)
} 
    1d44:	e037883a 	mov	sp,fp
    1d48:	df000017 	ldw	fp,0(sp)
    1d4c:	dec00104 	addi	sp,sp,4
    1d50:	f800283a 	ret

00001d54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1d54:	defffa04 	addi	sp,sp,-24
    1d58:	df000515 	stw	fp,20(sp)
    1d5c:	df000504 	addi	fp,sp,20
    1d60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d64:	0005303a 	rdctl	r2,status
    1d68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d6c:	e0fffd17 	ldw	r3,-12(fp)
    1d70:	00bfff84 	movi	r2,-2
    1d74:	1884703a 	and	r2,r3,r2
    1d78:	1001703a 	wrctl	status,r2
  
  return context;
    1d7c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1d80:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    1d84:	e0bfff17 	ldw	r2,-4(fp)
    1d88:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1d8c:	e0bffc17 	ldw	r2,-16(fp)
    1d90:	10c00017 	ldw	r3,0(r2)
    1d94:	e0bffc17 	ldw	r2,-16(fp)
    1d98:	10800117 	ldw	r2,4(r2)
    1d9c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    1da0:	e0bffc17 	ldw	r2,-16(fp)
    1da4:	10c00117 	ldw	r3,4(r2)
    1da8:	e0bffc17 	ldw	r2,-16(fp)
    1dac:	10800017 	ldw	r2,0(r2)
    1db0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1db4:	e0fffc17 	ldw	r3,-16(fp)
    1db8:	e0bffc17 	ldw	r2,-16(fp)
    1dbc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    1dc0:	e0fffc17 	ldw	r3,-16(fp)
    1dc4:	e0bffc17 	ldw	r2,-16(fp)
    1dc8:	18800015 	stw	r2,0(r3)
    1dcc:	e0bffe17 	ldw	r2,-8(fp)
    1dd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1dd4:	e0bffb17 	ldw	r2,-20(fp)
    1dd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1ddc:	e037883a 	mov	sp,fp
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00104 	addi	sp,sp,4
    1de8:	f800283a 	ret

00001dec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1dec:	defffb04 	addi	sp,sp,-20
    1df0:	dfc00415 	stw	ra,16(sp)
    1df4:	df000315 	stw	fp,12(sp)
    1df8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1dfc:	d0a00517 	ldw	r2,-32748(gp)
    1e00:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1e04:	d0a6ab17 	ldw	r2,-25940(gp)
    1e08:	10800044 	addi	r2,r2,1
    1e0c:	d0a6ab15 	stw	r2,-25940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1e10:	00003106 	br	1ed8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    1e14:	e0bffe17 	ldw	r2,-8(fp)
    1e18:	10800017 	ldw	r2,0(r2)
    1e1c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1e20:	e0bffe17 	ldw	r2,-8(fp)
    1e24:	10800403 	ldbu	r2,16(r2)
    1e28:	10803fcc 	andi	r2,r2,255
    1e2c:	1005003a 	cmpeq	r2,r2,zero
    1e30:	1000051e 	bne	r2,zero,1e48 <alt_tick+0x5c>
    1e34:	d0a6ab17 	ldw	r2,-25940(gp)
    1e38:	1004c03a 	cmpne	r2,r2,zero
    1e3c:	1000021e 	bne	r2,zero,1e48 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    1e40:	e0bffe17 	ldw	r2,-8(fp)
    1e44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1e48:	e0bffe17 	ldw	r2,-8(fp)
    1e4c:	10c00217 	ldw	r3,8(r2)
    1e50:	d0a6ab17 	ldw	r2,-25940(gp)
    1e54:	10c01e36 	bltu	r2,r3,1ed0 <alt_tick+0xe4>
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	10800403 	ldbu	r2,16(r2)
    1e60:	10803fcc 	andi	r2,r2,255
    1e64:	1004c03a 	cmpne	r2,r2,zero
    1e68:	1000191e 	bne	r2,zero,1ed0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    1e6c:	e0bffe17 	ldw	r2,-8(fp)
    1e70:	10c00317 	ldw	r3,12(r2)
    1e74:	e0bffe17 	ldw	r2,-8(fp)
    1e78:	11000517 	ldw	r4,20(r2)
    1e7c:	183ee83a 	callr	r3
    1e80:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1e84:	e0bffd17 	ldw	r2,-12(fp)
    1e88:	1004c03a 	cmpne	r2,r2,zero
    1e8c:	1000031e 	bne	r2,zero,1e9c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    1e90:	e13ffe17 	ldw	r4,-8(fp)
    1e94:	0001d540 	call	1d54 <alt_alarm_stop>
    1e98:	00000d06 	br	1ed0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    1e9c:	e0bffe17 	ldw	r2,-8(fp)
    1ea0:	10c00217 	ldw	r3,8(r2)
    1ea4:	e0bffd17 	ldw	r2,-12(fp)
    1ea8:	1887883a 	add	r3,r3,r2
    1eac:	e0bffe17 	ldw	r2,-8(fp)
    1eb0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1eb4:	e0bffe17 	ldw	r2,-8(fp)
    1eb8:	10c00217 	ldw	r3,8(r2)
    1ebc:	d0a6ab17 	ldw	r2,-25940(gp)
    1ec0:	1880032e 	bgeu	r3,r2,1ed0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    1ec4:	e0fffe17 	ldw	r3,-8(fp)
    1ec8:	00800044 	movi	r2,1
    1ecc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    1ed0:	e0bfff17 	ldw	r2,-4(fp)
    1ed4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1ed8:	d0e00504 	addi	r3,gp,-32748
    1edc:	e0bffe17 	ldw	r2,-8(fp)
    1ee0:	10ffcc1e 	bne	r2,r3,1e14 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1ee4:	e037883a 	mov	sp,fp
    1ee8:	dfc00117 	ldw	ra,4(sp)
    1eec:	df000017 	ldw	fp,0(sp)
    1ef0:	dec00204 	addi	sp,sp,8
    1ef4:	f800283a 	ret

00001ef8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1ef8:	defffd04 	addi	sp,sp,-12
    1efc:	dfc00215 	stw	ra,8(sp)
    1f00:	df000115 	stw	fp,4(sp)
    1f04:	df000104 	addi	fp,sp,4
    1f08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    1f0c:	00036840 	call	3684 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1f10:	00800044 	movi	r2,1
    1f14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1f18:	e037883a 	mov	sp,fp
    1f1c:	dfc00117 	ldw	ra,4(sp)
    1f20:	df000017 	ldw	fp,0(sp)
    1f24:	dec00204 	addi	sp,sp,8
    1f28:	f800283a 	ret

00001f2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1f2c:	defffe04 	addi	sp,sp,-8
    1f30:	dfc00115 	stw	ra,4(sp)
    1f34:	df000015 	stw	fp,0(sp)
    1f38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    1f3c:	01040034 	movhi	r4,4096
    1f40:	21080004 	addi	r4,r4,8192
    1f44:	000b883a 	mov	r5,zero
    1f48:	000d883a 	mov	r6,zero
    1f4c:	01c00204 	movi	r7,8
    1f50:	0002adc0 	call	2adc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1f54:	01000034 	movhi	r4,0
    1f58:	21182d04 	addi	r4,r4,24756
    1f5c:	000b883a 	mov	r5,zero
    1f60:	01800204 	movi	r6,8
    1f64:	00021080 	call	2108 <altera_avalon_jtag_uart_init>
    1f68:	01000034 	movhi	r4,0
    1f6c:	21182304 	addi	r4,r4,24716
    1f70:	0001f880 	call	1f88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    1f74:	e037883a 	mov	sp,fp
    1f78:	dfc00117 	ldw	ra,4(sp)
    1f7c:	df000017 	ldw	fp,0(sp)
    1f80:	dec00204 	addi	sp,sp,8
    1f84:	f800283a 	ret

00001f88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1f88:	defffd04 	addi	sp,sp,-12
    1f8c:	dfc00215 	stw	ra,8(sp)
    1f90:	df000115 	stw	fp,4(sp)
    1f94:	df000104 	addi	fp,sp,4
    1f98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1f9c:	e13fff17 	ldw	r4,-4(fp)
    1fa0:	01400034 	movhi	r5,0
    1fa4:	295cae04 	addi	r5,r5,29368
    1fa8:	0002d140 	call	2d14 <alt_dev_llist_insert>
}
    1fac:	e037883a 	mov	sp,fp
    1fb0:	dfc00117 	ldw	ra,4(sp)
    1fb4:	df000017 	ldw	fp,0(sp)
    1fb8:	dec00204 	addi	sp,sp,8
    1fbc:	f800283a 	ret

00001fc0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1fc0:	defffa04 	addi	sp,sp,-24
    1fc4:	dfc00515 	stw	ra,20(sp)
    1fc8:	df000415 	stw	fp,16(sp)
    1fcc:	df000404 	addi	fp,sp,16
    1fd0:	e13ffd15 	stw	r4,-12(fp)
    1fd4:	e17ffe15 	stw	r5,-8(fp)
    1fd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1fdc:	e0bffd17 	ldw	r2,-12(fp)
    1fe0:	10800017 	ldw	r2,0(r2)
    1fe4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1fe8:	e0bffc17 	ldw	r2,-16(fp)
    1fec:	11000a04 	addi	r4,r2,40
    1ff0:	e0bffd17 	ldw	r2,-12(fp)
    1ff4:	11c00217 	ldw	r7,8(r2)
    1ff8:	e17ffe17 	ldw	r5,-8(fp)
    1ffc:	e1bfff17 	ldw	r6,-4(fp)
    2000:	00026080 	call	2608 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    2004:	e037883a 	mov	sp,fp
    2008:	dfc00117 	ldw	ra,4(sp)
    200c:	df000017 	ldw	fp,0(sp)
    2010:	dec00204 	addi	sp,sp,8
    2014:	f800283a 	ret

00002018 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    2018:	defffa04 	addi	sp,sp,-24
    201c:	dfc00515 	stw	ra,20(sp)
    2020:	df000415 	stw	fp,16(sp)
    2024:	df000404 	addi	fp,sp,16
    2028:	e13ffd15 	stw	r4,-12(fp)
    202c:	e17ffe15 	stw	r5,-8(fp)
    2030:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2034:	e0bffd17 	ldw	r2,-12(fp)
    2038:	10800017 	ldw	r2,0(r2)
    203c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    2040:	e0bffc17 	ldw	r2,-16(fp)
    2044:	11000a04 	addi	r4,r2,40
    2048:	e0bffd17 	ldw	r2,-12(fp)
    204c:	11c00217 	ldw	r7,8(r2)
    2050:	e17ffe17 	ldw	r5,-8(fp)
    2054:	e1bfff17 	ldw	r6,-4(fp)
    2058:	000282c0 	call	282c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    205c:	e037883a 	mov	sp,fp
    2060:	dfc00117 	ldw	ra,4(sp)
    2064:	df000017 	ldw	fp,0(sp)
    2068:	dec00204 	addi	sp,sp,8
    206c:	f800283a 	ret

00002070 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    2070:	defffc04 	addi	sp,sp,-16
    2074:	dfc00315 	stw	ra,12(sp)
    2078:	df000215 	stw	fp,8(sp)
    207c:	df000204 	addi	fp,sp,8
    2080:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	11000a04 	addi	r4,r2,40
    2098:	e0bfff17 	ldw	r2,-4(fp)
    209c:	11400217 	ldw	r5,8(r2)
    20a0:	00024a00 	call	24a0 <altera_avalon_jtag_uart_close>
}
    20a4:	e037883a 	mov	sp,fp
    20a8:	dfc00117 	ldw	ra,4(sp)
    20ac:	df000017 	ldw	fp,0(sp)
    20b0:	dec00204 	addi	sp,sp,8
    20b4:	f800283a 	ret

000020b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    20b8:	defffa04 	addi	sp,sp,-24
    20bc:	dfc00515 	stw	ra,20(sp)
    20c0:	df000415 	stw	fp,16(sp)
    20c4:	df000404 	addi	fp,sp,16
    20c8:	e13ffd15 	stw	r4,-12(fp)
    20cc:	e17ffe15 	stw	r5,-8(fp)
    20d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    20d4:	e0bffd17 	ldw	r2,-12(fp)
    20d8:	10800017 	ldw	r2,0(r2)
    20dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    20e0:	e0bffc17 	ldw	r2,-16(fp)
    20e4:	11000a04 	addi	r4,r2,40
    20e8:	e17ffe17 	ldw	r5,-8(fp)
    20ec:	e1bfff17 	ldw	r6,-4(fp)
    20f0:	00025140 	call	2514 <altera_avalon_jtag_uart_ioctl>
}
    20f4:	e037883a 	mov	sp,fp
    20f8:	dfc00117 	ldw	ra,4(sp)
    20fc:	df000017 	ldw	fp,0(sp)
    2100:	dec00204 	addi	sp,sp,8
    2104:	f800283a 	ret

00002108 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2108:	defffa04 	addi	sp,sp,-24
    210c:	dfc00515 	stw	ra,20(sp)
    2110:	df000415 	stw	fp,16(sp)
    2114:	df000404 	addi	fp,sp,16
    2118:	e13ffd15 	stw	r4,-12(fp)
    211c:	e17ffe15 	stw	r5,-8(fp)
    2120:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2124:	e0fffd17 	ldw	r3,-12(fp)
    2128:	00800044 	movi	r2,1
    212c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    2130:	e0bffd17 	ldw	r2,-12(fp)
    2134:	10800017 	ldw	r2,0(r2)
    2138:	11000104 	addi	r4,r2,4
    213c:	e0bffd17 	ldw	r2,-12(fp)
    2140:	10800817 	ldw	r2,32(r2)
    2144:	1007883a 	mov	r3,r2
    2148:	2005883a 	mov	r2,r4
    214c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    2150:	e13ffe17 	ldw	r4,-8(fp)
    2154:	e17fff17 	ldw	r5,-4(fp)
    2158:	d8000015 	stw	zero,0(sp)
    215c:	01800034 	movhi	r6,0
    2160:	31887204 	addi	r6,r6,8648
    2164:	e1fffd17 	ldw	r7,-12(fp)
    2168:	0002f0c0 	call	2f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    216c:	e0bffd17 	ldw	r2,-12(fp)
    2170:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    2174:	e0bffd17 	ldw	r2,-12(fp)
    2178:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    217c:	00800074 	movhi	r2,1
    2180:	10a34f04 	addi	r2,r2,-29380
    2184:	10800017 	ldw	r2,0(r2)
    2188:	100b883a 	mov	r5,r2
    218c:	01800034 	movhi	r6,0
    2190:	3188fc04 	addi	r6,r6,9200
    2194:	e1fffd17 	ldw	r7,-12(fp)
    2198:	00017140 	call	1714 <alt_alarm_start>
    219c:	1004403a 	cmpge	r2,r2,zero
    21a0:	1000041e 	bne	r2,zero,21b4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    21a4:	e0fffd17 	ldw	r3,-12(fp)
    21a8:	00a00034 	movhi	r2,32768
    21ac:	10bfffc4 	addi	r2,r2,-1
    21b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    21b4:	e037883a 	mov	sp,fp
    21b8:	dfc00117 	ldw	ra,4(sp)
    21bc:	df000017 	ldw	fp,0(sp)
    21c0:	dec00204 	addi	sp,sp,8
    21c4:	f800283a 	ret

000021c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    21c8:	defff804 	addi	sp,sp,-32
    21cc:	df000715 	stw	fp,28(sp)
    21d0:	df000704 	addi	fp,sp,28
    21d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    21d8:	e0bfff17 	ldw	r2,-4(fp)
    21dc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    21e0:	e0bffe17 	ldw	r2,-8(fp)
    21e4:	10800017 	ldw	r2,0(r2)
    21e8:	e0bffd15 	stw	r2,-12(fp)
    21ec:	00000006 	br	21f0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    21f0:	e0bffd17 	ldw	r2,-12(fp)
    21f4:	10800104 	addi	r2,r2,4
    21f8:	10800037 	ldwio	r2,0(r2)
    21fc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    2200:	e0bffc17 	ldw	r2,-16(fp)
    2204:	1080c00c 	andi	r2,r2,768
    2208:	1005003a 	cmpeq	r2,r2,zero
    220c:	1000741e 	bne	r2,zero,23e0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    2210:	e0bffc17 	ldw	r2,-16(fp)
    2214:	1080400c 	andi	r2,r2,256
    2218:	1005003a 	cmpeq	r2,r2,zero
    221c:	1000351e 	bne	r2,zero,22f4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    2220:	00800074 	movhi	r2,1
    2224:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2228:	e0bffe17 	ldw	r2,-8(fp)
    222c:	10800a17 	ldw	r2,40(r2)
    2230:	10800044 	addi	r2,r2,1
    2234:	1081ffcc 	andi	r2,r2,2047
    2238:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    223c:	e0bffe17 	ldw	r2,-8(fp)
    2240:	10c00b17 	ldw	r3,44(r2)
    2244:	e0bffa17 	ldw	r2,-24(fp)
    2248:	18801626 	beq	r3,r2,22a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    224c:	e0bffd17 	ldw	r2,-12(fp)
    2250:	10800037 	ldwio	r2,0(r2)
    2254:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    2258:	e0bffb17 	ldw	r2,-20(fp)
    225c:	10a0000c 	andi	r2,r2,32768
    2260:	1005003a 	cmpeq	r2,r2,zero
    2264:	10000f1e 	bne	r2,zero,22a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2268:	e0bffe17 	ldw	r2,-8(fp)
    226c:	10c00a17 	ldw	r3,40(r2)
    2270:	e0bffb17 	ldw	r2,-20(fp)
    2274:	1009883a 	mov	r4,r2
    2278:	e0bffe17 	ldw	r2,-8(fp)
    227c:	1885883a 	add	r2,r3,r2
    2280:	10800e04 	addi	r2,r2,56
    2284:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2288:	e0bffe17 	ldw	r2,-8(fp)
    228c:	10800a17 	ldw	r2,40(r2)
    2290:	10800044 	addi	r2,r2,1
    2294:	10c1ffcc 	andi	r3,r2,2047
    2298:	e0bffe17 	ldw	r2,-8(fp)
    229c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    22a0:	003fe106 	br	2228 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	10bfffec 	andhi	r2,r2,65535
    22ac:	1005003a 	cmpeq	r2,r2,zero
    22b0:	1000101e 	bne	r2,zero,22f4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    22b4:	e0bffe17 	ldw	r2,-8(fp)
    22b8:	10c00817 	ldw	r3,32(r2)
    22bc:	00bfff84 	movi	r2,-2
    22c0:	1886703a 	and	r3,r3,r2
    22c4:	e0bffe17 	ldw	r2,-8(fp)
    22c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    22cc:	e0bffd17 	ldw	r2,-12(fp)
    22d0:	11000104 	addi	r4,r2,4
    22d4:	e0bffe17 	ldw	r2,-8(fp)
    22d8:	10800817 	ldw	r2,32(r2)
    22dc:	1007883a 	mov	r3,r2
    22e0:	2005883a 	mov	r2,r4
    22e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    22e8:	e0bffd17 	ldw	r2,-12(fp)
    22ec:	10800104 	addi	r2,r2,4
    22f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    22f4:	e0bffc17 	ldw	r2,-16(fp)
    22f8:	1080800c 	andi	r2,r2,512
    22fc:	1005003a 	cmpeq	r2,r2,zero
    2300:	103fbb1e 	bne	r2,zero,21f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    2304:	e0bffc17 	ldw	r2,-16(fp)
    2308:	10bfffec 	andhi	r2,r2,65535
    230c:	1004d43a 	srli	r2,r2,16
    2310:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    2314:	00001506 	br	236c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    2318:	e13ffd17 	ldw	r4,-12(fp)
    231c:	e0bffe17 	ldw	r2,-8(fp)
    2320:	10c00d17 	ldw	r3,52(r2)
    2324:	e0bffe17 	ldw	r2,-8(fp)
    2328:	1885883a 	add	r2,r3,r2
    232c:	10820e04 	addi	r2,r2,2104
    2330:	10800003 	ldbu	r2,0(r2)
    2334:	10c03fcc 	andi	r3,r2,255
    2338:	18c0201c 	xori	r3,r3,128
    233c:	18ffe004 	addi	r3,r3,-128
    2340:	2005883a 	mov	r2,r4
    2344:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2348:	e0bffe17 	ldw	r2,-8(fp)
    234c:	10800d17 	ldw	r2,52(r2)
    2350:	10800044 	addi	r2,r2,1
    2354:	10c1ffcc 	andi	r3,r2,2047
    2358:	e0bffe17 	ldw	r2,-8(fp)
    235c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2360:	e0bff917 	ldw	r2,-28(fp)
    2364:	10bfffc4 	addi	r2,r2,-1
    2368:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    236c:	e0bff917 	ldw	r2,-28(fp)
    2370:	1005003a 	cmpeq	r2,r2,zero
    2374:	1000051e 	bne	r2,zero,238c <altera_avalon_jtag_uart_irq+0x1c4>
    2378:	e0bffe17 	ldw	r2,-8(fp)
    237c:	10c00d17 	ldw	r3,52(r2)
    2380:	e0bffe17 	ldw	r2,-8(fp)
    2384:	10800c17 	ldw	r2,48(r2)
    2388:	18bfe31e 	bne	r3,r2,2318 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    238c:	e0bff917 	ldw	r2,-28(fp)
    2390:	1005003a 	cmpeq	r2,r2,zero
    2394:	103f961e 	bne	r2,zero,21f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2398:	e0bffe17 	ldw	r2,-8(fp)
    239c:	10c00817 	ldw	r3,32(r2)
    23a0:	00bfff44 	movi	r2,-3
    23a4:	1886703a 	and	r3,r3,r2
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    23b0:	e0bffe17 	ldw	r2,-8(fp)
    23b4:	10800017 	ldw	r2,0(r2)
    23b8:	11000104 	addi	r4,r2,4
    23bc:	e0bffe17 	ldw	r2,-8(fp)
    23c0:	10800817 	ldw	r2,32(r2)
    23c4:	1007883a 	mov	r3,r2
    23c8:	2005883a 	mov	r2,r4
    23cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    23d0:	e0bffd17 	ldw	r2,-12(fp)
    23d4:	10800104 	addi	r2,r2,4
    23d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    23dc:	003f8406 	br	21f0 <altera_avalon_jtag_uart_irq+0x28>
}
    23e0:	e037883a 	mov	sp,fp
    23e4:	df000017 	ldw	fp,0(sp)
    23e8:	dec00104 	addi	sp,sp,4
    23ec:	f800283a 	ret

000023f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    23f0:	defffc04 	addi	sp,sp,-16
    23f4:	df000315 	stw	fp,12(sp)
    23f8:	df000304 	addi	fp,sp,12
    23fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    2400:	e0bfff17 	ldw	r2,-4(fp)
    2404:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    2408:	e0bffe17 	ldw	r2,-8(fp)
    240c:	10800017 	ldw	r2,0(r2)
    2410:	10800104 	addi	r2,r2,4
    2414:	10800037 	ldwio	r2,0(r2)
    2418:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    241c:	e0bffd17 	ldw	r2,-12(fp)
    2420:	1081000c 	andi	r2,r2,1024
    2424:	1005003a 	cmpeq	r2,r2,zero
    2428:	10000c1e 	bne	r2,zero,245c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    242c:	e0bffe17 	ldw	r2,-8(fp)
    2430:	10800017 	ldw	r2,0(r2)
    2434:	11000104 	addi	r4,r2,4
    2438:	e0bffe17 	ldw	r2,-8(fp)
    243c:	10800817 	ldw	r2,32(r2)
    2440:	10810014 	ori	r2,r2,1024
    2444:	1007883a 	mov	r3,r2
    2448:	2005883a 	mov	r2,r4
    244c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    2450:	e0bffe17 	ldw	r2,-8(fp)
    2454:	10000915 	stw	zero,36(r2)
    2458:	00000a06 	br	2484 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    245c:	e0bffe17 	ldw	r2,-8(fp)
    2460:	10c00917 	ldw	r3,36(r2)
    2464:	00a00034 	movhi	r2,32768
    2468:	10bfff04 	addi	r2,r2,-4
    246c:	10c00536 	bltu	r2,r3,2484 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    2470:	e0bffe17 	ldw	r2,-8(fp)
    2474:	10800917 	ldw	r2,36(r2)
    2478:	10c00044 	addi	r3,r2,1
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	10c00915 	stw	r3,36(r2)
    2484:	00800074 	movhi	r2,1
    2488:	10a34f04 	addi	r2,r2,-29380
    248c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2490:	e037883a 	mov	sp,fp
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00104 	addi	sp,sp,4
    249c:	f800283a 	ret

000024a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    24a0:	defffc04 	addi	sp,sp,-16
    24a4:	df000315 	stw	fp,12(sp)
    24a8:	df000304 	addi	fp,sp,12
    24ac:	e13ffd15 	stw	r4,-12(fp)
    24b0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    24b4:	00000706 	br	24d4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    24b8:	e0bffe17 	ldw	r2,-8(fp)
    24bc:	1090000c 	andi	r2,r2,16384
    24c0:	1005003a 	cmpeq	r2,r2,zero
    24c4:	1000031e 	bne	r2,zero,24d4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    24c8:	00bffd44 	movi	r2,-11
    24cc:	e0bfff15 	stw	r2,-4(fp)
    24d0:	00000b06 	br	2500 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    24d4:	e0bffd17 	ldw	r2,-12(fp)
    24d8:	10c00d17 	ldw	r3,52(r2)
    24dc:	e0bffd17 	ldw	r2,-12(fp)
    24e0:	10800c17 	ldw	r2,48(r2)
    24e4:	18800526 	beq	r3,r2,24fc <altera_avalon_jtag_uart_close+0x5c>
    24e8:	e0bffd17 	ldw	r2,-12(fp)
    24ec:	10c00917 	ldw	r3,36(r2)
    24f0:	e0bffd17 	ldw	r2,-12(fp)
    24f4:	10800117 	ldw	r2,4(r2)
    24f8:	18bfef36 	bltu	r3,r2,24b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    24fc:	e03fff15 	stw	zero,-4(fp)
    2500:	e0bfff17 	ldw	r2,-4(fp)
}
    2504:	e037883a 	mov	sp,fp
    2508:	df000017 	ldw	fp,0(sp)
    250c:	dec00104 	addi	sp,sp,4
    2510:	f800283a 	ret

00002514 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    2514:	defff804 	addi	sp,sp,-32
    2518:	df000715 	stw	fp,28(sp)
    251c:	df000704 	addi	fp,sp,28
    2520:	e13ffb15 	stw	r4,-20(fp)
    2524:	e17ffc15 	stw	r5,-16(fp)
    2528:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    252c:	00bff9c4 	movi	r2,-25
    2530:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    2534:	e0bffc17 	ldw	r2,-16(fp)
    2538:	e0bfff15 	stw	r2,-4(fp)
    253c:	e0ffff17 	ldw	r3,-4(fp)
    2540:	189a8060 	cmpeqi	r2,r3,27137
    2544:	1000041e 	bne	r2,zero,2558 <altera_avalon_jtag_uart_ioctl+0x44>
    2548:	e0ffff17 	ldw	r3,-4(fp)
    254c:	189a80a0 	cmpeqi	r2,r3,27138
    2550:	10001b1e 	bne	r2,zero,25c0 <altera_avalon_jtag_uart_ioctl+0xac>
    2554:	00002706 	br	25f4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    2558:	e0bffb17 	ldw	r2,-20(fp)
    255c:	10c00117 	ldw	r3,4(r2)
    2560:	00a00034 	movhi	r2,32768
    2564:	10bfffc4 	addi	r2,r2,-1
    2568:	18802226 	beq	r3,r2,25f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    256c:	e0bffd17 	ldw	r2,-12(fp)
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2578:	e0bff917 	ldw	r2,-28(fp)
    257c:	10800090 	cmplti	r2,r2,2
    2580:	1000071e 	bne	r2,zero,25a0 <altera_avalon_jtag_uart_ioctl+0x8c>
    2584:	e0fff917 	ldw	r3,-28(fp)
    2588:	00a00034 	movhi	r2,32768
    258c:	10bfffc4 	addi	r2,r2,-1
    2590:	18800326 	beq	r3,r2,25a0 <altera_avalon_jtag_uart_ioctl+0x8c>
    2594:	e0bff917 	ldw	r2,-28(fp)
    2598:	e0bffe15 	stw	r2,-8(fp)
    259c:	00000306 	br	25ac <altera_avalon_jtag_uart_ioctl+0x98>
    25a0:	00e00034 	movhi	r3,32768
    25a4:	18ffff84 	addi	r3,r3,-2
    25a8:	e0fffe15 	stw	r3,-8(fp)
    25ac:	e0bffb17 	ldw	r2,-20(fp)
    25b0:	e0fffe17 	ldw	r3,-8(fp)
    25b4:	10c00115 	stw	r3,4(r2)
      rc = 0;
    25b8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    25bc:	00000d06 	br	25f4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    25c0:	e0bffb17 	ldw	r2,-20(fp)
    25c4:	10c00117 	ldw	r3,4(r2)
    25c8:	00a00034 	movhi	r2,32768
    25cc:	10bfffc4 	addi	r2,r2,-1
    25d0:	18800826 	beq	r3,r2,25f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    25d4:	e13ffd17 	ldw	r4,-12(fp)
    25d8:	e0bffb17 	ldw	r2,-20(fp)
    25dc:	10c00917 	ldw	r3,36(r2)
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	10800117 	ldw	r2,4(r2)
    25e8:	1885803a 	cmpltu	r2,r3,r2
    25ec:	20800015 	stw	r2,0(r4)
      rc = 0;
    25f0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    25f4:	e0bffa17 	ldw	r2,-24(fp)
}
    25f8:	e037883a 	mov	sp,fp
    25fc:	df000017 	ldw	fp,0(sp)
    2600:	dec00104 	addi	sp,sp,4
    2604:	f800283a 	ret

00002608 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    2608:	defff204 	addi	sp,sp,-56
    260c:	dfc00d15 	stw	ra,52(sp)
    2610:	df000c15 	stw	fp,48(sp)
    2614:	df000c04 	addi	fp,sp,48
    2618:	e13ffb15 	stw	r4,-20(fp)
    261c:	e17ffc15 	stw	r5,-16(fp)
    2620:	e1bffd15 	stw	r6,-12(fp)
    2624:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    2628:	e0bffc17 	ldw	r2,-16(fp)
    262c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2630:	00004806 	br	2754 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2634:	e0bffb17 	ldw	r2,-20(fp)
    2638:	10800a17 	ldw	r2,40(r2)
    263c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    2640:	e0bffb17 	ldw	r2,-20(fp)
    2644:	10800b17 	ldw	r2,44(r2)
    2648:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    264c:	e0fff717 	ldw	r3,-36(fp)
    2650:	e0bff617 	ldw	r2,-40(fp)
    2654:	18800536 	bltu	r3,r2,266c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    2658:	e0bff717 	ldw	r2,-36(fp)
    265c:	e0fff617 	ldw	r3,-40(fp)
    2660:	10c5c83a 	sub	r2,r2,r3
    2664:	e0bff815 	stw	r2,-32(fp)
    2668:	00000406 	br	267c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    266c:	00820004 	movi	r2,2048
    2670:	e0fff617 	ldw	r3,-40(fp)
    2674:	10c5c83a 	sub	r2,r2,r3
    2678:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    267c:	e0bff817 	ldw	r2,-32(fp)
    2680:	1005003a 	cmpeq	r2,r2,zero
    2684:	10001f1e 	bne	r2,zero,2704 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    2688:	e0fffd17 	ldw	r3,-12(fp)
    268c:	e0bff817 	ldw	r2,-32(fp)
    2690:	1880022e 	bgeu	r3,r2,269c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    2694:	e0bffd17 	ldw	r2,-12(fp)
    2698:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    269c:	e0bffb17 	ldw	r2,-20(fp)
    26a0:	10c00e04 	addi	r3,r2,56
    26a4:	e0bff617 	ldw	r2,-40(fp)
    26a8:	1887883a 	add	r3,r3,r2
    26ac:	e0bffa17 	ldw	r2,-24(fp)
    26b0:	1009883a 	mov	r4,r2
    26b4:	180b883a 	mov	r5,r3
    26b8:	e1bff817 	ldw	r6,-32(fp)
    26bc:	00039e80 	call	39e8 <memcpy>
      ptr   += n;
    26c0:	e0fff817 	ldw	r3,-32(fp)
    26c4:	e0bffa17 	ldw	r2,-24(fp)
    26c8:	10c5883a 	add	r2,r2,r3
    26cc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    26d0:	e0fffd17 	ldw	r3,-12(fp)
    26d4:	e0bff817 	ldw	r2,-32(fp)
    26d8:	1885c83a 	sub	r2,r3,r2
    26dc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    26e0:	e0fff617 	ldw	r3,-40(fp)
    26e4:	e0bff817 	ldw	r2,-32(fp)
    26e8:	1885883a 	add	r2,r3,r2
    26ec:	10c1ffcc 	andi	r3,r2,2047
    26f0:	e0bffb17 	ldw	r2,-20(fp)
    26f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    26f8:	e0bffd17 	ldw	r2,-12(fp)
    26fc:	10800048 	cmpgei	r2,r2,1
    2700:	103fcc1e 	bne	r2,zero,2634 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    2704:	e0fffa17 	ldw	r3,-24(fp)
    2708:	e0bffc17 	ldw	r2,-16(fp)
    270c:	1880141e 	bne	r3,r2,2760 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    2710:	e0bffe17 	ldw	r2,-8(fp)
    2714:	1090000c 	andi	r2,r2,16384
    2718:	1004c03a 	cmpne	r2,r2,zero
    271c:	1000101e 	bne	r2,zero,2760 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    2720:	e0bffb17 	ldw	r2,-20(fp)
    2724:	10c00a17 	ldw	r3,40(r2)
    2728:	e0bff717 	ldw	r2,-36(fp)
    272c:	1880051e 	bne	r3,r2,2744 <altera_avalon_jtag_uart_read+0x13c>
    2730:	e0bffb17 	ldw	r2,-20(fp)
    2734:	10c00917 	ldw	r3,36(r2)
    2738:	e0bffb17 	ldw	r2,-20(fp)
    273c:	10800117 	ldw	r2,4(r2)
    2740:	18bff736 	bltu	r3,r2,2720 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    2744:	e0bffb17 	ldw	r2,-20(fp)
    2748:	10c00a17 	ldw	r3,40(r2)
    274c:	e0bff717 	ldw	r2,-36(fp)
    2750:	18800326 	beq	r3,r2,2760 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2754:	e0bffd17 	ldw	r2,-12(fp)
    2758:	10800048 	cmpgei	r2,r2,1
    275c:	103fb51e 	bne	r2,zero,2634 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    2760:	e0fffa17 	ldw	r3,-24(fp)
    2764:	e0bffc17 	ldw	r2,-16(fp)
    2768:	18801926 	beq	r3,r2,27d0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    276c:	0005303a 	rdctl	r2,status
    2770:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2774:	e0fff517 	ldw	r3,-44(fp)
    2778:	00bfff84 	movi	r2,-2
    277c:	1884703a 	and	r2,r3,r2
    2780:	1001703a 	wrctl	status,r2
  
  return context;
    2784:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2788:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    278c:	e0bffb17 	ldw	r2,-20(fp)
    2790:	10800817 	ldw	r2,32(r2)
    2794:	10c00054 	ori	r3,r2,1
    2798:	e0bffb17 	ldw	r2,-20(fp)
    279c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    27a0:	e0bffb17 	ldw	r2,-20(fp)
    27a4:	10800017 	ldw	r2,0(r2)
    27a8:	11000104 	addi	r4,r2,4
    27ac:	e0bffb17 	ldw	r2,-20(fp)
    27b0:	10800817 	ldw	r2,32(r2)
    27b4:	1007883a 	mov	r3,r2
    27b8:	2005883a 	mov	r2,r4
    27bc:	10c00035 	stwio	r3,0(r2)
    27c0:	e0bff917 	ldw	r2,-28(fp)
    27c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27c8:	e0bff417 	ldw	r2,-48(fp)
    27cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    27d0:	e0fffa17 	ldw	r3,-24(fp)
    27d4:	e0bffc17 	ldw	r2,-16(fp)
    27d8:	18800526 	beq	r3,r2,27f0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    27dc:	e0fffa17 	ldw	r3,-24(fp)
    27e0:	e0bffc17 	ldw	r2,-16(fp)
    27e4:	1887c83a 	sub	r3,r3,r2
    27e8:	e0ffff15 	stw	r3,-4(fp)
    27ec:	00000906 	br	2814 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    27f0:	e0bffe17 	ldw	r2,-8(fp)
    27f4:	1090000c 	andi	r2,r2,16384
    27f8:	1005003a 	cmpeq	r2,r2,zero
    27fc:	1000031e 	bne	r2,zero,280c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    2800:	00bffd44 	movi	r2,-11
    2804:	e0bfff15 	stw	r2,-4(fp)
    2808:	00000206 	br	2814 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    280c:	00bffec4 	movi	r2,-5
    2810:	e0bfff15 	stw	r2,-4(fp)
    2814:	e0bfff17 	ldw	r2,-4(fp)
}
    2818:	e037883a 	mov	sp,fp
    281c:	dfc00117 	ldw	ra,4(sp)
    2820:	df000017 	ldw	fp,0(sp)
    2824:	dec00204 	addi	sp,sp,8
    2828:	f800283a 	ret

0000282c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    282c:	defff204 	addi	sp,sp,-56
    2830:	dfc00d15 	stw	ra,52(sp)
    2834:	df000c15 	stw	fp,48(sp)
    2838:	df000c04 	addi	fp,sp,48
    283c:	e13ffb15 	stw	r4,-20(fp)
    2840:	e17ffc15 	stw	r5,-16(fp)
    2844:	e1bffd15 	stw	r6,-12(fp)
    2848:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    284c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2850:	e0bffc17 	ldw	r2,-16(fp)
    2854:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2858:	00003a06 	br	2944 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    285c:	e0bffb17 	ldw	r2,-20(fp)
    2860:	10800c17 	ldw	r2,48(r2)
    2864:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    2868:	e0bffb17 	ldw	r2,-20(fp)
    286c:	10800d17 	ldw	r2,52(r2)
    2870:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    2874:	e0fffa17 	ldw	r3,-24(fp)
    2878:	e0bff917 	ldw	r2,-28(fp)
    287c:	1880062e 	bgeu	r3,r2,2898 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2880:	e0fff917 	ldw	r3,-28(fp)
    2884:	e0bffa17 	ldw	r2,-24(fp)
    2888:	1885c83a 	sub	r2,r3,r2
    288c:	10bfffc4 	addi	r2,r2,-1
    2890:	e0bff815 	stw	r2,-32(fp)
    2894:	00000c06 	br	28c8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    2898:	e0bff917 	ldw	r2,-28(fp)
    289c:	1005003a 	cmpeq	r2,r2,zero
    28a0:	1000051e 	bne	r2,zero,28b8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    28a4:	00820004 	movi	r2,2048
    28a8:	e0fffa17 	ldw	r3,-24(fp)
    28ac:	10c5c83a 	sub	r2,r2,r3
    28b0:	e0bff815 	stw	r2,-32(fp)
    28b4:	00000406 	br	28c8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    28b8:	0081ffc4 	movi	r2,2047
    28bc:	e0fffa17 	ldw	r3,-24(fp)
    28c0:	10c5c83a 	sub	r2,r2,r3
    28c4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    28c8:	e0bff817 	ldw	r2,-32(fp)
    28cc:	1005003a 	cmpeq	r2,r2,zero
    28d0:	10001f1e 	bne	r2,zero,2950 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    28d4:	e0fffd17 	ldw	r3,-12(fp)
    28d8:	e0bff817 	ldw	r2,-32(fp)
    28dc:	1880022e 	bgeu	r3,r2,28e8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    28e0:	e0bffd17 	ldw	r2,-12(fp)
    28e4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    28e8:	e0bffb17 	ldw	r2,-20(fp)
    28ec:	10c20e04 	addi	r3,r2,2104
    28f0:	e0bffa17 	ldw	r2,-24(fp)
    28f4:	1885883a 	add	r2,r3,r2
    28f8:	e0fffc17 	ldw	r3,-16(fp)
    28fc:	1009883a 	mov	r4,r2
    2900:	180b883a 	mov	r5,r3
    2904:	e1bff817 	ldw	r6,-32(fp)
    2908:	00039e80 	call	39e8 <memcpy>
      ptr   += n;
    290c:	e0fff817 	ldw	r3,-32(fp)
    2910:	e0bffc17 	ldw	r2,-16(fp)
    2914:	10c5883a 	add	r2,r2,r3
    2918:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    291c:	e0fffd17 	ldw	r3,-12(fp)
    2920:	e0bff817 	ldw	r2,-32(fp)
    2924:	1885c83a 	sub	r2,r3,r2
    2928:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    292c:	e0fffa17 	ldw	r3,-24(fp)
    2930:	e0bff817 	ldw	r2,-32(fp)
    2934:	1885883a 	add	r2,r3,r2
    2938:	10c1ffcc 	andi	r3,r2,2047
    293c:	e0bffb17 	ldw	r2,-20(fp)
    2940:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2944:	e0bffd17 	ldw	r2,-12(fp)
    2948:	10800048 	cmpgei	r2,r2,1
    294c:	103fc31e 	bne	r2,zero,285c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2950:	0005303a 	rdctl	r2,status
    2954:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2958:	e0fff517 	ldw	r3,-44(fp)
    295c:	00bfff84 	movi	r2,-2
    2960:	1884703a 	and	r2,r3,r2
    2964:	1001703a 	wrctl	status,r2
  
  return context;
    2968:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    296c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2970:	e0bffb17 	ldw	r2,-20(fp)
    2974:	10800817 	ldw	r2,32(r2)
    2978:	10c00094 	ori	r3,r2,2
    297c:	e0bffb17 	ldw	r2,-20(fp)
    2980:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2984:	e0bffb17 	ldw	r2,-20(fp)
    2988:	10800017 	ldw	r2,0(r2)
    298c:	11000104 	addi	r4,r2,4
    2990:	e0bffb17 	ldw	r2,-20(fp)
    2994:	10800817 	ldw	r2,32(r2)
    2998:	1007883a 	mov	r3,r2
    299c:	2005883a 	mov	r2,r4
    29a0:	10c00035 	stwio	r3,0(r2)
    29a4:	e0bff717 	ldw	r2,-36(fp)
    29a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    29ac:	e0bff417 	ldw	r2,-48(fp)
    29b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    29b4:	e0bffd17 	ldw	r2,-12(fp)
    29b8:	10800050 	cmplti	r2,r2,1
    29bc:	1000111e 	bne	r2,zero,2a04 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    29c0:	e0bffe17 	ldw	r2,-8(fp)
    29c4:	1090000c 	andi	r2,r2,16384
    29c8:	1004c03a 	cmpne	r2,r2,zero
    29cc:	1000101e 	bne	r2,zero,2a10 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    29d0:	e0bffb17 	ldw	r2,-20(fp)
    29d4:	10c00d17 	ldw	r3,52(r2)
    29d8:	e0bff917 	ldw	r2,-28(fp)
    29dc:	1880051e 	bne	r3,r2,29f4 <altera_avalon_jtag_uart_write+0x1c8>
    29e0:	e0bffb17 	ldw	r2,-20(fp)
    29e4:	10c00917 	ldw	r3,36(r2)
    29e8:	e0bffb17 	ldw	r2,-20(fp)
    29ec:	10800117 	ldw	r2,4(r2)
    29f0:	18bff736 	bltu	r3,r2,29d0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    29f4:	e0bffb17 	ldw	r2,-20(fp)
    29f8:	10c00d17 	ldw	r3,52(r2)
    29fc:	e0bff917 	ldw	r2,-28(fp)
    2a00:	18800326 	beq	r3,r2,2a10 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    2a04:	e0bffd17 	ldw	r2,-12(fp)
    2a08:	10800048 	cmpgei	r2,r2,1
    2a0c:	103fcd1e 	bne	r2,zero,2944 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2a10:	e0fffc17 	ldw	r3,-16(fp)
    2a14:	e0bff617 	ldw	r2,-40(fp)
    2a18:	18800526 	beq	r3,r2,2a30 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    2a1c:	e0fffc17 	ldw	r3,-16(fp)
    2a20:	e0bff617 	ldw	r2,-40(fp)
    2a24:	1887c83a 	sub	r3,r3,r2
    2a28:	e0ffff15 	stw	r3,-4(fp)
    2a2c:	00000906 	br	2a54 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    2a30:	e0bffe17 	ldw	r2,-8(fp)
    2a34:	1090000c 	andi	r2,r2,16384
    2a38:	1005003a 	cmpeq	r2,r2,zero
    2a3c:	1000031e 	bne	r2,zero,2a4c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    2a40:	00bffd44 	movi	r2,-11
    2a44:	e0bfff15 	stw	r2,-4(fp)
    2a48:	00000206 	br	2a54 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    2a4c:	00bffec4 	movi	r2,-5
    2a50:	e0bfff15 	stw	r2,-4(fp)
    2a54:	e0bfff17 	ldw	r2,-4(fp)
}
    2a58:	e037883a 	mov	sp,fp
    2a5c:	dfc00117 	ldw	ra,4(sp)
    2a60:	df000017 	ldw	fp,0(sp)
    2a64:	dec00204 	addi	sp,sp,8
    2a68:	f800283a 	ret

00002a6c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    2a6c:	defffa04 	addi	sp,sp,-24
    2a70:	dfc00515 	stw	ra,20(sp)
    2a74:	df000415 	stw	fp,16(sp)
    2a78:	df000404 	addi	fp,sp,16
    2a7c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2a80:	e0bfff17 	ldw	r2,-4(fp)
    2a84:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2a88:	e0bfff17 	ldw	r2,-4(fp)
    2a8c:	10800104 	addi	r2,r2,4
    2a90:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a94:	0005303a 	rdctl	r2,status
    2a98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a9c:	e0fffd17 	ldw	r3,-12(fp)
    2aa0:	00bfff84 	movi	r2,-2
    2aa4:	1884703a 	and	r2,r3,r2
    2aa8:	1001703a 	wrctl	status,r2
  
  return context;
    2aac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    2ab0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    2ab4:	0001dec0 	call	1dec <alt_tick>
    2ab8:	e0bffe17 	ldw	r2,-8(fp)
    2abc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ac0:	e0bffc17 	ldw	r2,-16(fp)
    2ac4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    2ac8:	e037883a 	mov	sp,fp
    2acc:	dfc00117 	ldw	ra,4(sp)
    2ad0:	df000017 	ldw	fp,0(sp)
    2ad4:	dec00204 	addi	sp,sp,8
    2ad8:	f800283a 	ret

00002adc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    2adc:	defff804 	addi	sp,sp,-32
    2ae0:	dfc00715 	stw	ra,28(sp)
    2ae4:	df000615 	stw	fp,24(sp)
    2ae8:	df000604 	addi	fp,sp,24
    2aec:	e13ffc15 	stw	r4,-16(fp)
    2af0:	e17ffd15 	stw	r5,-12(fp)
    2af4:	e1bffe15 	stw	r6,-8(fp)
    2af8:	e1ffff15 	stw	r7,-4(fp)
    2afc:	e0bfff17 	ldw	r2,-4(fp)
    2b00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    2b04:	00800074 	movhi	r2,1
    2b08:	10a34f04 	addi	r2,r2,-29380
    2b0c:	10800017 	ldw	r2,0(r2)
    2b10:	1004c03a 	cmpne	r2,r2,zero
    2b14:	1000041e 	bne	r2,zero,2b28 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    2b18:	00c00074 	movhi	r3,1
    2b1c:	18e34f04 	addi	r3,r3,-29380
    2b20:	e0bffb17 	ldw	r2,-20(fp)
    2b24:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    2b28:	e0bffc17 	ldw	r2,-16(fp)
    2b2c:	10800104 	addi	r2,r2,4
    2b30:	1007883a 	mov	r3,r2
    2b34:	008001c4 	movi	r2,7
    2b38:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    2b3c:	d8000015 	stw	zero,0(sp)
    2b40:	e13ffd17 	ldw	r4,-12(fp)
    2b44:	e17ffe17 	ldw	r5,-8(fp)
    2b48:	01800034 	movhi	r6,0
    2b4c:	318a9b04 	addi	r6,r6,10860
    2b50:	e1fffc17 	ldw	r7,-16(fp)
    2b54:	0002f0c0 	call	2f0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    2b58:	e037883a 	mov	sp,fp
    2b5c:	dfc00117 	ldw	ra,4(sp)
    2b60:	df000017 	ldw	fp,0(sp)
    2b64:	dec00204 	addi	sp,sp,8
    2b68:	f800283a 	ret

00002b6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2b6c:	defff804 	addi	sp,sp,-32
    2b70:	dfc00715 	stw	ra,28(sp)
    2b74:	df000615 	stw	fp,24(sp)
    2b78:	df000604 	addi	fp,sp,24
    2b7c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2b80:	e0bffc17 	ldw	r2,-16(fp)
    2b84:	1004803a 	cmplt	r2,r2,zero
    2b88:	1000091e 	bne	r2,zero,2bb0 <close+0x44>
    2b8c:	e13ffc17 	ldw	r4,-16(fp)
    2b90:	01400304 	movi	r5,12
    2b94:	0000ac40 	call	ac4 <__mulsi3>
    2b98:	1007883a 	mov	r3,r2
    2b9c:	00800034 	movhi	r2,0
    2ba0:	109c4504 	addi	r2,r2,28948
    2ba4:	1887883a 	add	r3,r3,r2
    2ba8:	e0ffff15 	stw	r3,-4(fp)
    2bac:	00000106 	br	2bb4 <close+0x48>
    2bb0:	e03fff15 	stw	zero,-4(fp)
    2bb4:	e0bfff17 	ldw	r2,-4(fp)
    2bb8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2bbc:	e0bffb17 	ldw	r2,-20(fp)
    2bc0:	1005003a 	cmpeq	r2,r2,zero
    2bc4:	10001d1e 	bne	r2,zero,2c3c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2bc8:	e0bffb17 	ldw	r2,-20(fp)
    2bcc:	10800017 	ldw	r2,0(r2)
    2bd0:	10800417 	ldw	r2,16(r2)
    2bd4:	1005003a 	cmpeq	r2,r2,zero
    2bd8:	1000071e 	bne	r2,zero,2bf8 <close+0x8c>
    2bdc:	e0bffb17 	ldw	r2,-20(fp)
    2be0:	10800017 	ldw	r2,0(r2)
    2be4:	10800417 	ldw	r2,16(r2)
    2be8:	e13ffb17 	ldw	r4,-20(fp)
    2bec:	103ee83a 	callr	r2
    2bf0:	e0bffe15 	stw	r2,-8(fp)
    2bf4:	00000106 	br	2bfc <close+0x90>
    2bf8:	e03ffe15 	stw	zero,-8(fp)
    2bfc:	e0bffe17 	ldw	r2,-8(fp)
    2c00:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c04:	e13ffc17 	ldw	r4,-16(fp)
    2c08:	000360c0 	call	360c <alt_release_fd>
    if (rval < 0)
    2c0c:	e0bffa17 	ldw	r2,-24(fp)
    2c10:	1004403a 	cmpge	r2,r2,zero
    2c14:	1000071e 	bne	r2,zero,2c34 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2c18:	0002c6c0 	call	2c6c <alt_get_errno>
    2c1c:	e0fffa17 	ldw	r3,-24(fp)
    2c20:	00c7c83a 	sub	r3,zero,r3
    2c24:	10c00015 	stw	r3,0(r2)
      return -1;
    2c28:	00bfffc4 	movi	r2,-1
    2c2c:	e0bffd15 	stw	r2,-12(fp)
    2c30:	00000806 	br	2c54 <close+0xe8>
    }
    return 0;
    2c34:	e03ffd15 	stw	zero,-12(fp)
    2c38:	00000606 	br	2c54 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c3c:	0002c6c0 	call	2c6c <alt_get_errno>
    2c40:	1007883a 	mov	r3,r2
    2c44:	00801444 	movi	r2,81
    2c48:	18800015 	stw	r2,0(r3)
    return -1;
    2c4c:	00bfffc4 	movi	r2,-1
    2c50:	e0bffd15 	stw	r2,-12(fp)
    2c54:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2c58:	e037883a 	mov	sp,fp
    2c5c:	dfc00117 	ldw	ra,4(sp)
    2c60:	df000017 	ldw	fp,0(sp)
    2c64:	dec00204 	addi	sp,sp,8
    2c68:	f800283a 	ret

00002c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2c6c:	defffd04 	addi	sp,sp,-12
    2c70:	dfc00215 	stw	ra,8(sp)
    2c74:	df000115 	stw	fp,4(sp)
    2c78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2c7c:	00800034 	movhi	r2,0
    2c80:	109cb104 	addi	r2,r2,29380
    2c84:	10800017 	ldw	r2,0(r2)
    2c88:	1005003a 	cmpeq	r2,r2,zero
    2c8c:	1000061e 	bne	r2,zero,2ca8 <alt_get_errno+0x3c>
    2c90:	00800034 	movhi	r2,0
    2c94:	109cb104 	addi	r2,r2,29380
    2c98:	10800017 	ldw	r2,0(r2)
    2c9c:	103ee83a 	callr	r2
    2ca0:	e0bfff15 	stw	r2,-4(fp)
    2ca4:	00000306 	br	2cb4 <alt_get_errno+0x48>
    2ca8:	00800074 	movhi	r2,1
    2cac:	10a34b04 	addi	r2,r2,-29396
    2cb0:	e0bfff15 	stw	r2,-4(fp)
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
}
    2cb8:	e037883a 	mov	sp,fp
    2cbc:	dfc00117 	ldw	ra,4(sp)
    2cc0:	df000017 	ldw	fp,0(sp)
    2cc4:	dec00204 	addi	sp,sp,8
    2cc8:	f800283a 	ret

00002ccc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2ccc:	deffff04 	addi	sp,sp,-4
    2cd0:	df000015 	stw	fp,0(sp)
    2cd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2cd8:	e037883a 	mov	sp,fp
    2cdc:	df000017 	ldw	fp,0(sp)
    2ce0:	dec00104 	addi	sp,sp,4
    2ce4:	f800283a 	ret

00002ce8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2ce8:	defffc04 	addi	sp,sp,-16
    2cec:	df000315 	stw	fp,12(sp)
    2cf0:	df000304 	addi	fp,sp,12
    2cf4:	e13ffd15 	stw	r4,-12(fp)
    2cf8:	e17ffe15 	stw	r5,-8(fp)
    2cfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2d00:	e0bfff17 	ldw	r2,-4(fp)
}
    2d04:	e037883a 	mov	sp,fp
    2d08:	df000017 	ldw	fp,0(sp)
    2d0c:	dec00104 	addi	sp,sp,4
    2d10:	f800283a 	ret

00002d14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2d14:	defff904 	addi	sp,sp,-28
    2d18:	dfc00615 	stw	ra,24(sp)
    2d1c:	df000515 	stw	fp,20(sp)
    2d20:	df000504 	addi	fp,sp,20
    2d24:	e13ffd15 	stw	r4,-12(fp)
    2d28:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2d2c:	e0bffd17 	ldw	r2,-12(fp)
    2d30:	1005003a 	cmpeq	r2,r2,zero
    2d34:	1000041e 	bne	r2,zero,2d48 <alt_dev_llist_insert+0x34>
    2d38:	e0bffd17 	ldw	r2,-12(fp)
    2d3c:	10800217 	ldw	r2,8(r2)
    2d40:	1004c03a 	cmpne	r2,r2,zero
    2d44:	1000071e 	bne	r2,zero,2d64 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2d48:	0002dc80 	call	2dc8 <alt_get_errno>
    2d4c:	1007883a 	mov	r3,r2
    2d50:	00800584 	movi	r2,22
    2d54:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2d58:	00bffa84 	movi	r2,-22
    2d5c:	e0bfff15 	stw	r2,-4(fp)
    2d60:	00001306 	br	2db0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2d64:	e0fffd17 	ldw	r3,-12(fp)
    2d68:	e0bffe17 	ldw	r2,-8(fp)
    2d6c:	e0bffb15 	stw	r2,-20(fp)
    2d70:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2d74:	e0fffc17 	ldw	r3,-16(fp)
    2d78:	e0bffb17 	ldw	r2,-20(fp)
    2d7c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2d80:	e0bffb17 	ldw	r2,-20(fp)
    2d84:	10c00017 	ldw	r3,0(r2)
    2d88:	e0bffc17 	ldw	r2,-16(fp)
    2d8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2d90:	e0bffb17 	ldw	r2,-20(fp)
    2d94:	10c00017 	ldw	r3,0(r2)
    2d98:	e0bffc17 	ldw	r2,-16(fp)
    2d9c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2da0:	e0fffb17 	ldw	r3,-20(fp)
    2da4:	e0bffc17 	ldw	r2,-16(fp)
    2da8:	18800015 	stw	r2,0(r3)

  return 0;  
    2dac:	e03fff15 	stw	zero,-4(fp)
    2db0:	e0bfff17 	ldw	r2,-4(fp)
}
    2db4:	e037883a 	mov	sp,fp
    2db8:	dfc00117 	ldw	ra,4(sp)
    2dbc:	df000017 	ldw	fp,0(sp)
    2dc0:	dec00204 	addi	sp,sp,8
    2dc4:	f800283a 	ret

00002dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	dfc00215 	stw	ra,8(sp)
    2dd0:	df000115 	stw	fp,4(sp)
    2dd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2dd8:	00800034 	movhi	r2,0
    2ddc:	109cb104 	addi	r2,r2,29380
    2de0:	10800017 	ldw	r2,0(r2)
    2de4:	1005003a 	cmpeq	r2,r2,zero
    2de8:	1000061e 	bne	r2,zero,2e04 <alt_get_errno+0x3c>
    2dec:	00800034 	movhi	r2,0
    2df0:	109cb104 	addi	r2,r2,29380
    2df4:	10800017 	ldw	r2,0(r2)
    2df8:	103ee83a 	callr	r2
    2dfc:	e0bfff15 	stw	r2,-4(fp)
    2e00:	00000306 	br	2e10 <alt_get_errno+0x48>
    2e04:	00800074 	movhi	r2,1
    2e08:	10a34b04 	addi	r2,r2,-29396
    2e0c:	e0bfff15 	stw	r2,-4(fp)
    2e10:	e0bfff17 	ldw	r2,-4(fp)
}
    2e14:	e037883a 	mov	sp,fp
    2e18:	dfc00117 	ldw	ra,4(sp)
    2e1c:	df000017 	ldw	fp,0(sp)
    2e20:	dec00204 	addi	sp,sp,8
    2e24:	f800283a 	ret

00002e28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2e28:	defffd04 	addi	sp,sp,-12
    2e2c:	dfc00215 	stw	ra,8(sp)
    2e30:	df000115 	stw	fp,4(sp)
    2e34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2e38:	00bfff04 	movi	r2,-4
    2e3c:	00c00034 	movhi	r3,0
    2e40:	18d5dc04 	addi	r3,r3,22384
    2e44:	1885883a 	add	r2,r3,r2
    2e48:	e0bfff15 	stw	r2,-4(fp)
    2e4c:	00000606 	br	2e68 <_do_ctors+0x40>
        (*ctor) (); 
    2e50:	e0bfff17 	ldw	r2,-4(fp)
    2e54:	10800017 	ldw	r2,0(r2)
    2e58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2e5c:	e0bfff17 	ldw	r2,-4(fp)
    2e60:	10bfff04 	addi	r2,r2,-4
    2e64:	e0bfff15 	stw	r2,-4(fp)
    2e68:	e0ffff17 	ldw	r3,-4(fp)
    2e6c:	00800034 	movhi	r2,0
    2e70:	1095db04 	addi	r2,r2,22380
    2e74:	18bff62e 	bgeu	r3,r2,2e50 <_do_ctors+0x28>
        (*ctor) (); 
}
    2e78:	e037883a 	mov	sp,fp
    2e7c:	dfc00117 	ldw	ra,4(sp)
    2e80:	df000017 	ldw	fp,0(sp)
    2e84:	dec00204 	addi	sp,sp,8
    2e88:	f800283a 	ret

00002e8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2e8c:	defffd04 	addi	sp,sp,-12
    2e90:	dfc00215 	stw	ra,8(sp)
    2e94:	df000115 	stw	fp,4(sp)
    2e98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2e9c:	00bfff04 	movi	r2,-4
    2ea0:	00c00034 	movhi	r3,0
    2ea4:	18d5dc04 	addi	r3,r3,22384
    2ea8:	1885883a 	add	r2,r3,r2
    2eac:	e0bfff15 	stw	r2,-4(fp)
    2eb0:	00000606 	br	2ecc <_do_dtors+0x40>
        (*dtor) (); 
    2eb4:	e0bfff17 	ldw	r2,-4(fp)
    2eb8:	10800017 	ldw	r2,0(r2)
    2ebc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2ec0:	e0bfff17 	ldw	r2,-4(fp)
    2ec4:	10bfff04 	addi	r2,r2,-4
    2ec8:	e0bfff15 	stw	r2,-4(fp)
    2ecc:	e0ffff17 	ldw	r3,-4(fp)
    2ed0:	00800034 	movhi	r2,0
    2ed4:	1095dc04 	addi	r2,r2,22384
    2ed8:	18bff62e 	bgeu	r3,r2,2eb4 <_do_dtors+0x28>
        (*dtor) (); 
}
    2edc:	e037883a 	mov	sp,fp
    2ee0:	dfc00117 	ldw	ra,4(sp)
    2ee4:	df000017 	ldw	fp,0(sp)
    2ee8:	dec00204 	addi	sp,sp,8
    2eec:	f800283a 	ret

00002ef0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2ef0:	deffff04 	addi	sp,sp,-4
    2ef4:	df000015 	stw	fp,0(sp)
    2ef8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2efc:	e037883a 	mov	sp,fp
    2f00:	df000017 	ldw	fp,0(sp)
    2f04:	dec00104 	addi	sp,sp,4
    2f08:	f800283a 	ret

00002f0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2f0c:	defff904 	addi	sp,sp,-28
    2f10:	dfc00615 	stw	ra,24(sp)
    2f14:	df000515 	stw	fp,20(sp)
    2f18:	df000504 	addi	fp,sp,20
    2f1c:	e13ffc15 	stw	r4,-16(fp)
    2f20:	e17ffd15 	stw	r5,-12(fp)
    2f24:	e1bffe15 	stw	r6,-8(fp)
    2f28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2f2c:	e0800217 	ldw	r2,8(fp)
    2f30:	d8800015 	stw	r2,0(sp)
    2f34:	e13ffc17 	ldw	r4,-16(fp)
    2f38:	e17ffd17 	ldw	r5,-12(fp)
    2f3c:	e1bffe17 	ldw	r6,-8(fp)
    2f40:	e1ffff17 	ldw	r7,-4(fp)
    2f44:	00030e00 	call	30e0 <alt_iic_isr_register>
}  
    2f48:	e037883a 	mov	sp,fp
    2f4c:	dfc00117 	ldw	ra,4(sp)
    2f50:	df000017 	ldw	fp,0(sp)
    2f54:	dec00204 	addi	sp,sp,8
    2f58:	f800283a 	ret

00002f5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2f5c:	defff904 	addi	sp,sp,-28
    2f60:	df000615 	stw	fp,24(sp)
    2f64:	df000604 	addi	fp,sp,24
    2f68:	e13ffe15 	stw	r4,-8(fp)
    2f6c:	e17fff15 	stw	r5,-4(fp)
    2f70:	e0bfff17 	ldw	r2,-4(fp)
    2f74:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f78:	0005303a 	rdctl	r2,status
    2f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f80:	e0fffb17 	ldw	r3,-20(fp)
    2f84:	00bfff84 	movi	r2,-2
    2f88:	1884703a 	and	r2,r3,r2
    2f8c:	1001703a 	wrctl	status,r2
  
  return context;
    2f90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2f94:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    2f98:	e0fffc17 	ldw	r3,-16(fp)
    2f9c:	00800044 	movi	r2,1
    2fa0:	10c4983a 	sll	r2,r2,r3
    2fa4:	1007883a 	mov	r3,r2
    2fa8:	00800074 	movhi	r2,1
    2fac:	10a35104 	addi	r2,r2,-29372
    2fb0:	10800017 	ldw	r2,0(r2)
    2fb4:	1886b03a 	or	r3,r3,r2
    2fb8:	00800074 	movhi	r2,1
    2fbc:	10a35104 	addi	r2,r2,-29372
    2fc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2fc4:	00800074 	movhi	r2,1
    2fc8:	10a35104 	addi	r2,r2,-29372
    2fcc:	10800017 	ldw	r2,0(r2)
    2fd0:	100170fa 	wrctl	ienable,r2
    2fd4:	e0bffd17 	ldw	r2,-12(fp)
    2fd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2fdc:	e0bffa17 	ldw	r2,-24(fp)
    2fe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2fe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    2fe8:	e037883a 	mov	sp,fp
    2fec:	df000017 	ldw	fp,0(sp)
    2ff0:	dec00104 	addi	sp,sp,4
    2ff4:	f800283a 	ret

00002ff8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2ff8:	defff904 	addi	sp,sp,-28
    2ffc:	df000615 	stw	fp,24(sp)
    3000:	df000604 	addi	fp,sp,24
    3004:	e13ffe15 	stw	r4,-8(fp)
    3008:	e17fff15 	stw	r5,-4(fp)
    300c:	e0bfff17 	ldw	r2,-4(fp)
    3010:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3014:	0005303a 	rdctl	r2,status
    3018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    301c:	e0fffb17 	ldw	r3,-20(fp)
    3020:	00bfff84 	movi	r2,-2
    3024:	1884703a 	and	r2,r3,r2
    3028:	1001703a 	wrctl	status,r2
  
  return context;
    302c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3030:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    3034:	e0fffc17 	ldw	r3,-16(fp)
    3038:	00800044 	movi	r2,1
    303c:	10c4983a 	sll	r2,r2,r3
    3040:	0084303a 	nor	r2,zero,r2
    3044:	1007883a 	mov	r3,r2
    3048:	00800074 	movhi	r2,1
    304c:	10a35104 	addi	r2,r2,-29372
    3050:	10800017 	ldw	r2,0(r2)
    3054:	1886703a 	and	r3,r3,r2
    3058:	00800074 	movhi	r2,1
    305c:	10a35104 	addi	r2,r2,-29372
    3060:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3064:	00800074 	movhi	r2,1
    3068:	10a35104 	addi	r2,r2,-29372
    306c:	10800017 	ldw	r2,0(r2)
    3070:	100170fa 	wrctl	ienable,r2
    3074:	e0bffd17 	ldw	r2,-12(fp)
    3078:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    307c:	e0bffa17 	ldw	r2,-24(fp)
    3080:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3084:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    3088:	e037883a 	mov	sp,fp
    308c:	df000017 	ldw	fp,0(sp)
    3090:	dec00104 	addi	sp,sp,4
    3094:	f800283a 	ret

00003098 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    3098:	defffc04 	addi	sp,sp,-16
    309c:	df000315 	stw	fp,12(sp)
    30a0:	df000304 	addi	fp,sp,12
    30a4:	e13ffe15 	stw	r4,-8(fp)
    30a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    30ac:	000530fa 	rdctl	r2,ienable
    30b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    30b4:	e0ffff17 	ldw	r3,-4(fp)
    30b8:	00800044 	movi	r2,1
    30bc:	10c4983a 	sll	r2,r2,r3
    30c0:	1007883a 	mov	r3,r2
    30c4:	e0bffd17 	ldw	r2,-12(fp)
    30c8:	1884703a 	and	r2,r3,r2
    30cc:	1004c03a 	cmpne	r2,r2,zero
}
    30d0:	e037883a 	mov	sp,fp
    30d4:	df000017 	ldw	fp,0(sp)
    30d8:	dec00104 	addi	sp,sp,4
    30dc:	f800283a 	ret

000030e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    30e0:	defff404 	addi	sp,sp,-48
    30e4:	dfc00b15 	stw	ra,44(sp)
    30e8:	df000a15 	stw	fp,40(sp)
    30ec:	df000a04 	addi	fp,sp,40
    30f0:	e13ffb15 	stw	r4,-20(fp)
    30f4:	e17ffc15 	stw	r5,-16(fp)
    30f8:	e1bffd15 	stw	r6,-12(fp)
    30fc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    3100:	00bffa84 	movi	r2,-22
    3104:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    3108:	e0bffc17 	ldw	r2,-16(fp)
    310c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3110:	e0bff917 	ldw	r2,-28(fp)
    3114:	10800808 	cmpgei	r2,r2,32
    3118:	1000291e 	bne	r2,zero,31c0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    311c:	0005303a 	rdctl	r2,status
    3120:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3124:	e0fff717 	ldw	r3,-36(fp)
    3128:	00bfff84 	movi	r2,-2
    312c:	1884703a 	and	r2,r3,r2
    3130:	1001703a 	wrctl	status,r2
  
  return context;
    3134:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    3138:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    313c:	e0bff917 	ldw	r2,-28(fp)
    3140:	00c00074 	movhi	r3,1
    3144:	18e36e04 	addi	r3,r3,-29256
    3148:	100490fa 	slli	r2,r2,3
    314c:	10c7883a 	add	r3,r2,r3
    3150:	e0bffd17 	ldw	r2,-12(fp)
    3154:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    3158:	e0bff917 	ldw	r2,-28(fp)
    315c:	00c00074 	movhi	r3,1
    3160:	18e36e04 	addi	r3,r3,-29256
    3164:	100490fa 	slli	r2,r2,3
    3168:	10c5883a 	add	r2,r2,r3
    316c:	10c00104 	addi	r3,r2,4
    3170:	e0bffe17 	ldw	r2,-8(fp)
    3174:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    3178:	e0bffd17 	ldw	r2,-12(fp)
    317c:	1005003a 	cmpeq	r2,r2,zero
    3180:	1000051e 	bne	r2,zero,3198 <alt_iic_isr_register+0xb8>
    3184:	e17ff917 	ldw	r5,-28(fp)
    3188:	e13ffb17 	ldw	r4,-20(fp)
    318c:	0002f5c0 	call	2f5c <alt_ic_irq_enable>
    3190:	e0bfff15 	stw	r2,-4(fp)
    3194:	00000406 	br	31a8 <alt_iic_isr_register+0xc8>
    3198:	e17ff917 	ldw	r5,-28(fp)
    319c:	e13ffb17 	ldw	r4,-20(fp)
    31a0:	0002ff80 	call	2ff8 <alt_ic_irq_disable>
    31a4:	e0bfff15 	stw	r2,-4(fp)
    31a8:	e0bfff17 	ldw	r2,-4(fp)
    31ac:	e0bffa15 	stw	r2,-24(fp)
    31b0:	e0bff817 	ldw	r2,-32(fp)
    31b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    31b8:	e0bff617 	ldw	r2,-40(fp)
    31bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    31c0:	e0bffa17 	ldw	r2,-24(fp)
}
    31c4:	e037883a 	mov	sp,fp
    31c8:	dfc00117 	ldw	ra,4(sp)
    31cc:	df000017 	ldw	fp,0(sp)
    31d0:	dec00204 	addi	sp,sp,8
    31d4:	f800283a 	ret

000031d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    31d8:	defff804 	addi	sp,sp,-32
    31dc:	dfc00715 	stw	ra,28(sp)
    31e0:	df000615 	stw	fp,24(sp)
    31e4:	dc000515 	stw	r16,20(sp)
    31e8:	df000504 	addi	fp,sp,20
    31ec:	e13ffc15 	stw	r4,-16(fp)
    31f0:	e17ffd15 	stw	r5,-12(fp)
    31f4:	e1bffe15 	stw	r6,-8(fp)
    31f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    31fc:	e13ffd17 	ldw	r4,-12(fp)
    3200:	e17ffe17 	ldw	r5,-8(fp)
    3204:	e1bfff17 	ldw	r6,-4(fp)
    3208:	00034200 	call	3420 <open>
    320c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    3210:	e0bffb17 	ldw	r2,-20(fp)
    3214:	1004803a 	cmplt	r2,r2,zero
    3218:	10001f1e 	bne	r2,zero,3298 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    321c:	e13ffb17 	ldw	r4,-20(fp)
    3220:	04000034 	movhi	r16,0
    3224:	841c4504 	addi	r16,r16,28948
    3228:	01400304 	movi	r5,12
    322c:	0000ac40 	call	ac4 <__mulsi3>
    3230:	1405883a 	add	r2,r2,r16
    3234:	10c00017 	ldw	r3,0(r2)
    3238:	e0bffc17 	ldw	r2,-16(fp)
    323c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3240:	e13ffb17 	ldw	r4,-20(fp)
    3244:	04000034 	movhi	r16,0
    3248:	841c4504 	addi	r16,r16,28948
    324c:	01400304 	movi	r5,12
    3250:	0000ac40 	call	ac4 <__mulsi3>
    3254:	1405883a 	add	r2,r2,r16
    3258:	10800104 	addi	r2,r2,4
    325c:	10c00017 	ldw	r3,0(r2)
    3260:	e0bffc17 	ldw	r2,-16(fp)
    3264:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    3268:	e13ffb17 	ldw	r4,-20(fp)
    326c:	04000034 	movhi	r16,0
    3270:	841c4504 	addi	r16,r16,28948
    3274:	01400304 	movi	r5,12
    3278:	0000ac40 	call	ac4 <__mulsi3>
    327c:	1405883a 	add	r2,r2,r16
    3280:	10800204 	addi	r2,r2,8
    3284:	10c00017 	ldw	r3,0(r2)
    3288:	e0bffc17 	ldw	r2,-16(fp)
    328c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3290:	e13ffb17 	ldw	r4,-20(fp)
    3294:	000360c0 	call	360c <alt_release_fd>
  }
} 
    3298:	e037883a 	mov	sp,fp
    329c:	dfc00217 	ldw	ra,8(sp)
    32a0:	df000117 	ldw	fp,4(sp)
    32a4:	dc000017 	ldw	r16,0(sp)
    32a8:	dec00304 	addi	sp,sp,12
    32ac:	f800283a 	ret

000032b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    32b0:	defffb04 	addi	sp,sp,-20
    32b4:	dfc00415 	stw	ra,16(sp)
    32b8:	df000315 	stw	fp,12(sp)
    32bc:	df000304 	addi	fp,sp,12
    32c0:	e13ffd15 	stw	r4,-12(fp)
    32c4:	e17ffe15 	stw	r5,-8(fp)
    32c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    32cc:	01000034 	movhi	r4,0
    32d0:	211c4804 	addi	r4,r4,28960
    32d4:	e17ffd17 	ldw	r5,-12(fp)
    32d8:	01800044 	movi	r6,1
    32dc:	01c07fc4 	movi	r7,511
    32e0:	00031d80 	call	31d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    32e4:	01000034 	movhi	r4,0
    32e8:	211c4504 	addi	r4,r4,28948
    32ec:	e17ffe17 	ldw	r5,-8(fp)
    32f0:	000d883a 	mov	r6,zero
    32f4:	01c07fc4 	movi	r7,511
    32f8:	00031d80 	call	31d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    32fc:	01000034 	movhi	r4,0
    3300:	211c4b04 	addi	r4,r4,28972
    3304:	e17fff17 	ldw	r5,-4(fp)
    3308:	01800044 	movi	r6,1
    330c:	01c07fc4 	movi	r7,511
    3310:	00031d80 	call	31d8 <alt_open_fd>
}  
    3314:	e037883a 	mov	sp,fp
    3318:	dfc00117 	ldw	ra,4(sp)
    331c:	df000017 	ldw	fp,0(sp)
    3320:	dec00204 	addi	sp,sp,8
    3324:	f800283a 	ret

00003328 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    3328:	defffa04 	addi	sp,sp,-24
    332c:	dfc00515 	stw	ra,20(sp)
    3330:	df000415 	stw	fp,16(sp)
    3334:	dc000315 	stw	r16,12(sp)
    3338:	df000304 	addi	fp,sp,12
    333c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    3340:	e0bffe17 	ldw	r2,-8(fp)
    3344:	10800217 	ldw	r2,8(r2)
    3348:	10d00034 	orhi	r3,r2,16384
    334c:	e0bffe17 	ldw	r2,-8(fp)
    3350:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3354:	e03ffd15 	stw	zero,-12(fp)
    3358:	00002306 	br	33e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    335c:	e13ffd17 	ldw	r4,-12(fp)
    3360:	04000034 	movhi	r16,0
    3364:	841c4504 	addi	r16,r16,28948
    3368:	01400304 	movi	r5,12
    336c:	0000ac40 	call	ac4 <__mulsi3>
    3370:	1405883a 	add	r2,r2,r16
    3374:	10c00017 	ldw	r3,0(r2)
    3378:	e0bffe17 	ldw	r2,-8(fp)
    337c:	10800017 	ldw	r2,0(r2)
    3380:	1880161e 	bne	r3,r2,33dc <alt_file_locked+0xb4>
    3384:	e13ffd17 	ldw	r4,-12(fp)
    3388:	04000034 	movhi	r16,0
    338c:	841c4504 	addi	r16,r16,28948
    3390:	01400304 	movi	r5,12
    3394:	0000ac40 	call	ac4 <__mulsi3>
    3398:	1405883a 	add	r2,r2,r16
    339c:	10800204 	addi	r2,r2,8
    33a0:	10800017 	ldw	r2,0(r2)
    33a4:	1004403a 	cmpge	r2,r2,zero
    33a8:	10000c1e 	bne	r2,zero,33dc <alt_file_locked+0xb4>
    33ac:	e13ffd17 	ldw	r4,-12(fp)
    33b0:	01400304 	movi	r5,12
    33b4:	0000ac40 	call	ac4 <__mulsi3>
    33b8:	1007883a 	mov	r3,r2
    33bc:	00800034 	movhi	r2,0
    33c0:	109c4504 	addi	r2,r2,28948
    33c4:	1887883a 	add	r3,r3,r2
    33c8:	e0bffe17 	ldw	r2,-8(fp)
    33cc:	18800326 	beq	r3,r2,33dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    33d0:	00bffcc4 	movi	r2,-13
    33d4:	e0bfff15 	stw	r2,-4(fp)
    33d8:	00000a06 	br	3404 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    33dc:	e0bffd17 	ldw	r2,-12(fp)
    33e0:	10800044 	addi	r2,r2,1
    33e4:	e0bffd15 	stw	r2,-12(fp)
    33e8:	00800034 	movhi	r2,0
    33ec:	109cb004 	addi	r2,r2,29376
    33f0:	10800017 	ldw	r2,0(r2)
    33f4:	1007883a 	mov	r3,r2
    33f8:	e0bffd17 	ldw	r2,-12(fp)
    33fc:	18bfd72e 	bgeu	r3,r2,335c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3400:	e03fff15 	stw	zero,-4(fp)
    3404:	e0bfff17 	ldw	r2,-4(fp)
}
    3408:	e037883a 	mov	sp,fp
    340c:	dfc00217 	ldw	ra,8(sp)
    3410:	df000117 	ldw	fp,4(sp)
    3414:	dc000017 	ldw	r16,0(sp)
    3418:	dec00304 	addi	sp,sp,12
    341c:	f800283a 	ret

00003420 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3420:	defff404 	addi	sp,sp,-48
    3424:	dfc00b15 	stw	ra,44(sp)
    3428:	df000a15 	stw	fp,40(sp)
    342c:	df000a04 	addi	fp,sp,40
    3430:	e13ffb15 	stw	r4,-20(fp)
    3434:	e17ffc15 	stw	r5,-16(fp)
    3438:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    343c:	00bfffc4 	movi	r2,-1
    3440:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    3444:	00bffb44 	movi	r2,-19
    3448:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    344c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    3450:	e13ffb17 	ldw	r4,-20(fp)
    3454:	01400034 	movhi	r5,0
    3458:	295cae04 	addi	r5,r5,29368
    345c:	00036a40 	call	36a4 <alt_find_dev>
    3460:	e0bffa15 	stw	r2,-24(fp)
    3464:	e0bffa17 	ldw	r2,-24(fp)
    3468:	1004c03a 	cmpne	r2,r2,zero
    346c:	1000051e 	bne	r2,zero,3484 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    3470:	e13ffb17 	ldw	r4,-20(fp)
    3474:	00037380 	call	3738 <alt_find_file>
    3478:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    347c:	00800044 	movi	r2,1
    3480:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    3484:	e0bffa17 	ldw	r2,-24(fp)
    3488:	1005003a 	cmpeq	r2,r2,zero
    348c:	1000311e 	bne	r2,zero,3554 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3490:	e13ffa17 	ldw	r4,-24(fp)
    3494:	00038580 	call	3858 <alt_get_fd>
    3498:	e0bff815 	stw	r2,-32(fp)
    349c:	e0bff817 	ldw	r2,-32(fp)
    34a0:	1004403a 	cmpge	r2,r2,zero
    34a4:	1000031e 	bne	r2,zero,34b4 <open+0x94>
    {
      status = index;
    34a8:	e0bff817 	ldw	r2,-32(fp)
    34ac:	e0bff715 	stw	r2,-36(fp)
    34b0:	00002a06 	br	355c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    34b4:	e13ff817 	ldw	r4,-32(fp)
    34b8:	01400304 	movi	r5,12
    34bc:	0000ac40 	call	ac4 <__mulsi3>
    34c0:	1007883a 	mov	r3,r2
    34c4:	00800034 	movhi	r2,0
    34c8:	109c4504 	addi	r2,r2,28948
    34cc:	1885883a 	add	r2,r3,r2
    34d0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    34d4:	e0fffc17 	ldw	r3,-16(fp)
    34d8:	00900034 	movhi	r2,16384
    34dc:	10bfffc4 	addi	r2,r2,-1
    34e0:	1886703a 	and	r3,r3,r2
    34e4:	e0bff917 	ldw	r2,-28(fp)
    34e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    34ec:	e0bff617 	ldw	r2,-40(fp)
    34f0:	1004c03a 	cmpne	r2,r2,zero
    34f4:	1000061e 	bne	r2,zero,3510 <open+0xf0>
    34f8:	e13ff917 	ldw	r4,-28(fp)
    34fc:	00033280 	call	3328 <alt_file_locked>
    3500:	e0bff715 	stw	r2,-36(fp)
    3504:	e0bff717 	ldw	r2,-36(fp)
    3508:	1004803a 	cmplt	r2,r2,zero
    350c:	1000131e 	bne	r2,zero,355c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3510:	e0bffa17 	ldw	r2,-24(fp)
    3514:	10800317 	ldw	r2,12(r2)
    3518:	1005003a 	cmpeq	r2,r2,zero
    351c:	1000091e 	bne	r2,zero,3544 <open+0x124>
    3520:	e0bffa17 	ldw	r2,-24(fp)
    3524:	10800317 	ldw	r2,12(r2)
    3528:	e13ff917 	ldw	r4,-28(fp)
    352c:	e17ffb17 	ldw	r5,-20(fp)
    3530:	e1bffc17 	ldw	r6,-16(fp)
    3534:	e1fffd17 	ldw	r7,-12(fp)
    3538:	103ee83a 	callr	r2
    353c:	e0bfff15 	stw	r2,-4(fp)
    3540:	00000106 	br	3548 <open+0x128>
    3544:	e03fff15 	stw	zero,-4(fp)
    3548:	e0bfff17 	ldw	r2,-4(fp)
    354c:	e0bff715 	stw	r2,-36(fp)
    3550:	00000206 	br	355c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3554:	00bffb44 	movi	r2,-19
    3558:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    355c:	e0bff717 	ldw	r2,-36(fp)
    3560:	1004403a 	cmpge	r2,r2,zero
    3564:	1000091e 	bne	r2,zero,358c <open+0x16c>
  {
    alt_release_fd (index);  
    3568:	e13ff817 	ldw	r4,-32(fp)
    356c:	000360c0 	call	360c <alt_release_fd>
    ALT_ERRNO = -status;
    3570:	00035ac0 	call	35ac <alt_get_errno>
    3574:	e0fff717 	ldw	r3,-36(fp)
    3578:	00c7c83a 	sub	r3,zero,r3
    357c:	10c00015 	stw	r3,0(r2)
    return -1;
    3580:	00bfffc4 	movi	r2,-1
    3584:	e0bffe15 	stw	r2,-8(fp)
    3588:	00000206 	br	3594 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    358c:	e0bff817 	ldw	r2,-32(fp)
    3590:	e0bffe15 	stw	r2,-8(fp)
    3594:	e0bffe17 	ldw	r2,-8(fp)
}
    3598:	e037883a 	mov	sp,fp
    359c:	dfc00117 	ldw	ra,4(sp)
    35a0:	df000017 	ldw	fp,0(sp)
    35a4:	dec00204 	addi	sp,sp,8
    35a8:	f800283a 	ret

000035ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35ac:	defffd04 	addi	sp,sp,-12
    35b0:	dfc00215 	stw	ra,8(sp)
    35b4:	df000115 	stw	fp,4(sp)
    35b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    35bc:	00800034 	movhi	r2,0
    35c0:	109cb104 	addi	r2,r2,29380
    35c4:	10800017 	ldw	r2,0(r2)
    35c8:	1005003a 	cmpeq	r2,r2,zero
    35cc:	1000061e 	bne	r2,zero,35e8 <alt_get_errno+0x3c>
    35d0:	00800034 	movhi	r2,0
    35d4:	109cb104 	addi	r2,r2,29380
    35d8:	10800017 	ldw	r2,0(r2)
    35dc:	103ee83a 	callr	r2
    35e0:	e0bfff15 	stw	r2,-4(fp)
    35e4:	00000306 	br	35f4 <alt_get_errno+0x48>
    35e8:	00800074 	movhi	r2,1
    35ec:	10a34b04 	addi	r2,r2,-29396
    35f0:	e0bfff15 	stw	r2,-4(fp)
    35f4:	e0bfff17 	ldw	r2,-4(fp)
}
    35f8:	e037883a 	mov	sp,fp
    35fc:	dfc00117 	ldw	ra,4(sp)
    3600:	df000017 	ldw	fp,0(sp)
    3604:	dec00204 	addi	sp,sp,8
    3608:	f800283a 	ret

0000360c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    360c:	defffc04 	addi	sp,sp,-16
    3610:	dfc00315 	stw	ra,12(sp)
    3614:	df000215 	stw	fp,8(sp)
    3618:	dc000115 	stw	r16,4(sp)
    361c:	df000104 	addi	fp,sp,4
    3620:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3624:	e0bfff17 	ldw	r2,-4(fp)
    3628:	108000d0 	cmplti	r2,r2,3
    362c:	10000f1e 	bne	r2,zero,366c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    3630:	e13fff17 	ldw	r4,-4(fp)
    3634:	04000034 	movhi	r16,0
    3638:	841c4504 	addi	r16,r16,28948
    363c:	01400304 	movi	r5,12
    3640:	0000ac40 	call	ac4 <__mulsi3>
    3644:	1405883a 	add	r2,r2,r16
    3648:	10800204 	addi	r2,r2,8
    364c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3650:	e13fff17 	ldw	r4,-4(fp)
    3654:	04000034 	movhi	r16,0
    3658:	841c4504 	addi	r16,r16,28948
    365c:	01400304 	movi	r5,12
    3660:	0000ac40 	call	ac4 <__mulsi3>
    3664:	1405883a 	add	r2,r2,r16
    3668:	10000015 	stw	zero,0(r2)
  }
}
    366c:	e037883a 	mov	sp,fp
    3670:	dfc00217 	ldw	ra,8(sp)
    3674:	df000117 	ldw	fp,4(sp)
    3678:	dc000017 	ldw	r16,0(sp)
    367c:	dec00304 	addi	sp,sp,12
    3680:	f800283a 	ret

00003684 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    3684:	deffff04 	addi	sp,sp,-4
    3688:	df000015 	stw	fp,0(sp)
    368c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3690:	000170fa 	wrctl	ienable,zero
}
    3694:	e037883a 	mov	sp,fp
    3698:	df000017 	ldw	fp,0(sp)
    369c:	dec00104 	addi	sp,sp,4
    36a0:	f800283a 	ret

000036a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    36a4:	defff904 	addi	sp,sp,-28
    36a8:	dfc00615 	stw	ra,24(sp)
    36ac:	df000515 	stw	fp,20(sp)
    36b0:	df000504 	addi	fp,sp,20
    36b4:	e13ffd15 	stw	r4,-12(fp)
    36b8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    36bc:	e0bffe17 	ldw	r2,-8(fp)
    36c0:	10800017 	ldw	r2,0(r2)
    36c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    36c8:	e13ffd17 	ldw	r4,-12(fp)
    36cc:	0003c740 	call	3c74 <strlen>
    36d0:	10800044 	addi	r2,r2,1
    36d4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    36d8:	00000d06 	br	3710 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    36dc:	e0bffc17 	ldw	r2,-16(fp)
    36e0:	11000217 	ldw	r4,8(r2)
    36e4:	e1bffb17 	ldw	r6,-20(fp)
    36e8:	e17ffd17 	ldw	r5,-12(fp)
    36ec:	00039740 	call	3974 <memcmp>
    36f0:	1004c03a 	cmpne	r2,r2,zero
    36f4:	1000031e 	bne	r2,zero,3704 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    36f8:	e0bffc17 	ldw	r2,-16(fp)
    36fc:	e0bfff15 	stw	r2,-4(fp)
    3700:	00000706 	br	3720 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3704:	e0bffc17 	ldw	r2,-16(fp)
    3708:	10800017 	ldw	r2,0(r2)
    370c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3710:	e0fffe17 	ldw	r3,-8(fp)
    3714:	e0bffc17 	ldw	r2,-16(fp)
    3718:	10fff01e 	bne	r2,r3,36dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    371c:	e03fff15 	stw	zero,-4(fp)
    3720:	e0bfff17 	ldw	r2,-4(fp)
}
    3724:	e037883a 	mov	sp,fp
    3728:	dfc00117 	ldw	ra,4(sp)
    372c:	df000017 	ldw	fp,0(sp)
    3730:	dec00204 	addi	sp,sp,8
    3734:	f800283a 	ret

00003738 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3738:	defffa04 	addi	sp,sp,-24
    373c:	dfc00515 	stw	ra,20(sp)
    3740:	df000415 	stw	fp,16(sp)
    3744:	df000404 	addi	fp,sp,16
    3748:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    374c:	00800034 	movhi	r2,0
    3750:	109cac04 	addi	r2,r2,29360
    3754:	10800017 	ldw	r2,0(r2)
    3758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    375c:	00003306 	br	382c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    3760:	e0bffd17 	ldw	r2,-12(fp)
    3764:	11000217 	ldw	r4,8(r2)
    3768:	0003c740 	call	3c74 <strlen>
    376c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    3770:	e0bffd17 	ldw	r2,-12(fp)
    3774:	10c00217 	ldw	r3,8(r2)
    3778:	e0bffc17 	ldw	r2,-16(fp)
    377c:	1885883a 	add	r2,r3,r2
    3780:	10bfffc4 	addi	r2,r2,-1
    3784:	10800003 	ldbu	r2,0(r2)
    3788:	10803fcc 	andi	r2,r2,255
    378c:	1080201c 	xori	r2,r2,128
    3790:	10bfe004 	addi	r2,r2,-128
    3794:	10800bd8 	cmpnei	r2,r2,47
    3798:	1000031e 	bne	r2,zero,37a8 <alt_find_file+0x70>
    {
      len -= 1;
    379c:	e0bffc17 	ldw	r2,-16(fp)
    37a0:	10bfffc4 	addi	r2,r2,-1
    37a4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    37a8:	e0bffc17 	ldw	r2,-16(fp)
    37ac:	1007883a 	mov	r3,r2
    37b0:	e0bffe17 	ldw	r2,-8(fp)
    37b4:	1885883a 	add	r2,r3,r2
    37b8:	10800003 	ldbu	r2,0(r2)
    37bc:	10803fcc 	andi	r2,r2,255
    37c0:	1080201c 	xori	r2,r2,128
    37c4:	10bfe004 	addi	r2,r2,-128
    37c8:	10800be0 	cmpeqi	r2,r2,47
    37cc:	10000a1e 	bne	r2,zero,37f8 <alt_find_file+0xc0>
    37d0:	e0bffc17 	ldw	r2,-16(fp)
    37d4:	1007883a 	mov	r3,r2
    37d8:	e0bffe17 	ldw	r2,-8(fp)
    37dc:	1885883a 	add	r2,r3,r2
    37e0:	10800003 	ldbu	r2,0(r2)
    37e4:	10803fcc 	andi	r2,r2,255
    37e8:	1080201c 	xori	r2,r2,128
    37ec:	10bfe004 	addi	r2,r2,-128
    37f0:	1004c03a 	cmpne	r2,r2,zero
    37f4:	10000a1e 	bne	r2,zero,3820 <alt_find_file+0xe8>
    37f8:	e0bffd17 	ldw	r2,-12(fp)
    37fc:	11000217 	ldw	r4,8(r2)
    3800:	e1bffc17 	ldw	r6,-16(fp)
    3804:	e17ffe17 	ldw	r5,-8(fp)
    3808:	00039740 	call	3974 <memcmp>
    380c:	1004c03a 	cmpne	r2,r2,zero
    3810:	1000031e 	bne	r2,zero,3820 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3814:	e0bffd17 	ldw	r2,-12(fp)
    3818:	e0bfff15 	stw	r2,-4(fp)
    381c:	00000806 	br	3840 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3820:	e0bffd17 	ldw	r2,-12(fp)
    3824:	10800017 	ldw	r2,0(r2)
    3828:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    382c:	00c00034 	movhi	r3,0
    3830:	18dcac04 	addi	r3,r3,29360
    3834:	e0bffd17 	ldw	r2,-12(fp)
    3838:	10ffc91e 	bne	r2,r3,3760 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    383c:	e03fff15 	stw	zero,-4(fp)
    3840:	e0bfff17 	ldw	r2,-4(fp)
}
    3844:	e037883a 	mov	sp,fp
    3848:	dfc00117 	ldw	ra,4(sp)
    384c:	df000017 	ldw	fp,0(sp)
    3850:	dec00204 	addi	sp,sp,8
    3854:	f800283a 	ret

00003858 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3858:	defffa04 	addi	sp,sp,-24
    385c:	dfc00515 	stw	ra,20(sp)
    3860:	df000415 	stw	fp,16(sp)
    3864:	dc000315 	stw	r16,12(sp)
    3868:	df000304 	addi	fp,sp,12
    386c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3870:	00bffa04 	movi	r2,-24
    3874:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3878:	e03ffe15 	stw	zero,-8(fp)
    387c:	00002006 	br	3900 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    3880:	e13ffe17 	ldw	r4,-8(fp)
    3884:	04000034 	movhi	r16,0
    3888:	841c4504 	addi	r16,r16,28948
    388c:	01400304 	movi	r5,12
    3890:	0000ac40 	call	ac4 <__mulsi3>
    3894:	1405883a 	add	r2,r2,r16
    3898:	10800017 	ldw	r2,0(r2)
    389c:	1004c03a 	cmpne	r2,r2,zero
    38a0:	1000141e 	bne	r2,zero,38f4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    38a4:	e13ffe17 	ldw	r4,-8(fp)
    38a8:	04000034 	movhi	r16,0
    38ac:	841c4504 	addi	r16,r16,28948
    38b0:	01400304 	movi	r5,12
    38b4:	0000ac40 	call	ac4 <__mulsi3>
    38b8:	1407883a 	add	r3,r2,r16
    38bc:	e0bfff17 	ldw	r2,-4(fp)
    38c0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    38c4:	00800034 	movhi	r2,0
    38c8:	109cb004 	addi	r2,r2,29376
    38cc:	10c00017 	ldw	r3,0(r2)
    38d0:	e0bffe17 	ldw	r2,-8(fp)
    38d4:	1880040e 	bge	r3,r2,38e8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    38d8:	00c00034 	movhi	r3,0
    38dc:	18dcb004 	addi	r3,r3,29376
    38e0:	e0bffe17 	ldw	r2,-8(fp)
    38e4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    38e8:	e0bffe17 	ldw	r2,-8(fp)
    38ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    38f0:	00000606 	br	390c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    38f4:	e0bffe17 	ldw	r2,-8(fp)
    38f8:	10800044 	addi	r2,r2,1
    38fc:	e0bffe15 	stw	r2,-8(fp)
    3900:	e0bffe17 	ldw	r2,-8(fp)
    3904:	10800810 	cmplti	r2,r2,32
    3908:	103fdd1e 	bne	r2,zero,3880 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    390c:	e0bffd17 	ldw	r2,-12(fp)
}
    3910:	e037883a 	mov	sp,fp
    3914:	dfc00217 	ldw	ra,8(sp)
    3918:	df000117 	ldw	fp,4(sp)
    391c:	dc000017 	ldw	r16,0(sp)
    3920:	dec00304 	addi	sp,sp,12
    3924:	f800283a 	ret

00003928 <atexit>:
    3928:	200b883a 	mov	r5,r4
    392c:	000d883a 	mov	r6,zero
    3930:	0009883a 	mov	r4,zero
    3934:	000f883a 	mov	r7,zero
    3938:	0003f701 	jmpi	3f70 <__register_exitproc>

0000393c <exit>:
    393c:	defffe04 	addi	sp,sp,-8
    3940:	000b883a 	mov	r5,zero
    3944:	dc000015 	stw	r16,0(sp)
    3948:	dfc00115 	stw	ra,4(sp)
    394c:	2021883a 	mov	r16,r4
    3950:	00040a80 	call	40a8 <__call_exitprocs>
    3954:	00800034 	movhi	r2,0
    3958:	109ca804 	addi	r2,r2,29344
    395c:	11000017 	ldw	r4,0(r2)
    3960:	20800f17 	ldw	r2,60(r4)
    3964:	10000126 	beq	r2,zero,396c <exit+0x30>
    3968:	103ee83a 	callr	r2
    396c:	8009883a 	mov	r4,r16
    3970:	00050940 	call	5094 <_exit>

00003974 <memcmp>:
    3974:	00c000c4 	movi	r3,3
    3978:	1980032e 	bgeu	r3,r6,3988 <memcmp+0x14>
    397c:	2144b03a 	or	r2,r4,r5
    3980:	10c4703a 	and	r2,r2,r3
    3984:	10000f26 	beq	r2,zero,39c4 <memcmp+0x50>
    3988:	31ffffc4 	addi	r7,r6,-1
    398c:	3000061e 	bne	r6,zero,39a8 <memcmp+0x34>
    3990:	00000a06 	br	39bc <memcmp+0x48>
    3994:	39ffffc4 	addi	r7,r7,-1
    3998:	00bfffc4 	movi	r2,-1
    399c:	21000044 	addi	r4,r4,1
    39a0:	29400044 	addi	r5,r5,1
    39a4:	38800526 	beq	r7,r2,39bc <memcmp+0x48>
    39a8:	20c00003 	ldbu	r3,0(r4)
    39ac:	28800003 	ldbu	r2,0(r5)
    39b0:	18bff826 	beq	r3,r2,3994 <memcmp+0x20>
    39b4:	1885c83a 	sub	r2,r3,r2
    39b8:	f800283a 	ret
    39bc:	0005883a 	mov	r2,zero
    39c0:	f800283a 	ret
    39c4:	180f883a 	mov	r7,r3
    39c8:	20c00017 	ldw	r3,0(r4)
    39cc:	28800017 	ldw	r2,0(r5)
    39d0:	18bfed1e 	bne	r3,r2,3988 <memcmp+0x14>
    39d4:	31bfff04 	addi	r6,r6,-4
    39d8:	21000104 	addi	r4,r4,4
    39dc:	29400104 	addi	r5,r5,4
    39e0:	39bff936 	bltu	r7,r6,39c8 <memcmp+0x54>
    39e4:	003fe806 	br	3988 <memcmp+0x14>

000039e8 <memcpy>:
    39e8:	01c003c4 	movi	r7,15
    39ec:	2007883a 	mov	r3,r4
    39f0:	3980032e 	bgeu	r7,r6,3a00 <memcpy+0x18>
    39f4:	2904b03a 	or	r2,r5,r4
    39f8:	108000cc 	andi	r2,r2,3
    39fc:	10000926 	beq	r2,zero,3a24 <memcpy+0x3c>
    3a00:	30000626 	beq	r6,zero,3a1c <memcpy+0x34>
    3a04:	30cd883a 	add	r6,r6,r3
    3a08:	28800003 	ldbu	r2,0(r5)
    3a0c:	29400044 	addi	r5,r5,1
    3a10:	18800005 	stb	r2,0(r3)
    3a14:	18c00044 	addi	r3,r3,1
    3a18:	30fffb1e 	bne	r6,r3,3a08 <memcpy+0x20>
    3a1c:	2005883a 	mov	r2,r4
    3a20:	f800283a 	ret
    3a24:	3811883a 	mov	r8,r7
    3a28:	200f883a 	mov	r7,r4
    3a2c:	28c00017 	ldw	r3,0(r5)
    3a30:	31bffc04 	addi	r6,r6,-16
    3a34:	38c00015 	stw	r3,0(r7)
    3a38:	28800117 	ldw	r2,4(r5)
    3a3c:	38800115 	stw	r2,4(r7)
    3a40:	28c00217 	ldw	r3,8(r5)
    3a44:	38c00215 	stw	r3,8(r7)
    3a48:	28800317 	ldw	r2,12(r5)
    3a4c:	29400404 	addi	r5,r5,16
    3a50:	38800315 	stw	r2,12(r7)
    3a54:	39c00404 	addi	r7,r7,16
    3a58:	41bff436 	bltu	r8,r6,3a2c <memcpy+0x44>
    3a5c:	008000c4 	movi	r2,3
    3a60:	1180072e 	bgeu	r2,r6,3a80 <memcpy+0x98>
    3a64:	1007883a 	mov	r3,r2
    3a68:	28800017 	ldw	r2,0(r5)
    3a6c:	31bfff04 	addi	r6,r6,-4
    3a70:	29400104 	addi	r5,r5,4
    3a74:	38800015 	stw	r2,0(r7)
    3a78:	39c00104 	addi	r7,r7,4
    3a7c:	19bffa36 	bltu	r3,r6,3a68 <memcpy+0x80>
    3a80:	3807883a 	mov	r3,r7
    3a84:	003fde06 	br	3a00 <memcpy+0x18>

00003a88 <putc>:
    3a88:	defffc04 	addi	sp,sp,-16
    3a8c:	dc800215 	stw	r18,8(sp)
    3a90:	04800034 	movhi	r18,0
    3a94:	949ca704 	addi	r18,r18,29340
    3a98:	90c00017 	ldw	r3,0(r18)
    3a9c:	dc400115 	stw	r17,4(sp)
    3aa0:	dc000015 	stw	r16,0(sp)
    3aa4:	dfc00315 	stw	ra,12(sp)
    3aa8:	2023883a 	mov	r17,r4
    3aac:	2821883a 	mov	r16,r5
    3ab0:	18000226 	beq	r3,zero,3abc <putc+0x34>
    3ab4:	18800e17 	ldw	r2,56(r3)
    3ab8:	10001126 	beq	r2,zero,3b00 <putc+0x78>
    3abc:	80800217 	ldw	r2,8(r16)
    3ac0:	10ffffc4 	addi	r3,r2,-1
    3ac4:	80c00215 	stw	r3,8(r16)
    3ac8:	18001316 	blt	r3,zero,3b18 <putc+0x90>
    3acc:	80800017 	ldw	r2,0(r16)
    3ad0:	14400005 	stb	r17,0(r2)
    3ad4:	80c00017 	ldw	r3,0(r16)
    3ad8:	18800044 	addi	r2,r3,1
    3adc:	18c00003 	ldbu	r3,0(r3)
    3ae0:	80800015 	stw	r2,0(r16)
    3ae4:	1805883a 	mov	r2,r3
    3ae8:	dfc00317 	ldw	ra,12(sp)
    3aec:	dc800217 	ldw	r18,8(sp)
    3af0:	dc400117 	ldw	r17,4(sp)
    3af4:	dc000017 	ldw	r16,0(sp)
    3af8:	dec00404 	addi	sp,sp,16
    3afc:	f800283a 	ret
    3b00:	1809883a 	mov	r4,r3
    3b04:	00044f00 	call	44f0 <__sinit>
    3b08:	80800217 	ldw	r2,8(r16)
    3b0c:	10ffffc4 	addi	r3,r2,-1
    3b10:	80c00215 	stw	r3,8(r16)
    3b14:	183fed0e 	bge	r3,zero,3acc <putc+0x44>
    3b18:	80800617 	ldw	r2,24(r16)
    3b1c:	18800f16 	blt	r3,r2,3b5c <putc+0xd4>
    3b20:	80800017 	ldw	r2,0(r16)
    3b24:	14400005 	stb	r17,0(r2)
    3b28:	81000017 	ldw	r4,0(r16)
    3b2c:	00800284 	movi	r2,10
    3b30:	20c00003 	ldbu	r3,0(r4)
    3b34:	18801226 	beq	r3,r2,3b80 <putc+0xf8>
    3b38:	20800044 	addi	r2,r4,1
    3b3c:	80800015 	stw	r2,0(r16)
    3b40:	1805883a 	mov	r2,r3
    3b44:	dfc00317 	ldw	ra,12(sp)
    3b48:	dc800217 	ldw	r18,8(sp)
    3b4c:	dc400117 	ldw	r17,4(sp)
    3b50:	dc000017 	ldw	r16,0(sp)
    3b54:	dec00404 	addi	sp,sp,16
    3b58:	f800283a 	ret
    3b5c:	91000017 	ldw	r4,0(r18)
    3b60:	880b883a 	mov	r5,r17
    3b64:	800d883a 	mov	r6,r16
    3b68:	dfc00317 	ldw	ra,12(sp)
    3b6c:	dc800217 	ldw	r18,8(sp)
    3b70:	dc400117 	ldw	r17,4(sp)
    3b74:	dc000017 	ldw	r16,0(sp)
    3b78:	dec00404 	addi	sp,sp,16
    3b7c:	0003ce81 	jmpi	3ce8 <__swbuf_r>
    3b80:	91000017 	ldw	r4,0(r18)
    3b84:	180b883a 	mov	r5,r3
    3b88:	003ff606 	br	3b64 <putc+0xdc>

00003b8c <_putc_r>:
    3b8c:	defffc04 	addi	sp,sp,-16
    3b90:	dc400215 	stw	r17,8(sp)
    3b94:	dc000115 	stw	r16,4(sp)
    3b98:	dfc00315 	stw	ra,12(sp)
    3b9c:	2021883a 	mov	r16,r4
    3ba0:	2823883a 	mov	r17,r5
    3ba4:	20000226 	beq	r4,zero,3bb0 <_putc_r+0x24>
    3ba8:	20800e17 	ldw	r2,56(r4)
    3bac:	10001026 	beq	r2,zero,3bf0 <_putc_r+0x64>
    3bb0:	30800217 	ldw	r2,8(r6)
    3bb4:	10ffffc4 	addi	r3,r2,-1
    3bb8:	30c00215 	stw	r3,8(r6)
    3bbc:	18001316 	blt	r3,zero,3c0c <_putc_r+0x80>
    3bc0:	30800017 	ldw	r2,0(r6)
    3bc4:	14400005 	stb	r17,0(r2)
    3bc8:	30c00017 	ldw	r3,0(r6)
    3bcc:	18800044 	addi	r2,r3,1
    3bd0:	18c00003 	ldbu	r3,0(r3)
    3bd4:	30800015 	stw	r2,0(r6)
    3bd8:	1805883a 	mov	r2,r3
    3bdc:	dfc00317 	ldw	ra,12(sp)
    3be0:	dc400217 	ldw	r17,8(sp)
    3be4:	dc000117 	ldw	r16,4(sp)
    3be8:	dec00404 	addi	sp,sp,16
    3bec:	f800283a 	ret
    3bf0:	d9800015 	stw	r6,0(sp)
    3bf4:	00044f00 	call	44f0 <__sinit>
    3bf8:	d9800017 	ldw	r6,0(sp)
    3bfc:	30800217 	ldw	r2,8(r6)
    3c00:	10ffffc4 	addi	r3,r2,-1
    3c04:	30c00215 	stw	r3,8(r6)
    3c08:	183fed0e 	bge	r3,zero,3bc0 <_putc_r+0x34>
    3c0c:	30800617 	ldw	r2,24(r6)
    3c10:	18800e16 	blt	r3,r2,3c4c <_putc_r+0xc0>
    3c14:	30800017 	ldw	r2,0(r6)
    3c18:	14400005 	stb	r17,0(r2)
    3c1c:	31000017 	ldw	r4,0(r6)
    3c20:	00800284 	movi	r2,10
    3c24:	20c00003 	ldbu	r3,0(r4)
    3c28:	18800f26 	beq	r3,r2,3c68 <_putc_r+0xdc>
    3c2c:	20800044 	addi	r2,r4,1
    3c30:	30800015 	stw	r2,0(r6)
    3c34:	1805883a 	mov	r2,r3
    3c38:	dfc00317 	ldw	ra,12(sp)
    3c3c:	dc400217 	ldw	r17,8(sp)
    3c40:	dc000117 	ldw	r16,4(sp)
    3c44:	dec00404 	addi	sp,sp,16
    3c48:	f800283a 	ret
    3c4c:	8009883a 	mov	r4,r16
    3c50:	880b883a 	mov	r5,r17
    3c54:	dfc00317 	ldw	ra,12(sp)
    3c58:	dc400217 	ldw	r17,8(sp)
    3c5c:	dc000117 	ldw	r16,4(sp)
    3c60:	dec00404 	addi	sp,sp,16
    3c64:	0003ce81 	jmpi	3ce8 <__swbuf_r>
    3c68:	8009883a 	mov	r4,r16
    3c6c:	180b883a 	mov	r5,r3
    3c70:	003ff806 	br	3c54 <_putc_r+0xc8>

00003c74 <strlen>:
    3c74:	208000cc 	andi	r2,r4,3
    3c78:	2011883a 	mov	r8,r4
    3c7c:	1000161e 	bne	r2,zero,3cd8 <strlen+0x64>
    3c80:	20c00017 	ldw	r3,0(r4)
    3c84:	017fbff4 	movhi	r5,65279
    3c88:	297fbfc4 	addi	r5,r5,-257
    3c8c:	01e02074 	movhi	r7,32897
    3c90:	39e02004 	addi	r7,r7,-32640
    3c94:	1945883a 	add	r2,r3,r5
    3c98:	11c4703a 	and	r2,r2,r7
    3c9c:	00c6303a 	nor	r3,zero,r3
    3ca0:	1886703a 	and	r3,r3,r2
    3ca4:	18000c1e 	bne	r3,zero,3cd8 <strlen+0x64>
    3ca8:	280d883a 	mov	r6,r5
    3cac:	380b883a 	mov	r5,r7
    3cb0:	21000104 	addi	r4,r4,4
    3cb4:	20800017 	ldw	r2,0(r4)
    3cb8:	1187883a 	add	r3,r2,r6
    3cbc:	1946703a 	and	r3,r3,r5
    3cc0:	0084303a 	nor	r2,zero,r2
    3cc4:	10c4703a 	and	r2,r2,r3
    3cc8:	103ff926 	beq	r2,zero,3cb0 <strlen+0x3c>
    3ccc:	20800007 	ldb	r2,0(r4)
    3cd0:	10000326 	beq	r2,zero,3ce0 <strlen+0x6c>
    3cd4:	21000044 	addi	r4,r4,1
    3cd8:	20800007 	ldb	r2,0(r4)
    3cdc:	103ffd1e 	bne	r2,zero,3cd4 <strlen+0x60>
    3ce0:	2205c83a 	sub	r2,r4,r8
    3ce4:	f800283a 	ret

00003ce8 <__swbuf_r>:
    3ce8:	defffc04 	addi	sp,sp,-16
    3cec:	dc400215 	stw	r17,8(sp)
    3cf0:	dc000115 	stw	r16,4(sp)
    3cf4:	dfc00315 	stw	ra,12(sp)
    3cf8:	2023883a 	mov	r17,r4
    3cfc:	2821883a 	mov	r16,r5
    3d00:	20000226 	beq	r4,zero,3d0c <__swbuf_r+0x24>
    3d04:	20800e17 	ldw	r2,56(r4)
    3d08:	10002f26 	beq	r2,zero,3dc8 <__swbuf_r+0xe0>
    3d0c:	3080030b 	ldhu	r2,12(r6)
    3d10:	30c00617 	ldw	r3,24(r6)
    3d14:	1080020c 	andi	r2,r2,8
    3d18:	30c00215 	stw	r3,8(r6)
    3d1c:	10002226 	beq	r2,zero,3da8 <__swbuf_r+0xc0>
    3d20:	30c00417 	ldw	r3,16(r6)
    3d24:	18002026 	beq	r3,zero,3da8 <__swbuf_r+0xc0>
    3d28:	31000017 	ldw	r4,0(r6)
    3d2c:	30800517 	ldw	r2,20(r6)
    3d30:	20c7c83a 	sub	r3,r4,r3
    3d34:	18802f0e 	bge	r3,r2,3df4 <__swbuf_r+0x10c>
    3d38:	19400044 	addi	r5,r3,1
    3d3c:	30800217 	ldw	r2,8(r6)
    3d40:	84003fcc 	andi	r16,r16,255
    3d44:	20c00044 	addi	r3,r4,1
    3d48:	10bfffc4 	addi	r2,r2,-1
    3d4c:	30800215 	stw	r2,8(r6)
    3d50:	24000005 	stb	r16,0(r4)
    3d54:	30800517 	ldw	r2,20(r6)
    3d58:	30c00015 	stw	r3,0(r6)
    3d5c:	11400c26 	beq	r2,r5,3d90 <__swbuf_r+0xa8>
    3d60:	3080030b 	ldhu	r2,12(r6)
    3d64:	1080004c 	andi	r2,r2,1
    3d68:	1005003a 	cmpeq	r2,r2,zero
    3d6c:	10000626 	beq	r2,zero,3d88 <__swbuf_r+0xa0>
    3d70:	8005883a 	mov	r2,r16
    3d74:	dfc00317 	ldw	ra,12(sp)
    3d78:	dc400217 	ldw	r17,8(sp)
    3d7c:	dc000117 	ldw	r16,4(sp)
    3d80:	dec00404 	addi	sp,sp,16
    3d84:	f800283a 	ret
    3d88:	00800284 	movi	r2,10
    3d8c:	80bff81e 	bne	r16,r2,3d70 <__swbuf_r+0x88>
    3d90:	8809883a 	mov	r4,r17
    3d94:	300b883a 	mov	r5,r6
    3d98:	00042580 	call	4258 <_fflush_r>
    3d9c:	103ff426 	beq	r2,zero,3d70 <__swbuf_r+0x88>
    3da0:	043fffc4 	movi	r16,-1
    3da4:	003ff206 	br	3d70 <__swbuf_r+0x88>
    3da8:	300b883a 	mov	r5,r6
    3dac:	8809883a 	mov	r4,r17
    3db0:	d9800015 	stw	r6,0(sp)
    3db4:	0003e340 	call	3e34 <__swsetup_r>
    3db8:	d9800017 	ldw	r6,0(sp)
    3dbc:	1000061e 	bne	r2,zero,3dd8 <__swbuf_r+0xf0>
    3dc0:	30c00417 	ldw	r3,16(r6)
    3dc4:	003fd806 	br	3d28 <__swbuf_r+0x40>
    3dc8:	d9800015 	stw	r6,0(sp)
    3dcc:	00044f00 	call	44f0 <__sinit>
    3dd0:	d9800017 	ldw	r6,0(sp)
    3dd4:	003fcd06 	br	3d0c <__swbuf_r+0x24>
    3dd8:	3080030b 	ldhu	r2,12(r6)
    3ddc:	00c00244 	movi	r3,9
    3de0:	043fffc4 	movi	r16,-1
    3de4:	10801014 	ori	r2,r2,64
    3de8:	3080030d 	sth	r2,12(r6)
    3dec:	88c00015 	stw	r3,0(r17)
    3df0:	003fdf06 	br	3d70 <__swbuf_r+0x88>
    3df4:	300b883a 	mov	r5,r6
    3df8:	8809883a 	mov	r4,r17
    3dfc:	d9800015 	stw	r6,0(sp)
    3e00:	00042580 	call	4258 <_fflush_r>
    3e04:	d9800017 	ldw	r6,0(sp)
    3e08:	103fe51e 	bne	r2,zero,3da0 <__swbuf_r+0xb8>
    3e0c:	31000017 	ldw	r4,0(r6)
    3e10:	01400044 	movi	r5,1
    3e14:	003fc906 	br	3d3c <__swbuf_r+0x54>

00003e18 <__swbuf>:
    3e18:	01800034 	movhi	r6,0
    3e1c:	319ca704 	addi	r6,r6,29340
    3e20:	2007883a 	mov	r3,r4
    3e24:	31000017 	ldw	r4,0(r6)
    3e28:	280d883a 	mov	r6,r5
    3e2c:	180b883a 	mov	r5,r3
    3e30:	0003ce81 	jmpi	3ce8 <__swbuf_r>

00003e34 <__swsetup_r>:
    3e34:	00800034 	movhi	r2,0
    3e38:	109ca704 	addi	r2,r2,29340
    3e3c:	10c00017 	ldw	r3,0(r2)
    3e40:	defffd04 	addi	sp,sp,-12
    3e44:	dc400115 	stw	r17,4(sp)
    3e48:	dc000015 	stw	r16,0(sp)
    3e4c:	dfc00215 	stw	ra,8(sp)
    3e50:	2023883a 	mov	r17,r4
    3e54:	2821883a 	mov	r16,r5
    3e58:	18000226 	beq	r3,zero,3e64 <__swsetup_r+0x30>
    3e5c:	18800e17 	ldw	r2,56(r3)
    3e60:	10001f26 	beq	r2,zero,3ee0 <__swsetup_r+0xac>
    3e64:	8100030b 	ldhu	r4,12(r16)
    3e68:	2080020c 	andi	r2,r4,8
    3e6c:	10002826 	beq	r2,zero,3f10 <__swsetup_r+0xdc>
    3e70:	81400417 	ldw	r5,16(r16)
    3e74:	28001d26 	beq	r5,zero,3eec <__swsetup_r+0xb8>
    3e78:	2080004c 	andi	r2,r4,1
    3e7c:	1005003a 	cmpeq	r2,r2,zero
    3e80:	10000b26 	beq	r2,zero,3eb0 <__swsetup_r+0x7c>
    3e84:	2080008c 	andi	r2,r4,2
    3e88:	10001226 	beq	r2,zero,3ed4 <__swsetup_r+0xa0>
    3e8c:	0005883a 	mov	r2,zero
    3e90:	80800215 	stw	r2,8(r16)
    3e94:	28000b26 	beq	r5,zero,3ec4 <__swsetup_r+0x90>
    3e98:	0005883a 	mov	r2,zero
    3e9c:	dfc00217 	ldw	ra,8(sp)
    3ea0:	dc400117 	ldw	r17,4(sp)
    3ea4:	dc000017 	ldw	r16,0(sp)
    3ea8:	dec00304 	addi	sp,sp,12
    3eac:	f800283a 	ret
    3eb0:	80800517 	ldw	r2,20(r16)
    3eb4:	80000215 	stw	zero,8(r16)
    3eb8:	0085c83a 	sub	r2,zero,r2
    3ebc:	80800615 	stw	r2,24(r16)
    3ec0:	283ff51e 	bne	r5,zero,3e98 <__swsetup_r+0x64>
    3ec4:	2080200c 	andi	r2,r4,128
    3ec8:	103ff326 	beq	r2,zero,3e98 <__swsetup_r+0x64>
    3ecc:	00bfffc4 	movi	r2,-1
    3ed0:	003ff206 	br	3e9c <__swsetup_r+0x68>
    3ed4:	80800517 	ldw	r2,20(r16)
    3ed8:	80800215 	stw	r2,8(r16)
    3edc:	003fed06 	br	3e94 <__swsetup_r+0x60>
    3ee0:	1809883a 	mov	r4,r3
    3ee4:	00044f00 	call	44f0 <__sinit>
    3ee8:	003fde06 	br	3e64 <__swsetup_r+0x30>
    3eec:	20c0a00c 	andi	r3,r4,640
    3ef0:	00808004 	movi	r2,512
    3ef4:	18bfe026 	beq	r3,r2,3e78 <__swsetup_r+0x44>
    3ef8:	8809883a 	mov	r4,r17
    3efc:	800b883a 	mov	r5,r16
    3f00:	00048fc0 	call	48fc <__smakebuf_r>
    3f04:	8100030b 	ldhu	r4,12(r16)
    3f08:	81400417 	ldw	r5,16(r16)
    3f0c:	003fda06 	br	3e78 <__swsetup_r+0x44>
    3f10:	2080040c 	andi	r2,r4,16
    3f14:	103fed26 	beq	r2,zero,3ecc <__swsetup_r+0x98>
    3f18:	2080010c 	andi	r2,r4,4
    3f1c:	10001226 	beq	r2,zero,3f68 <__swsetup_r+0x134>
    3f20:	81400c17 	ldw	r5,48(r16)
    3f24:	28000526 	beq	r5,zero,3f3c <__swsetup_r+0x108>
    3f28:	80801004 	addi	r2,r16,64
    3f2c:	28800226 	beq	r5,r2,3f38 <__swsetup_r+0x104>
    3f30:	8809883a 	mov	r4,r17
    3f34:	00014000 	call	1400 <_free_r>
    3f38:	80000c15 	stw	zero,48(r16)
    3f3c:	8080030b 	ldhu	r2,12(r16)
    3f40:	81400417 	ldw	r5,16(r16)
    3f44:	80000115 	stw	zero,4(r16)
    3f48:	10bff6cc 	andi	r2,r2,65499
    3f4c:	8080030d 	sth	r2,12(r16)
    3f50:	81400015 	stw	r5,0(r16)
    3f54:	8080030b 	ldhu	r2,12(r16)
    3f58:	10800214 	ori	r2,r2,8
    3f5c:	113fffcc 	andi	r4,r2,65535
    3f60:	8080030d 	sth	r2,12(r16)
    3f64:	003fc306 	br	3e74 <__swsetup_r+0x40>
    3f68:	81400417 	ldw	r5,16(r16)
    3f6c:	003ff906 	br	3f54 <__swsetup_r+0x120>

00003f70 <__register_exitproc>:
    3f70:	defffa04 	addi	sp,sp,-24
    3f74:	00800034 	movhi	r2,0
    3f78:	109ca804 	addi	r2,r2,29344
    3f7c:	dc000015 	stw	r16,0(sp)
    3f80:	14000017 	ldw	r16,0(r2)
    3f84:	dd000415 	stw	r20,16(sp)
    3f88:	2829883a 	mov	r20,r5
    3f8c:	81405217 	ldw	r5,328(r16)
    3f90:	dcc00315 	stw	r19,12(sp)
    3f94:	dc800215 	stw	r18,8(sp)
    3f98:	dc400115 	stw	r17,4(sp)
    3f9c:	dfc00515 	stw	ra,20(sp)
    3fa0:	2023883a 	mov	r17,r4
    3fa4:	3027883a 	mov	r19,r6
    3fa8:	3825883a 	mov	r18,r7
    3fac:	28002526 	beq	r5,zero,4044 <__register_exitproc+0xd4>
    3fb0:	29000117 	ldw	r4,4(r5)
    3fb4:	008007c4 	movi	r2,31
    3fb8:	11002716 	blt	r2,r4,4058 <__register_exitproc+0xe8>
    3fbc:	8800101e 	bne	r17,zero,4000 <__register_exitproc+0x90>
    3fc0:	2105883a 	add	r2,r4,r4
    3fc4:	1085883a 	add	r2,r2,r2
    3fc8:	20c00044 	addi	r3,r4,1
    3fcc:	1145883a 	add	r2,r2,r5
    3fd0:	0009883a 	mov	r4,zero
    3fd4:	15000215 	stw	r20,8(r2)
    3fd8:	28c00115 	stw	r3,4(r5)
    3fdc:	2005883a 	mov	r2,r4
    3fe0:	dfc00517 	ldw	ra,20(sp)
    3fe4:	dd000417 	ldw	r20,16(sp)
    3fe8:	dcc00317 	ldw	r19,12(sp)
    3fec:	dc800217 	ldw	r18,8(sp)
    3ff0:	dc400117 	ldw	r17,4(sp)
    3ff4:	dc000017 	ldw	r16,0(sp)
    3ff8:	dec00604 	addi	sp,sp,24
    3ffc:	f800283a 	ret
    4000:	29802204 	addi	r6,r5,136
    4004:	00800044 	movi	r2,1
    4008:	110e983a 	sll	r7,r2,r4
    400c:	30c04017 	ldw	r3,256(r6)
    4010:	2105883a 	add	r2,r4,r4
    4014:	1085883a 	add	r2,r2,r2
    4018:	1185883a 	add	r2,r2,r6
    401c:	19c6b03a 	or	r3,r3,r7
    4020:	14802015 	stw	r18,128(r2)
    4024:	14c00015 	stw	r19,0(r2)
    4028:	00800084 	movi	r2,2
    402c:	30c04015 	stw	r3,256(r6)
    4030:	88bfe31e 	bne	r17,r2,3fc0 <__register_exitproc+0x50>
    4034:	30804117 	ldw	r2,260(r6)
    4038:	11c4b03a 	or	r2,r2,r7
    403c:	30804115 	stw	r2,260(r6)
    4040:	003fdf06 	br	3fc0 <__register_exitproc+0x50>
    4044:	00800074 	movhi	r2,1
    4048:	10a3ae04 	addi	r2,r2,-29000
    404c:	100b883a 	mov	r5,r2
    4050:	80805215 	stw	r2,328(r16)
    4054:	003fd606 	br	3fb0 <__register_exitproc+0x40>
    4058:	00800034 	movhi	r2,0
    405c:	1082c404 	addi	r2,r2,2832
    4060:	1000021e 	bne	r2,zero,406c <__register_exitproc+0xfc>
    4064:	013fffc4 	movi	r4,-1
    4068:	003fdc06 	br	3fdc <__register_exitproc+0x6c>
    406c:	01006404 	movi	r4,400
    4070:	103ee83a 	callr	r2
    4074:	1007883a 	mov	r3,r2
    4078:	103ffa26 	beq	r2,zero,4064 <__register_exitproc+0xf4>
    407c:	80805217 	ldw	r2,328(r16)
    4080:	180b883a 	mov	r5,r3
    4084:	18000115 	stw	zero,4(r3)
    4088:	18800015 	stw	r2,0(r3)
    408c:	80c05215 	stw	r3,328(r16)
    4090:	18006215 	stw	zero,392(r3)
    4094:	18006315 	stw	zero,396(r3)
    4098:	0009883a 	mov	r4,zero
    409c:	883fc826 	beq	r17,zero,3fc0 <__register_exitproc+0x50>
    40a0:	003fd706 	br	4000 <__register_exitproc+0x90>

000040a4 <register_fini>:
    40a4:	f800283a 	ret

000040a8 <__call_exitprocs>:
    40a8:	00800034 	movhi	r2,0
    40ac:	109ca804 	addi	r2,r2,29344
    40b0:	10800017 	ldw	r2,0(r2)
    40b4:	defff304 	addi	sp,sp,-52
    40b8:	df000b15 	stw	fp,44(sp)
    40bc:	d8800115 	stw	r2,4(sp)
    40c0:	00800034 	movhi	r2,0
    40c4:	1082bf04 	addi	r2,r2,2812
    40c8:	1005003a 	cmpeq	r2,r2,zero
    40cc:	d8800215 	stw	r2,8(sp)
    40d0:	d8800117 	ldw	r2,4(sp)
    40d4:	dd400815 	stw	r21,32(sp)
    40d8:	dd000715 	stw	r20,28(sp)
    40dc:	10805204 	addi	r2,r2,328
    40e0:	dfc00c15 	stw	ra,48(sp)
    40e4:	ddc00a15 	stw	r23,40(sp)
    40e8:	dd800915 	stw	r22,36(sp)
    40ec:	dcc00615 	stw	r19,24(sp)
    40f0:	dc800515 	stw	r18,20(sp)
    40f4:	dc400415 	stw	r17,16(sp)
    40f8:	dc000315 	stw	r16,12(sp)
    40fc:	282b883a 	mov	r21,r5
    4100:	2039883a 	mov	fp,r4
    4104:	d8800015 	stw	r2,0(sp)
    4108:	2829003a 	cmpeq	r20,r5,zero
    410c:	d8800117 	ldw	r2,4(sp)
    4110:	14405217 	ldw	r17,328(r2)
    4114:	88001026 	beq	r17,zero,4158 <__call_exitprocs+0xb0>
    4118:	ddc00017 	ldw	r23,0(sp)
    411c:	88800117 	ldw	r2,4(r17)
    4120:	8c802204 	addi	r18,r17,136
    4124:	143fffc4 	addi	r16,r2,-1
    4128:	80000916 	blt	r16,zero,4150 <__call_exitprocs+0xa8>
    412c:	05bfffc4 	movi	r22,-1
    4130:	a000151e 	bne	r20,zero,4188 <__call_exitprocs+0xe0>
    4134:	8409883a 	add	r4,r16,r16
    4138:	2105883a 	add	r2,r4,r4
    413c:	1485883a 	add	r2,r2,r18
    4140:	10c02017 	ldw	r3,128(r2)
    4144:	a8c01126 	beq	r21,r3,418c <__call_exitprocs+0xe4>
    4148:	843fffc4 	addi	r16,r16,-1
    414c:	85bff81e 	bne	r16,r22,4130 <__call_exitprocs+0x88>
    4150:	d8800217 	ldw	r2,8(sp)
    4154:	10003126 	beq	r2,zero,421c <__call_exitprocs+0x174>
    4158:	dfc00c17 	ldw	ra,48(sp)
    415c:	df000b17 	ldw	fp,44(sp)
    4160:	ddc00a17 	ldw	r23,40(sp)
    4164:	dd800917 	ldw	r22,36(sp)
    4168:	dd400817 	ldw	r21,32(sp)
    416c:	dd000717 	ldw	r20,28(sp)
    4170:	dcc00617 	ldw	r19,24(sp)
    4174:	dc800517 	ldw	r18,20(sp)
    4178:	dc400417 	ldw	r17,16(sp)
    417c:	dc000317 	ldw	r16,12(sp)
    4180:	dec00d04 	addi	sp,sp,52
    4184:	f800283a 	ret
    4188:	8409883a 	add	r4,r16,r16
    418c:	88c00117 	ldw	r3,4(r17)
    4190:	2105883a 	add	r2,r4,r4
    4194:	1445883a 	add	r2,r2,r17
    4198:	18ffffc4 	addi	r3,r3,-1
    419c:	11800217 	ldw	r6,8(r2)
    41a0:	1c001526 	beq	r3,r16,41f8 <__call_exitprocs+0x150>
    41a4:	10000215 	stw	zero,8(r2)
    41a8:	303fe726 	beq	r6,zero,4148 <__call_exitprocs+0xa0>
    41ac:	00c00044 	movi	r3,1
    41b0:	1c06983a 	sll	r3,r3,r16
    41b4:	90804017 	ldw	r2,256(r18)
    41b8:	8cc00117 	ldw	r19,4(r17)
    41bc:	1884703a 	and	r2,r3,r2
    41c0:	10001426 	beq	r2,zero,4214 <__call_exitprocs+0x16c>
    41c4:	90804117 	ldw	r2,260(r18)
    41c8:	1884703a 	and	r2,r3,r2
    41cc:	10000c1e 	bne	r2,zero,4200 <__call_exitprocs+0x158>
    41d0:	2105883a 	add	r2,r4,r4
    41d4:	1485883a 	add	r2,r2,r18
    41d8:	11400017 	ldw	r5,0(r2)
    41dc:	e009883a 	mov	r4,fp
    41e0:	303ee83a 	callr	r6
    41e4:	88800117 	ldw	r2,4(r17)
    41e8:	98bfc81e 	bne	r19,r2,410c <__call_exitprocs+0x64>
    41ec:	b8800017 	ldw	r2,0(r23)
    41f0:	147fd526 	beq	r2,r17,4148 <__call_exitprocs+0xa0>
    41f4:	003fc506 	br	410c <__call_exitprocs+0x64>
    41f8:	8c000115 	stw	r16,4(r17)
    41fc:	003fea06 	br	41a8 <__call_exitprocs+0x100>
    4200:	2105883a 	add	r2,r4,r4
    4204:	1485883a 	add	r2,r2,r18
    4208:	11000017 	ldw	r4,0(r2)
    420c:	303ee83a 	callr	r6
    4210:	003ff406 	br	41e4 <__call_exitprocs+0x13c>
    4214:	303ee83a 	callr	r6
    4218:	003ff206 	br	41e4 <__call_exitprocs+0x13c>
    421c:	88800117 	ldw	r2,4(r17)
    4220:	1000081e 	bne	r2,zero,4244 <__call_exitprocs+0x19c>
    4224:	89000017 	ldw	r4,0(r17)
    4228:	20000726 	beq	r4,zero,4248 <__call_exitprocs+0x1a0>
    422c:	b9000015 	stw	r4,0(r23)
    4230:	8809883a 	mov	r4,r17
    4234:	0000afc0 	call	afc <free>
    4238:	bc400017 	ldw	r17,0(r23)
    423c:	883fb71e 	bne	r17,zero,411c <__call_exitprocs+0x74>
    4240:	003fc506 	br	4158 <__call_exitprocs+0xb0>
    4244:	89000017 	ldw	r4,0(r17)
    4248:	882f883a 	mov	r23,r17
    424c:	2023883a 	mov	r17,r4
    4250:	883fb21e 	bne	r17,zero,411c <__call_exitprocs+0x74>
    4254:	003fc006 	br	4158 <__call_exitprocs+0xb0>

00004258 <_fflush_r>:
    4258:	defffb04 	addi	sp,sp,-20
    425c:	dcc00315 	stw	r19,12(sp)
    4260:	dc800215 	stw	r18,8(sp)
    4264:	dfc00415 	stw	ra,16(sp)
    4268:	dc400115 	stw	r17,4(sp)
    426c:	dc000015 	stw	r16,0(sp)
    4270:	2027883a 	mov	r19,r4
    4274:	2825883a 	mov	r18,r5
    4278:	20000226 	beq	r4,zero,4284 <_fflush_r+0x2c>
    427c:	20800e17 	ldw	r2,56(r4)
    4280:	10005626 	beq	r2,zero,43dc <_fflush_r+0x184>
    4284:	9100030b 	ldhu	r4,12(r18)
    4288:	20ffffcc 	andi	r3,r4,65535
    428c:	18e0001c 	xori	r3,r3,32768
    4290:	18e00004 	addi	r3,r3,-32768
    4294:	1880020c 	andi	r2,r3,8
    4298:	1000261e 	bne	r2,zero,4334 <_fflush_r+0xdc>
    429c:	90c00117 	ldw	r3,4(r18)
    42a0:	20820014 	ori	r2,r4,2048
    42a4:	9080030d 	sth	r2,12(r18)
    42a8:	1009883a 	mov	r4,r2
    42ac:	00c0400e 	bge	zero,r3,43b0 <_fflush_r+0x158>
    42b0:	92000a17 	ldw	r8,40(r18)
    42b4:	40004026 	beq	r8,zero,43b8 <_fflush_r+0x160>
    42b8:	2084000c 	andi	r2,r4,4096
    42bc:	10005326 	beq	r2,zero,440c <_fflush_r+0x1b4>
    42c0:	94001417 	ldw	r16,80(r18)
    42c4:	9080030b 	ldhu	r2,12(r18)
    42c8:	1080010c 	andi	r2,r2,4
    42cc:	1000481e 	bne	r2,zero,43f0 <_fflush_r+0x198>
    42d0:	91400717 	ldw	r5,28(r18)
    42d4:	9809883a 	mov	r4,r19
    42d8:	800d883a 	mov	r6,r16
    42dc:	000f883a 	mov	r7,zero
    42e0:	403ee83a 	callr	r8
    42e4:	8080261e 	bne	r16,r2,4380 <_fflush_r+0x128>
    42e8:	9080030b 	ldhu	r2,12(r18)
    42ec:	91000417 	ldw	r4,16(r18)
    42f0:	90000115 	stw	zero,4(r18)
    42f4:	10bdffcc 	andi	r2,r2,63487
    42f8:	10ffffcc 	andi	r3,r2,65535
    42fc:	18c4000c 	andi	r3,r3,4096
    4300:	9080030d 	sth	r2,12(r18)
    4304:	91000015 	stw	r4,0(r18)
    4308:	18002b26 	beq	r3,zero,43b8 <_fflush_r+0x160>
    430c:	0007883a 	mov	r3,zero
    4310:	1805883a 	mov	r2,r3
    4314:	94001415 	stw	r16,80(r18)
    4318:	dfc00417 	ldw	ra,16(sp)
    431c:	dcc00317 	ldw	r19,12(sp)
    4320:	dc800217 	ldw	r18,8(sp)
    4324:	dc400117 	ldw	r17,4(sp)
    4328:	dc000017 	ldw	r16,0(sp)
    432c:	dec00504 	addi	sp,sp,20
    4330:	f800283a 	ret
    4334:	94400417 	ldw	r17,16(r18)
    4338:	88001f26 	beq	r17,zero,43b8 <_fflush_r+0x160>
    433c:	90800017 	ldw	r2,0(r18)
    4340:	18c000cc 	andi	r3,r3,3
    4344:	94400015 	stw	r17,0(r18)
    4348:	1461c83a 	sub	r16,r2,r17
    434c:	18002526 	beq	r3,zero,43e4 <_fflush_r+0x18c>
    4350:	0005883a 	mov	r2,zero
    4354:	90800215 	stw	r2,8(r18)
    4358:	0400170e 	bge	zero,r16,43b8 <_fflush_r+0x160>
    435c:	90c00917 	ldw	r3,36(r18)
    4360:	91400717 	ldw	r5,28(r18)
    4364:	880d883a 	mov	r6,r17
    4368:	800f883a 	mov	r7,r16
    436c:	9809883a 	mov	r4,r19
    4370:	183ee83a 	callr	r3
    4374:	88a3883a 	add	r17,r17,r2
    4378:	80a1c83a 	sub	r16,r16,r2
    437c:	00bff616 	blt	zero,r2,4358 <_fflush_r+0x100>
    4380:	9080030b 	ldhu	r2,12(r18)
    4384:	00ffffc4 	movi	r3,-1
    4388:	10801014 	ori	r2,r2,64
    438c:	9080030d 	sth	r2,12(r18)
    4390:	1805883a 	mov	r2,r3
    4394:	dfc00417 	ldw	ra,16(sp)
    4398:	dcc00317 	ldw	r19,12(sp)
    439c:	dc800217 	ldw	r18,8(sp)
    43a0:	dc400117 	ldw	r17,4(sp)
    43a4:	dc000017 	ldw	r16,0(sp)
    43a8:	dec00504 	addi	sp,sp,20
    43ac:	f800283a 	ret
    43b0:	90800f17 	ldw	r2,60(r18)
    43b4:	00bfbe16 	blt	zero,r2,42b0 <_fflush_r+0x58>
    43b8:	0007883a 	mov	r3,zero
    43bc:	1805883a 	mov	r2,r3
    43c0:	dfc00417 	ldw	ra,16(sp)
    43c4:	dcc00317 	ldw	r19,12(sp)
    43c8:	dc800217 	ldw	r18,8(sp)
    43cc:	dc400117 	ldw	r17,4(sp)
    43d0:	dc000017 	ldw	r16,0(sp)
    43d4:	dec00504 	addi	sp,sp,20
    43d8:	f800283a 	ret
    43dc:	00044f00 	call	44f0 <__sinit>
    43e0:	003fa806 	br	4284 <_fflush_r+0x2c>
    43e4:	90800517 	ldw	r2,20(r18)
    43e8:	90800215 	stw	r2,8(r18)
    43ec:	003fda06 	br	4358 <_fflush_r+0x100>
    43f0:	90800117 	ldw	r2,4(r18)
    43f4:	90c00c17 	ldw	r3,48(r18)
    43f8:	80a1c83a 	sub	r16,r16,r2
    43fc:	183fb426 	beq	r3,zero,42d0 <_fflush_r+0x78>
    4400:	90800f17 	ldw	r2,60(r18)
    4404:	80a1c83a 	sub	r16,r16,r2
    4408:	003fb106 	br	42d0 <_fflush_r+0x78>
    440c:	91400717 	ldw	r5,28(r18)
    4410:	9809883a 	mov	r4,r19
    4414:	000d883a 	mov	r6,zero
    4418:	01c00044 	movi	r7,1
    441c:	403ee83a 	callr	r8
    4420:	1021883a 	mov	r16,r2
    4424:	00bfffc4 	movi	r2,-1
    4428:	80800226 	beq	r16,r2,4434 <_fflush_r+0x1dc>
    442c:	92000a17 	ldw	r8,40(r18)
    4430:	003fa406 	br	42c4 <_fflush_r+0x6c>
    4434:	98c00017 	ldw	r3,0(r19)
    4438:	00800744 	movi	r2,29
    443c:	18bfde26 	beq	r3,r2,43b8 <_fflush_r+0x160>
    4440:	9080030b 	ldhu	r2,12(r18)
    4444:	8007883a 	mov	r3,r16
    4448:	10801014 	ori	r2,r2,64
    444c:	9080030d 	sth	r2,12(r18)
    4450:	003fcf06 	br	4390 <_fflush_r+0x138>

00004454 <fflush>:
    4454:	01400034 	movhi	r5,0
    4458:	29509604 	addi	r5,r5,16984
    445c:	2007883a 	mov	r3,r4
    4460:	20000526 	beq	r4,zero,4478 <fflush+0x24>
    4464:	00800034 	movhi	r2,0
    4468:	109ca704 	addi	r2,r2,29340
    446c:	11000017 	ldw	r4,0(r2)
    4470:	180b883a 	mov	r5,r3
    4474:	00042581 	jmpi	4258 <_fflush_r>
    4478:	00800034 	movhi	r2,0
    447c:	109ca804 	addi	r2,r2,29344
    4480:	11000017 	ldw	r4,0(r2)
    4484:	000477c1 	jmpi	477c <_fwalk_reent>

00004488 <std>:
    4488:	00800034 	movhi	r2,0
    448c:	1092ca04 	addi	r2,r2,19240
    4490:	20800b15 	stw	r2,44(r4)
    4494:	00800034 	movhi	r2,0
    4498:	10930504 	addi	r2,r2,19476
    449c:	20800815 	stw	r2,32(r4)
    44a0:	00c00034 	movhi	r3,0
    44a4:	18d2e604 	addi	r3,r3,19352
    44a8:	00800034 	movhi	r2,0
    44ac:	1092cc04 	addi	r2,r2,19248
    44b0:	2140030d 	sth	r5,12(r4)
    44b4:	2180038d 	sth	r6,14(r4)
    44b8:	20c00915 	stw	r3,36(r4)
    44bc:	20800a15 	stw	r2,40(r4)
    44c0:	20000015 	stw	zero,0(r4)
    44c4:	20000115 	stw	zero,4(r4)
    44c8:	20000215 	stw	zero,8(r4)
    44cc:	20000415 	stw	zero,16(r4)
    44d0:	20000515 	stw	zero,20(r4)
    44d4:	20000615 	stw	zero,24(r4)
    44d8:	21000715 	stw	r4,28(r4)
    44dc:	f800283a 	ret

000044e0 <__sfp_lock_acquire>:
    44e0:	f800283a 	ret

000044e4 <__sfp_lock_release>:
    44e4:	f800283a 	ret

000044e8 <__sinit_lock_acquire>:
    44e8:	f800283a 	ret

000044ec <__sinit_lock_release>:
    44ec:	f800283a 	ret

000044f0 <__sinit>:
    44f0:	20800e17 	ldw	r2,56(r4)
    44f4:	defffd04 	addi	sp,sp,-12
    44f8:	dc400115 	stw	r17,4(sp)
    44fc:	dc000015 	stw	r16,0(sp)
    4500:	dfc00215 	stw	ra,8(sp)
    4504:	04400044 	movi	r17,1
    4508:	01400104 	movi	r5,4
    450c:	000d883a 	mov	r6,zero
    4510:	2021883a 	mov	r16,r4
    4514:	2200bb04 	addi	r8,r4,748
    4518:	200f883a 	mov	r7,r4
    451c:	10000526 	beq	r2,zero,4534 <__sinit+0x44>
    4520:	dfc00217 	ldw	ra,8(sp)
    4524:	dc400117 	ldw	r17,4(sp)
    4528:	dc000017 	ldw	r16,0(sp)
    452c:	dec00304 	addi	sp,sp,12
    4530:	f800283a 	ret
    4534:	21000117 	ldw	r4,4(r4)
    4538:	00800034 	movhi	r2,0
    453c:	10917504 	addi	r2,r2,17876
    4540:	00c000c4 	movi	r3,3
    4544:	80800f15 	stw	r2,60(r16)
    4548:	80c0b915 	stw	r3,740(r16)
    454c:	8200ba15 	stw	r8,744(r16)
    4550:	84400e15 	stw	r17,56(r16)
    4554:	8000b815 	stw	zero,736(r16)
    4558:	00044880 	call	4488 <std>
    455c:	81000217 	ldw	r4,8(r16)
    4560:	880d883a 	mov	r6,r17
    4564:	800f883a 	mov	r7,r16
    4568:	01400284 	movi	r5,10
    456c:	00044880 	call	4488 <std>
    4570:	81000317 	ldw	r4,12(r16)
    4574:	800f883a 	mov	r7,r16
    4578:	01400484 	movi	r5,18
    457c:	01800084 	movi	r6,2
    4580:	dfc00217 	ldw	ra,8(sp)
    4584:	dc400117 	ldw	r17,4(sp)
    4588:	dc000017 	ldw	r16,0(sp)
    458c:	dec00304 	addi	sp,sp,12
    4590:	00044881 	jmpi	4488 <std>

00004594 <__fp_lock>:
    4594:	0005883a 	mov	r2,zero
    4598:	f800283a 	ret

0000459c <__fp_unlock>:
    459c:	0005883a 	mov	r2,zero
    45a0:	f800283a 	ret

000045a4 <__fp_unlock_all>:
    45a4:	00800034 	movhi	r2,0
    45a8:	109ca704 	addi	r2,r2,29340
    45ac:	11000017 	ldw	r4,0(r2)
    45b0:	01400034 	movhi	r5,0
    45b4:	29516704 	addi	r5,r5,17820
    45b8:	00048441 	jmpi	4844 <_fwalk>

000045bc <__fp_lock_all>:
    45bc:	00800034 	movhi	r2,0
    45c0:	109ca704 	addi	r2,r2,29340
    45c4:	11000017 	ldw	r4,0(r2)
    45c8:	01400034 	movhi	r5,0
    45cc:	29516504 	addi	r5,r5,17812
    45d0:	00048441 	jmpi	4844 <_fwalk>

000045d4 <_cleanup_r>:
    45d4:	01400034 	movhi	r5,0
    45d8:	29539b04 	addi	r5,r5,20076
    45dc:	00048441 	jmpi	4844 <_fwalk>

000045e0 <_cleanup>:
    45e0:	00800034 	movhi	r2,0
    45e4:	109ca804 	addi	r2,r2,29344
    45e8:	11000017 	ldw	r4,0(r2)
    45ec:	00045d41 	jmpi	45d4 <_cleanup_r>

000045f0 <__sfmoreglue>:
    45f0:	defffc04 	addi	sp,sp,-16
    45f4:	dc000015 	stw	r16,0(sp)
    45f8:	2821883a 	mov	r16,r5
    45fc:	dc400115 	stw	r17,4(sp)
    4600:	01401704 	movi	r5,92
    4604:	2023883a 	mov	r17,r4
    4608:	8009883a 	mov	r4,r16
    460c:	dfc00315 	stw	ra,12(sp)
    4610:	dcc00215 	stw	r19,8(sp)
    4614:	0000ac40 	call	ac4 <__mulsi3>
    4618:	11400304 	addi	r5,r2,12
    461c:	8809883a 	mov	r4,r17
    4620:	1027883a 	mov	r19,r2
    4624:	0000b240 	call	b24 <_malloc_r>
    4628:	10c00304 	addi	r3,r2,12
    462c:	1023883a 	mov	r17,r2
    4630:	1809883a 	mov	r4,r3
    4634:	980d883a 	mov	r6,r19
    4638:	000b883a 	mov	r5,zero
    463c:	10000b26 	beq	r2,zero,466c <__sfmoreglue+0x7c>
    4640:	14000115 	stw	r16,4(r2)
    4644:	10c00215 	stw	r3,8(r2)
    4648:	10000015 	stw	zero,0(r2)
    464c:	0004a900 	call	4a90 <memset>
    4650:	8805883a 	mov	r2,r17
    4654:	dfc00317 	ldw	ra,12(sp)
    4658:	dcc00217 	ldw	r19,8(sp)
    465c:	dc400117 	ldw	r17,4(sp)
    4660:	dc000017 	ldw	r16,0(sp)
    4664:	dec00404 	addi	sp,sp,16
    4668:	f800283a 	ret
    466c:	0023883a 	mov	r17,zero
    4670:	8805883a 	mov	r2,r17
    4674:	dfc00317 	ldw	ra,12(sp)
    4678:	dcc00217 	ldw	r19,8(sp)
    467c:	dc400117 	ldw	r17,4(sp)
    4680:	dc000017 	ldw	r16,0(sp)
    4684:	dec00404 	addi	sp,sp,16
    4688:	f800283a 	ret

0000468c <__sfp>:
    468c:	defffd04 	addi	sp,sp,-12
    4690:	00800034 	movhi	r2,0
    4694:	109ca804 	addi	r2,r2,29344
    4698:	dc000015 	stw	r16,0(sp)
    469c:	14000017 	ldw	r16,0(r2)
    46a0:	dc400115 	stw	r17,4(sp)
    46a4:	dfc00215 	stw	ra,8(sp)
    46a8:	80800e17 	ldw	r2,56(r16)
    46ac:	2023883a 	mov	r17,r4
    46b0:	10002626 	beq	r2,zero,474c <__sfp+0xc0>
    46b4:	8400b804 	addi	r16,r16,736
    46b8:	80800117 	ldw	r2,4(r16)
    46bc:	81000217 	ldw	r4,8(r16)
    46c0:	10ffffc4 	addi	r3,r2,-1
    46c4:	18000916 	blt	r3,zero,46ec <__sfp+0x60>
    46c8:	2080030f 	ldh	r2,12(r4)
    46cc:	10000b26 	beq	r2,zero,46fc <__sfp+0x70>
    46d0:	017fffc4 	movi	r5,-1
    46d4:	00000206 	br	46e0 <__sfp+0x54>
    46d8:	2080030f 	ldh	r2,12(r4)
    46dc:	10000726 	beq	r2,zero,46fc <__sfp+0x70>
    46e0:	18ffffc4 	addi	r3,r3,-1
    46e4:	21001704 	addi	r4,r4,92
    46e8:	197ffb1e 	bne	r3,r5,46d8 <__sfp+0x4c>
    46ec:	80800017 	ldw	r2,0(r16)
    46f0:	10001926 	beq	r2,zero,4758 <__sfp+0xcc>
    46f4:	1021883a 	mov	r16,r2
    46f8:	003fef06 	br	46b8 <__sfp+0x2c>
    46fc:	00bfffc4 	movi	r2,-1
    4700:	00c00044 	movi	r3,1
    4704:	2080038d 	sth	r2,14(r4)
    4708:	20c0030d 	sth	r3,12(r4)
    470c:	20000015 	stw	zero,0(r4)
    4710:	20000215 	stw	zero,8(r4)
    4714:	20000115 	stw	zero,4(r4)
    4718:	20000415 	stw	zero,16(r4)
    471c:	20000515 	stw	zero,20(r4)
    4720:	20000615 	stw	zero,24(r4)
    4724:	20000c15 	stw	zero,48(r4)
    4728:	20000d15 	stw	zero,52(r4)
    472c:	20001115 	stw	zero,68(r4)
    4730:	20001215 	stw	zero,72(r4)
    4734:	2005883a 	mov	r2,r4
    4738:	dfc00217 	ldw	ra,8(sp)
    473c:	dc400117 	ldw	r17,4(sp)
    4740:	dc000017 	ldw	r16,0(sp)
    4744:	dec00304 	addi	sp,sp,12
    4748:	f800283a 	ret
    474c:	8009883a 	mov	r4,r16
    4750:	00044f00 	call	44f0 <__sinit>
    4754:	003fd706 	br	46b4 <__sfp+0x28>
    4758:	8809883a 	mov	r4,r17
    475c:	01400104 	movi	r5,4
    4760:	00045f00 	call	45f0 <__sfmoreglue>
    4764:	80800015 	stw	r2,0(r16)
    4768:	103fe21e 	bne	r2,zero,46f4 <__sfp+0x68>
    476c:	00800304 	movi	r2,12
    4770:	0009883a 	mov	r4,zero
    4774:	88800015 	stw	r2,0(r17)
    4778:	003fee06 	br	4734 <__sfp+0xa8>

0000477c <_fwalk_reent>:
    477c:	defff704 	addi	sp,sp,-36
    4780:	dcc00315 	stw	r19,12(sp)
    4784:	24c0b804 	addi	r19,r4,736
    4788:	dd800615 	stw	r22,24(sp)
    478c:	dd400515 	stw	r21,20(sp)
    4790:	dfc00815 	stw	ra,32(sp)
    4794:	ddc00715 	stw	r23,28(sp)
    4798:	dd000415 	stw	r20,16(sp)
    479c:	dc800215 	stw	r18,8(sp)
    47a0:	dc400115 	stw	r17,4(sp)
    47a4:	dc000015 	stw	r16,0(sp)
    47a8:	202b883a 	mov	r21,r4
    47ac:	282d883a 	mov	r22,r5
    47b0:	00044e00 	call	44e0 <__sfp_lock_acquire>
    47b4:	98002126 	beq	r19,zero,483c <_fwalk_reent+0xc0>
    47b8:	002f883a 	mov	r23,zero
    47bc:	9c800117 	ldw	r18,4(r19)
    47c0:	9c000217 	ldw	r16,8(r19)
    47c4:	90bfffc4 	addi	r2,r18,-1
    47c8:	10000d16 	blt	r2,zero,4800 <_fwalk_reent+0x84>
    47cc:	0023883a 	mov	r17,zero
    47d0:	053fffc4 	movi	r20,-1
    47d4:	8080030f 	ldh	r2,12(r16)
    47d8:	8c400044 	addi	r17,r17,1
    47dc:	10000626 	beq	r2,zero,47f8 <_fwalk_reent+0x7c>
    47e0:	8080038f 	ldh	r2,14(r16)
    47e4:	800b883a 	mov	r5,r16
    47e8:	a809883a 	mov	r4,r21
    47ec:	15000226 	beq	r2,r20,47f8 <_fwalk_reent+0x7c>
    47f0:	b03ee83a 	callr	r22
    47f4:	b8aeb03a 	or	r23,r23,r2
    47f8:	84001704 	addi	r16,r16,92
    47fc:	947ff51e 	bne	r18,r17,47d4 <_fwalk_reent+0x58>
    4800:	9cc00017 	ldw	r19,0(r19)
    4804:	983fed1e 	bne	r19,zero,47bc <_fwalk_reent+0x40>
    4808:	00044e40 	call	44e4 <__sfp_lock_release>
    480c:	b805883a 	mov	r2,r23
    4810:	dfc00817 	ldw	ra,32(sp)
    4814:	ddc00717 	ldw	r23,28(sp)
    4818:	dd800617 	ldw	r22,24(sp)
    481c:	dd400517 	ldw	r21,20(sp)
    4820:	dd000417 	ldw	r20,16(sp)
    4824:	dcc00317 	ldw	r19,12(sp)
    4828:	dc800217 	ldw	r18,8(sp)
    482c:	dc400117 	ldw	r17,4(sp)
    4830:	dc000017 	ldw	r16,0(sp)
    4834:	dec00904 	addi	sp,sp,36
    4838:	f800283a 	ret
    483c:	002f883a 	mov	r23,zero
    4840:	003ff106 	br	4808 <_fwalk_reent+0x8c>

00004844 <_fwalk>:
    4844:	defff804 	addi	sp,sp,-32
    4848:	dcc00315 	stw	r19,12(sp)
    484c:	24c0b804 	addi	r19,r4,736
    4850:	dd400515 	stw	r21,20(sp)
    4854:	dfc00715 	stw	ra,28(sp)
    4858:	dd800615 	stw	r22,24(sp)
    485c:	dd000415 	stw	r20,16(sp)
    4860:	dc800215 	stw	r18,8(sp)
    4864:	dc400115 	stw	r17,4(sp)
    4868:	dc000015 	stw	r16,0(sp)
    486c:	282b883a 	mov	r21,r5
    4870:	00044e00 	call	44e0 <__sfp_lock_acquire>
    4874:	98001f26 	beq	r19,zero,48f4 <_fwalk+0xb0>
    4878:	002d883a 	mov	r22,zero
    487c:	9c800117 	ldw	r18,4(r19)
    4880:	9c000217 	ldw	r16,8(r19)
    4884:	90bfffc4 	addi	r2,r18,-1
    4888:	10000c16 	blt	r2,zero,48bc <_fwalk+0x78>
    488c:	0023883a 	mov	r17,zero
    4890:	053fffc4 	movi	r20,-1
    4894:	8080030f 	ldh	r2,12(r16)
    4898:	8c400044 	addi	r17,r17,1
    489c:	10000526 	beq	r2,zero,48b4 <_fwalk+0x70>
    48a0:	8080038f 	ldh	r2,14(r16)
    48a4:	8009883a 	mov	r4,r16
    48a8:	15000226 	beq	r2,r20,48b4 <_fwalk+0x70>
    48ac:	a83ee83a 	callr	r21
    48b0:	b0acb03a 	or	r22,r22,r2
    48b4:	84001704 	addi	r16,r16,92
    48b8:	947ff61e 	bne	r18,r17,4894 <_fwalk+0x50>
    48bc:	9cc00017 	ldw	r19,0(r19)
    48c0:	983fee1e 	bne	r19,zero,487c <_fwalk+0x38>
    48c4:	00044e40 	call	44e4 <__sfp_lock_release>
    48c8:	b005883a 	mov	r2,r22
    48cc:	dfc00717 	ldw	ra,28(sp)
    48d0:	dd800617 	ldw	r22,24(sp)
    48d4:	dd400517 	ldw	r21,20(sp)
    48d8:	dd000417 	ldw	r20,16(sp)
    48dc:	dcc00317 	ldw	r19,12(sp)
    48e0:	dc800217 	ldw	r18,8(sp)
    48e4:	dc400117 	ldw	r17,4(sp)
    48e8:	dc000017 	ldw	r16,0(sp)
    48ec:	dec00804 	addi	sp,sp,32
    48f0:	f800283a 	ret
    48f4:	002d883a 	mov	r22,zero
    48f8:	003ff206 	br	48c4 <_fwalk+0x80>

000048fc <__smakebuf_r>:
    48fc:	2880030b 	ldhu	r2,12(r5)
    4900:	deffed04 	addi	sp,sp,-76
    4904:	dc401015 	stw	r17,64(sp)
    4908:	1080008c 	andi	r2,r2,2
    490c:	dc000f15 	stw	r16,60(sp)
    4910:	dfc01215 	stw	ra,72(sp)
    4914:	dc801115 	stw	r18,68(sp)
    4918:	2821883a 	mov	r16,r5
    491c:	2023883a 	mov	r17,r4
    4920:	10000b26 	beq	r2,zero,4950 <__smakebuf_r+0x54>
    4924:	28c010c4 	addi	r3,r5,67
    4928:	00800044 	movi	r2,1
    492c:	28800515 	stw	r2,20(r5)
    4930:	28c00415 	stw	r3,16(r5)
    4934:	28c00015 	stw	r3,0(r5)
    4938:	dfc01217 	ldw	ra,72(sp)
    493c:	dc801117 	ldw	r18,68(sp)
    4940:	dc401017 	ldw	r17,64(sp)
    4944:	dc000f17 	ldw	r16,60(sp)
    4948:	dec01304 	addi	sp,sp,76
    494c:	f800283a 	ret
    4950:	2940038f 	ldh	r5,14(r5)
    4954:	28002116 	blt	r5,zero,49dc <__smakebuf_r+0xe0>
    4958:	d80d883a 	mov	r6,sp
    495c:	0004e800 	call	4e80 <_fstat_r>
    4960:	10001e16 	blt	r2,zero,49dc <__smakebuf_r+0xe0>
    4964:	d8800117 	ldw	r2,4(sp)
    4968:	00e00014 	movui	r3,32768
    496c:	113c000c 	andi	r4,r2,61440
    4970:	20c03126 	beq	r4,r3,4a38 <__smakebuf_r+0x13c>
    4974:	8080030b 	ldhu	r2,12(r16)
    4978:	00c80004 	movi	r3,8192
    497c:	10820014 	ori	r2,r2,2048
    4980:	8080030d 	sth	r2,12(r16)
    4984:	20c01e26 	beq	r4,r3,4a00 <__smakebuf_r+0x104>
    4988:	04810004 	movi	r18,1024
    498c:	8809883a 	mov	r4,r17
    4990:	900b883a 	mov	r5,r18
    4994:	0000b240 	call	b24 <_malloc_r>
    4998:	1009883a 	mov	r4,r2
    499c:	10003126 	beq	r2,zero,4a64 <__smakebuf_r+0x168>
    49a0:	80c0030b 	ldhu	r3,12(r16)
    49a4:	00800034 	movhi	r2,0
    49a8:	10917504 	addi	r2,r2,17876
    49ac:	88800f15 	stw	r2,60(r17)
    49b0:	18c02014 	ori	r3,r3,128
    49b4:	84800515 	stw	r18,20(r16)
    49b8:	80c0030d 	sth	r3,12(r16)
    49bc:	81000415 	stw	r4,16(r16)
    49c0:	81000015 	stw	r4,0(r16)
    49c4:	dfc01217 	ldw	ra,72(sp)
    49c8:	dc801117 	ldw	r18,68(sp)
    49cc:	dc401017 	ldw	r17,64(sp)
    49d0:	dc000f17 	ldw	r16,60(sp)
    49d4:	dec01304 	addi	sp,sp,76
    49d8:	f800283a 	ret
    49dc:	80c0030b 	ldhu	r3,12(r16)
    49e0:	1880200c 	andi	r2,r3,128
    49e4:	10000426 	beq	r2,zero,49f8 <__smakebuf_r+0xfc>
    49e8:	04801004 	movi	r18,64
    49ec:	18820014 	ori	r2,r3,2048
    49f0:	8080030d 	sth	r2,12(r16)
    49f4:	003fe506 	br	498c <__smakebuf_r+0x90>
    49f8:	04810004 	movi	r18,1024
    49fc:	003ffb06 	br	49ec <__smakebuf_r+0xf0>
    4a00:	8140038f 	ldh	r5,14(r16)
    4a04:	8809883a 	mov	r4,r17
    4a08:	0004ef40 	call	4ef4 <_isatty_r>
    4a0c:	103fde26 	beq	r2,zero,4988 <__smakebuf_r+0x8c>
    4a10:	8080030b 	ldhu	r2,12(r16)
    4a14:	80c010c4 	addi	r3,r16,67
    4a18:	04810004 	movi	r18,1024
    4a1c:	10800054 	ori	r2,r2,1
    4a20:	8080030d 	sth	r2,12(r16)
    4a24:	00800044 	movi	r2,1
    4a28:	80c00415 	stw	r3,16(r16)
    4a2c:	80800515 	stw	r2,20(r16)
    4a30:	80c00015 	stw	r3,0(r16)
    4a34:	003fd506 	br	498c <__smakebuf_r+0x90>
    4a38:	80c00a17 	ldw	r3,40(r16)
    4a3c:	00800034 	movhi	r2,0
    4a40:	1092cc04 	addi	r2,r2,19248
    4a44:	18bfcb1e 	bne	r3,r2,4974 <__smakebuf_r+0x78>
    4a48:	8080030b 	ldhu	r2,12(r16)
    4a4c:	00c10004 	movi	r3,1024
    4a50:	1825883a 	mov	r18,r3
    4a54:	10c4b03a 	or	r2,r2,r3
    4a58:	8080030d 	sth	r2,12(r16)
    4a5c:	80c01315 	stw	r3,76(r16)
    4a60:	003fca06 	br	498c <__smakebuf_r+0x90>
    4a64:	8100030b 	ldhu	r4,12(r16)
    4a68:	2080800c 	andi	r2,r4,512
    4a6c:	103fb21e 	bne	r2,zero,4938 <__smakebuf_r+0x3c>
    4a70:	80c010c4 	addi	r3,r16,67
    4a74:	21000094 	ori	r4,r4,2
    4a78:	00800044 	movi	r2,1
    4a7c:	80800515 	stw	r2,20(r16)
    4a80:	8100030d 	sth	r4,12(r16)
    4a84:	80c00415 	stw	r3,16(r16)
    4a88:	80c00015 	stw	r3,0(r16)
    4a8c:	003faa06 	br	4938 <__smakebuf_r+0x3c>

00004a90 <memset>:
    4a90:	008000c4 	movi	r2,3
    4a94:	29403fcc 	andi	r5,r5,255
    4a98:	2007883a 	mov	r3,r4
    4a9c:	1180022e 	bgeu	r2,r6,4aa8 <memset+0x18>
    4aa0:	2084703a 	and	r2,r4,r2
    4aa4:	10000826 	beq	r2,zero,4ac8 <memset+0x38>
    4aa8:	30000526 	beq	r6,zero,4ac0 <memset+0x30>
    4aac:	2805883a 	mov	r2,r5
    4ab0:	30cd883a 	add	r6,r6,r3
    4ab4:	18800005 	stb	r2,0(r3)
    4ab8:	18c00044 	addi	r3,r3,1
    4abc:	19bffd1e 	bne	r3,r6,4ab4 <memset+0x24>
    4ac0:	2005883a 	mov	r2,r4
    4ac4:	f800283a 	ret
    4ac8:	2804923a 	slli	r2,r5,8
    4acc:	020003c4 	movi	r8,15
    4ad0:	200f883a 	mov	r7,r4
    4ad4:	2884b03a 	or	r2,r5,r2
    4ad8:	1006943a 	slli	r3,r2,16
    4adc:	10c6b03a 	or	r3,r2,r3
    4ae0:	41800a2e 	bgeu	r8,r6,4b0c <memset+0x7c>
    4ae4:	4005883a 	mov	r2,r8
    4ae8:	31bffc04 	addi	r6,r6,-16
    4aec:	38c00015 	stw	r3,0(r7)
    4af0:	38c00115 	stw	r3,4(r7)
    4af4:	38c00215 	stw	r3,8(r7)
    4af8:	38c00315 	stw	r3,12(r7)
    4afc:	39c00404 	addi	r7,r7,16
    4b00:	11bff936 	bltu	r2,r6,4ae8 <memset+0x58>
    4b04:	008000c4 	movi	r2,3
    4b08:	1180052e 	bgeu	r2,r6,4b20 <memset+0x90>
    4b0c:	31bfff04 	addi	r6,r6,-4
    4b10:	008000c4 	movi	r2,3
    4b14:	38c00015 	stw	r3,0(r7)
    4b18:	39c00104 	addi	r7,r7,4
    4b1c:	11bffb36 	bltu	r2,r6,4b0c <memset+0x7c>
    4b20:	3807883a 	mov	r3,r7
    4b24:	003fe006 	br	4aa8 <memset+0x18>

00004b28 <__sclose>:
    4b28:	2940038f 	ldh	r5,14(r5)
    4b2c:	0004cec1 	jmpi	4cec <_close_r>

00004b30 <__sseek>:
    4b30:	defffe04 	addi	sp,sp,-8
    4b34:	dc000015 	stw	r16,0(sp)
    4b38:	2821883a 	mov	r16,r5
    4b3c:	2940038f 	ldh	r5,14(r5)
    4b40:	dfc00115 	stw	ra,4(sp)
    4b44:	0004f640 	call	4f64 <_lseek_r>
    4b48:	1007883a 	mov	r3,r2
    4b4c:	00bfffc4 	movi	r2,-1
    4b50:	18800926 	beq	r3,r2,4b78 <__sseek+0x48>
    4b54:	8080030b 	ldhu	r2,12(r16)
    4b58:	80c01415 	stw	r3,80(r16)
    4b5c:	10840014 	ori	r2,r2,4096
    4b60:	8080030d 	sth	r2,12(r16)
    4b64:	1805883a 	mov	r2,r3
    4b68:	dfc00117 	ldw	ra,4(sp)
    4b6c:	dc000017 	ldw	r16,0(sp)
    4b70:	dec00204 	addi	sp,sp,8
    4b74:	f800283a 	ret
    4b78:	8080030b 	ldhu	r2,12(r16)
    4b7c:	10bbffcc 	andi	r2,r2,61439
    4b80:	8080030d 	sth	r2,12(r16)
    4b84:	1805883a 	mov	r2,r3
    4b88:	dfc00117 	ldw	ra,4(sp)
    4b8c:	dc000017 	ldw	r16,0(sp)
    4b90:	dec00204 	addi	sp,sp,8
    4b94:	f800283a 	ret

00004b98 <__swrite>:
    4b98:	2880030b 	ldhu	r2,12(r5)
    4b9c:	defffb04 	addi	sp,sp,-20
    4ba0:	dcc00315 	stw	r19,12(sp)
    4ba4:	1080400c 	andi	r2,r2,256
    4ba8:	dc800215 	stw	r18,8(sp)
    4bac:	dc400115 	stw	r17,4(sp)
    4bb0:	dc000015 	stw	r16,0(sp)
    4bb4:	3027883a 	mov	r19,r6
    4bb8:	3825883a 	mov	r18,r7
    4bbc:	dfc00415 	stw	ra,16(sp)
    4bc0:	2821883a 	mov	r16,r5
    4bc4:	000d883a 	mov	r6,zero
    4bc8:	01c00084 	movi	r7,2
    4bcc:	2023883a 	mov	r17,r4
    4bd0:	10000226 	beq	r2,zero,4bdc <__swrite+0x44>
    4bd4:	2940038f 	ldh	r5,14(r5)
    4bd8:	0004f640 	call	4f64 <_lseek_r>
    4bdc:	8080030b 	ldhu	r2,12(r16)
    4be0:	8140038f 	ldh	r5,14(r16)
    4be4:	8809883a 	mov	r4,r17
    4be8:	10bbffcc 	andi	r2,r2,61439
    4bec:	980d883a 	mov	r6,r19
    4bf0:	900f883a 	mov	r7,r18
    4bf4:	8080030d 	sth	r2,12(r16)
    4bf8:	dfc00417 	ldw	ra,16(sp)
    4bfc:	dcc00317 	ldw	r19,12(sp)
    4c00:	dc800217 	ldw	r18,8(sp)
    4c04:	dc400117 	ldw	r17,4(sp)
    4c08:	dc000017 	ldw	r16,0(sp)
    4c0c:	dec00504 	addi	sp,sp,20
    4c10:	0004c741 	jmpi	4c74 <_write_r>

00004c14 <__sread>:
    4c14:	defffe04 	addi	sp,sp,-8
    4c18:	dc000015 	stw	r16,0(sp)
    4c1c:	2821883a 	mov	r16,r5
    4c20:	2940038f 	ldh	r5,14(r5)
    4c24:	dfc00115 	stw	ra,4(sp)
    4c28:	0004fdc0 	call	4fdc <_read_r>
    4c2c:	1007883a 	mov	r3,r2
    4c30:	10000816 	blt	r2,zero,4c54 <__sread+0x40>
    4c34:	80801417 	ldw	r2,80(r16)
    4c38:	10c5883a 	add	r2,r2,r3
    4c3c:	80801415 	stw	r2,80(r16)
    4c40:	1805883a 	mov	r2,r3
    4c44:	dfc00117 	ldw	ra,4(sp)
    4c48:	dc000017 	ldw	r16,0(sp)
    4c4c:	dec00204 	addi	sp,sp,8
    4c50:	f800283a 	ret
    4c54:	8080030b 	ldhu	r2,12(r16)
    4c58:	10bbffcc 	andi	r2,r2,61439
    4c5c:	8080030d 	sth	r2,12(r16)
    4c60:	1805883a 	mov	r2,r3
    4c64:	dfc00117 	ldw	ra,4(sp)
    4c68:	dc000017 	ldw	r16,0(sp)
    4c6c:	dec00204 	addi	sp,sp,8
    4c70:	f800283a 	ret

00004c74 <_write_r>:
    4c74:	defffd04 	addi	sp,sp,-12
    4c78:	dc000015 	stw	r16,0(sp)
    4c7c:	04000074 	movhi	r16,1
    4c80:	84234b04 	addi	r16,r16,-29396
    4c84:	dc400115 	stw	r17,4(sp)
    4c88:	80000015 	stw	zero,0(r16)
    4c8c:	2023883a 	mov	r17,r4
    4c90:	2809883a 	mov	r4,r5
    4c94:	300b883a 	mov	r5,r6
    4c98:	380d883a 	mov	r6,r7
    4c9c:	dfc00215 	stw	ra,8(sp)
    4ca0:	00055e80 	call	55e8 <write>
    4ca4:	1007883a 	mov	r3,r2
    4ca8:	00bfffc4 	movi	r2,-1
    4cac:	18800626 	beq	r3,r2,4cc8 <_write_r+0x54>
    4cb0:	1805883a 	mov	r2,r3
    4cb4:	dfc00217 	ldw	ra,8(sp)
    4cb8:	dc400117 	ldw	r17,4(sp)
    4cbc:	dc000017 	ldw	r16,0(sp)
    4cc0:	dec00304 	addi	sp,sp,12
    4cc4:	f800283a 	ret
    4cc8:	80800017 	ldw	r2,0(r16)
    4ccc:	103ff826 	beq	r2,zero,4cb0 <_write_r+0x3c>
    4cd0:	88800015 	stw	r2,0(r17)
    4cd4:	1805883a 	mov	r2,r3
    4cd8:	dfc00217 	ldw	ra,8(sp)
    4cdc:	dc400117 	ldw	r17,4(sp)
    4ce0:	dc000017 	ldw	r16,0(sp)
    4ce4:	dec00304 	addi	sp,sp,12
    4ce8:	f800283a 	ret

00004cec <_close_r>:
    4cec:	defffd04 	addi	sp,sp,-12
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	04000074 	movhi	r16,1
    4cf8:	84234b04 	addi	r16,r16,-29396
    4cfc:	dc400115 	stw	r17,4(sp)
    4d00:	80000015 	stw	zero,0(r16)
    4d04:	2023883a 	mov	r17,r4
    4d08:	2809883a 	mov	r4,r5
    4d0c:	dfc00215 	stw	ra,8(sp)
    4d10:	0002b6c0 	call	2b6c <close>
    4d14:	1007883a 	mov	r3,r2
    4d18:	00bfffc4 	movi	r2,-1
    4d1c:	18800626 	beq	r3,r2,4d38 <_close_r+0x4c>
    4d20:	1805883a 	mov	r2,r3
    4d24:	dfc00217 	ldw	ra,8(sp)
    4d28:	dc400117 	ldw	r17,4(sp)
    4d2c:	dc000017 	ldw	r16,0(sp)
    4d30:	dec00304 	addi	sp,sp,12
    4d34:	f800283a 	ret
    4d38:	80800017 	ldw	r2,0(r16)
    4d3c:	103ff826 	beq	r2,zero,4d20 <_close_r+0x34>
    4d40:	88800015 	stw	r2,0(r17)
    4d44:	1805883a 	mov	r2,r3
    4d48:	dfc00217 	ldw	ra,8(sp)
    4d4c:	dc400117 	ldw	r17,4(sp)
    4d50:	dc000017 	ldw	r16,0(sp)
    4d54:	dec00304 	addi	sp,sp,12
    4d58:	f800283a 	ret

00004d5c <_fclose_r>:
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	dc400115 	stw	r17,4(sp)
    4d64:	dc000015 	stw	r16,0(sp)
    4d68:	dfc00315 	stw	ra,12(sp)
    4d6c:	dc800215 	stw	r18,8(sp)
    4d70:	2821883a 	mov	r16,r5
    4d74:	2023883a 	mov	r17,r4
    4d78:	28002926 	beq	r5,zero,4e20 <_fclose_r+0xc4>
    4d7c:	00044e00 	call	44e0 <__sfp_lock_acquire>
    4d80:	88000226 	beq	r17,zero,4d8c <_fclose_r+0x30>
    4d84:	88800e17 	ldw	r2,56(r17)
    4d88:	10002d26 	beq	r2,zero,4e40 <_fclose_r+0xe4>
    4d8c:	8080030f 	ldh	r2,12(r16)
    4d90:	10002226 	beq	r2,zero,4e1c <_fclose_r+0xc0>
    4d94:	8809883a 	mov	r4,r17
    4d98:	800b883a 	mov	r5,r16
    4d9c:	00042580 	call	4258 <_fflush_r>
    4da0:	1025883a 	mov	r18,r2
    4da4:	80800b17 	ldw	r2,44(r16)
    4da8:	10000426 	beq	r2,zero,4dbc <_fclose_r+0x60>
    4dac:	81400717 	ldw	r5,28(r16)
    4db0:	8809883a 	mov	r4,r17
    4db4:	103ee83a 	callr	r2
    4db8:	10002a16 	blt	r2,zero,4e64 <_fclose_r+0x108>
    4dbc:	8080030b 	ldhu	r2,12(r16)
    4dc0:	1080200c 	andi	r2,r2,128
    4dc4:	1000231e 	bne	r2,zero,4e54 <_fclose_r+0xf8>
    4dc8:	81400c17 	ldw	r5,48(r16)
    4dcc:	28000526 	beq	r5,zero,4de4 <_fclose_r+0x88>
    4dd0:	80801004 	addi	r2,r16,64
    4dd4:	28800226 	beq	r5,r2,4de0 <_fclose_r+0x84>
    4dd8:	8809883a 	mov	r4,r17
    4ddc:	00014000 	call	1400 <_free_r>
    4de0:	80000c15 	stw	zero,48(r16)
    4de4:	81401117 	ldw	r5,68(r16)
    4de8:	28000326 	beq	r5,zero,4df8 <_fclose_r+0x9c>
    4dec:	8809883a 	mov	r4,r17
    4df0:	00014000 	call	1400 <_free_r>
    4df4:	80001115 	stw	zero,68(r16)
    4df8:	8000030d 	sth	zero,12(r16)
    4dfc:	00044e40 	call	44e4 <__sfp_lock_release>
    4e00:	9005883a 	mov	r2,r18
    4e04:	dfc00317 	ldw	ra,12(sp)
    4e08:	dc800217 	ldw	r18,8(sp)
    4e0c:	dc400117 	ldw	r17,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00404 	addi	sp,sp,16
    4e18:	f800283a 	ret
    4e1c:	00044e40 	call	44e4 <__sfp_lock_release>
    4e20:	0025883a 	mov	r18,zero
    4e24:	9005883a 	mov	r2,r18
    4e28:	dfc00317 	ldw	ra,12(sp)
    4e2c:	dc800217 	ldw	r18,8(sp)
    4e30:	dc400117 	ldw	r17,4(sp)
    4e34:	dc000017 	ldw	r16,0(sp)
    4e38:	dec00404 	addi	sp,sp,16
    4e3c:	f800283a 	ret
    4e40:	8809883a 	mov	r4,r17
    4e44:	00044f00 	call	44f0 <__sinit>
    4e48:	8080030f 	ldh	r2,12(r16)
    4e4c:	103fd11e 	bne	r2,zero,4d94 <_fclose_r+0x38>
    4e50:	003ff206 	br	4e1c <_fclose_r+0xc0>
    4e54:	81400417 	ldw	r5,16(r16)
    4e58:	8809883a 	mov	r4,r17
    4e5c:	00014000 	call	1400 <_free_r>
    4e60:	003fd906 	br	4dc8 <_fclose_r+0x6c>
    4e64:	04bfffc4 	movi	r18,-1
    4e68:	003fd406 	br	4dbc <_fclose_r+0x60>

00004e6c <fclose>:
    4e6c:	00800034 	movhi	r2,0
    4e70:	109ca704 	addi	r2,r2,29340
    4e74:	200b883a 	mov	r5,r4
    4e78:	11000017 	ldw	r4,0(r2)
    4e7c:	0004d5c1 	jmpi	4d5c <_fclose_r>

00004e80 <_fstat_r>:
    4e80:	defffd04 	addi	sp,sp,-12
    4e84:	dc000015 	stw	r16,0(sp)
    4e88:	04000074 	movhi	r16,1
    4e8c:	84234b04 	addi	r16,r16,-29396
    4e90:	dc400115 	stw	r17,4(sp)
    4e94:	80000015 	stw	zero,0(r16)
    4e98:	2023883a 	mov	r17,r4
    4e9c:	2809883a 	mov	r4,r5
    4ea0:	300b883a 	mov	r5,r6
    4ea4:	dfc00215 	stw	ra,8(sp)
    4ea8:	00050b40 	call	50b4 <fstat>
    4eac:	1007883a 	mov	r3,r2
    4eb0:	00bfffc4 	movi	r2,-1
    4eb4:	18800626 	beq	r3,r2,4ed0 <_fstat_r+0x50>
    4eb8:	1805883a 	mov	r2,r3
    4ebc:	dfc00217 	ldw	ra,8(sp)
    4ec0:	dc400117 	ldw	r17,4(sp)
    4ec4:	dc000017 	ldw	r16,0(sp)
    4ec8:	dec00304 	addi	sp,sp,12
    4ecc:	f800283a 	ret
    4ed0:	80800017 	ldw	r2,0(r16)
    4ed4:	103ff826 	beq	r2,zero,4eb8 <_fstat_r+0x38>
    4ed8:	88800015 	stw	r2,0(r17)
    4edc:	1805883a 	mov	r2,r3
    4ee0:	dfc00217 	ldw	ra,8(sp)
    4ee4:	dc400117 	ldw	r17,4(sp)
    4ee8:	dc000017 	ldw	r16,0(sp)
    4eec:	dec00304 	addi	sp,sp,12
    4ef0:	f800283a 	ret

00004ef4 <_isatty_r>:
    4ef4:	defffd04 	addi	sp,sp,-12
    4ef8:	dc000015 	stw	r16,0(sp)
    4efc:	04000074 	movhi	r16,1
    4f00:	84234b04 	addi	r16,r16,-29396
    4f04:	dc400115 	stw	r17,4(sp)
    4f08:	80000015 	stw	zero,0(r16)
    4f0c:	2023883a 	mov	r17,r4
    4f10:	2809883a 	mov	r4,r5
    4f14:	dfc00215 	stw	ra,8(sp)
    4f18:	00051ec0 	call	51ec <isatty>
    4f1c:	1007883a 	mov	r3,r2
    4f20:	00bfffc4 	movi	r2,-1
    4f24:	18800626 	beq	r3,r2,4f40 <_isatty_r+0x4c>
    4f28:	1805883a 	mov	r2,r3
    4f2c:	dfc00217 	ldw	ra,8(sp)
    4f30:	dc400117 	ldw	r17,4(sp)
    4f34:	dc000017 	ldw	r16,0(sp)
    4f38:	dec00304 	addi	sp,sp,12
    4f3c:	f800283a 	ret
    4f40:	80800017 	ldw	r2,0(r16)
    4f44:	103ff826 	beq	r2,zero,4f28 <_isatty_r+0x34>
    4f48:	88800015 	stw	r2,0(r17)
    4f4c:	1805883a 	mov	r2,r3
    4f50:	dfc00217 	ldw	ra,8(sp)
    4f54:	dc400117 	ldw	r17,4(sp)
    4f58:	dc000017 	ldw	r16,0(sp)
    4f5c:	dec00304 	addi	sp,sp,12
    4f60:	f800283a 	ret

00004f64 <_lseek_r>:
    4f64:	defffd04 	addi	sp,sp,-12
    4f68:	dc000015 	stw	r16,0(sp)
    4f6c:	04000074 	movhi	r16,1
    4f70:	84234b04 	addi	r16,r16,-29396
    4f74:	dc400115 	stw	r17,4(sp)
    4f78:	80000015 	stw	zero,0(r16)
    4f7c:	2023883a 	mov	r17,r4
    4f80:	2809883a 	mov	r4,r5
    4f84:	300b883a 	mov	r5,r6
    4f88:	380d883a 	mov	r6,r7
    4f8c:	dfc00215 	stw	ra,8(sp)
    4f90:	00053100 	call	5310 <lseek>
    4f94:	1007883a 	mov	r3,r2
    4f98:	00bfffc4 	movi	r2,-1
    4f9c:	18800626 	beq	r3,r2,4fb8 <_lseek_r+0x54>
    4fa0:	1805883a 	mov	r2,r3
    4fa4:	dfc00217 	ldw	ra,8(sp)
    4fa8:	dc400117 	ldw	r17,4(sp)
    4fac:	dc000017 	ldw	r16,0(sp)
    4fb0:	dec00304 	addi	sp,sp,12
    4fb4:	f800283a 	ret
    4fb8:	80800017 	ldw	r2,0(r16)
    4fbc:	103ff826 	beq	r2,zero,4fa0 <_lseek_r+0x3c>
    4fc0:	88800015 	stw	r2,0(r17)
    4fc4:	1805883a 	mov	r2,r3
    4fc8:	dfc00217 	ldw	ra,8(sp)
    4fcc:	dc400117 	ldw	r17,4(sp)
    4fd0:	dc000017 	ldw	r16,0(sp)
    4fd4:	dec00304 	addi	sp,sp,12
    4fd8:	f800283a 	ret

00004fdc <_read_r>:
    4fdc:	defffd04 	addi	sp,sp,-12
    4fe0:	dc000015 	stw	r16,0(sp)
    4fe4:	04000074 	movhi	r16,1
    4fe8:	84234b04 	addi	r16,r16,-29396
    4fec:	dc400115 	stw	r17,4(sp)
    4ff0:	80000015 	stw	zero,0(r16)
    4ff4:	2023883a 	mov	r17,r4
    4ff8:	2809883a 	mov	r4,r5
    4ffc:	300b883a 	mov	r5,r6
    5000:	380d883a 	mov	r6,r7
    5004:	dfc00215 	stw	ra,8(sp)
    5008:	00054640 	call	5464 <read>
    500c:	1007883a 	mov	r3,r2
    5010:	00bfffc4 	movi	r2,-1
    5014:	18800626 	beq	r3,r2,5030 <_read_r+0x54>
    5018:	1805883a 	mov	r2,r3
    501c:	dfc00217 	ldw	ra,8(sp)
    5020:	dc400117 	ldw	r17,4(sp)
    5024:	dc000017 	ldw	r16,0(sp)
    5028:	dec00304 	addi	sp,sp,12
    502c:	f800283a 	ret
    5030:	80800017 	ldw	r2,0(r16)
    5034:	103ff826 	beq	r2,zero,5018 <_read_r+0x3c>
    5038:	88800015 	stw	r2,0(r17)
    503c:	1805883a 	mov	r2,r3
    5040:	dfc00217 	ldw	ra,8(sp)
    5044:	dc400117 	ldw	r17,4(sp)
    5048:	dc000017 	ldw	r16,0(sp)
    504c:	dec00304 	addi	sp,sp,12
    5050:	f800283a 	ret

00005054 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    5054:	defffd04 	addi	sp,sp,-12
    5058:	df000215 	stw	fp,8(sp)
    505c:	df000204 	addi	fp,sp,8
    5060:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    5064:	e0bfff17 	ldw	r2,-4(fp)
    5068:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	1005003a 	cmpeq	r2,r2,zero
    5074:	1000021e 	bne	r2,zero,5080 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    5078:	002af070 	cmpltui	zero,zero,43969
    507c:	00000106 	br	5084 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    5080:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    5084:	e037883a 	mov	sp,fp
    5088:	df000017 	ldw	fp,0(sp)
    508c:	dec00104 	addi	sp,sp,4
    5090:	f800283a 	ret

00005094 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5094:	defffd04 	addi	sp,sp,-12
    5098:	dfc00215 	stw	ra,8(sp)
    509c:	df000115 	stw	fp,4(sp)
    50a0:	df000104 	addi	fp,sp,4
    50a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    50a8:	e13fff17 	ldw	r4,-4(fp)
    50ac:	00050540 	call	5054 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    50b0:	003fff06 	br	50b0 <_exit+0x1c>

000050b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    50b4:	defff904 	addi	sp,sp,-28
    50b8:	dfc00615 	stw	ra,24(sp)
    50bc:	df000515 	stw	fp,20(sp)
    50c0:	df000504 	addi	fp,sp,20
    50c4:	e13ffc15 	stw	r4,-16(fp)
    50c8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    50cc:	e0bffc17 	ldw	r2,-16(fp)
    50d0:	1004803a 	cmplt	r2,r2,zero
    50d4:	1000091e 	bne	r2,zero,50fc <fstat+0x48>
    50d8:	e13ffc17 	ldw	r4,-16(fp)
    50dc:	01400304 	movi	r5,12
    50e0:	0000ac40 	call	ac4 <__mulsi3>
    50e4:	1007883a 	mov	r3,r2
    50e8:	00800034 	movhi	r2,0
    50ec:	109c4504 	addi	r2,r2,28948
    50f0:	1887883a 	add	r3,r3,r2
    50f4:	e0ffff15 	stw	r3,-4(fp)
    50f8:	00000106 	br	5100 <fstat+0x4c>
    50fc:	e03fff15 	stw	zero,-4(fp)
    5100:	e0bfff17 	ldw	r2,-4(fp)
    5104:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5108:	e0bffb17 	ldw	r2,-20(fp)
    510c:	1005003a 	cmpeq	r2,r2,zero
    5110:	1000121e 	bne	r2,zero,515c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5114:	e0bffb17 	ldw	r2,-20(fp)
    5118:	10800017 	ldw	r2,0(r2)
    511c:	10800817 	ldw	r2,32(r2)
    5120:	1005003a 	cmpeq	r2,r2,zero
    5124:	1000081e 	bne	r2,zero,5148 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    5128:	e0bffb17 	ldw	r2,-20(fp)
    512c:	10800017 	ldw	r2,0(r2)
    5130:	10800817 	ldw	r2,32(r2)
    5134:	e13ffb17 	ldw	r4,-20(fp)
    5138:	e17ffd17 	ldw	r5,-12(fp)
    513c:	103ee83a 	callr	r2
    5140:	e0bffe15 	stw	r2,-8(fp)
    5144:	00000b06 	br	5174 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5148:	e0fffd17 	ldw	r3,-12(fp)
    514c:	00880004 	movi	r2,8192
    5150:	18800115 	stw	r2,4(r3)
      return 0;
    5154:	e03ffe15 	stw	zero,-8(fp)
    5158:	00000606 	br	5174 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    515c:	000518c0 	call	518c <alt_get_errno>
    5160:	1007883a 	mov	r3,r2
    5164:	00801444 	movi	r2,81
    5168:	18800015 	stw	r2,0(r3)
    return -1;
    516c:	00bfffc4 	movi	r2,-1
    5170:	e0bffe15 	stw	r2,-8(fp)
    5174:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    5178:	e037883a 	mov	sp,fp
    517c:	dfc00117 	ldw	ra,4(sp)
    5180:	df000017 	ldw	fp,0(sp)
    5184:	dec00204 	addi	sp,sp,8
    5188:	f800283a 	ret

0000518c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    518c:	defffd04 	addi	sp,sp,-12
    5190:	dfc00215 	stw	ra,8(sp)
    5194:	df000115 	stw	fp,4(sp)
    5198:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    519c:	00800034 	movhi	r2,0
    51a0:	109cb104 	addi	r2,r2,29380
    51a4:	10800017 	ldw	r2,0(r2)
    51a8:	1005003a 	cmpeq	r2,r2,zero
    51ac:	1000061e 	bne	r2,zero,51c8 <alt_get_errno+0x3c>
    51b0:	00800034 	movhi	r2,0
    51b4:	109cb104 	addi	r2,r2,29380
    51b8:	10800017 	ldw	r2,0(r2)
    51bc:	103ee83a 	callr	r2
    51c0:	e0bfff15 	stw	r2,-4(fp)
    51c4:	00000306 	br	51d4 <alt_get_errno+0x48>
    51c8:	00800074 	movhi	r2,1
    51cc:	10a34b04 	addi	r2,r2,-29396
    51d0:	e0bfff15 	stw	r2,-4(fp)
    51d4:	e0bfff17 	ldw	r2,-4(fp)
}
    51d8:	e037883a 	mov	sp,fp
    51dc:	dfc00117 	ldw	ra,4(sp)
    51e0:	df000017 	ldw	fp,0(sp)
    51e4:	dec00204 	addi	sp,sp,8
    51e8:	f800283a 	ret

000051ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    51ec:	deffeb04 	addi	sp,sp,-84
    51f0:	dfc01415 	stw	ra,80(sp)
    51f4:	df001315 	stw	fp,76(sp)
    51f8:	df001304 	addi	fp,sp,76
    51fc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5200:	e0bffd17 	ldw	r2,-12(fp)
    5204:	1004803a 	cmplt	r2,r2,zero
    5208:	1000091e 	bne	r2,zero,5230 <isatty+0x44>
    520c:	e13ffd17 	ldw	r4,-12(fp)
    5210:	01400304 	movi	r5,12
    5214:	0000ac40 	call	ac4 <__mulsi3>
    5218:	1007883a 	mov	r3,r2
    521c:	00800034 	movhi	r2,0
    5220:	109c4504 	addi	r2,r2,28948
    5224:	1887883a 	add	r3,r3,r2
    5228:	e0ffff15 	stw	r3,-4(fp)
    522c:	00000106 	br	5234 <isatty+0x48>
    5230:	e03fff15 	stw	zero,-4(fp)
    5234:	e0bfff17 	ldw	r2,-4(fp)
    5238:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    523c:	e0bfed17 	ldw	r2,-76(fp)
    5240:	1005003a 	cmpeq	r2,r2,zero
    5244:	10000f1e 	bne	r2,zero,5284 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5248:	e0bfed17 	ldw	r2,-76(fp)
    524c:	10800017 	ldw	r2,0(r2)
    5250:	10800817 	ldw	r2,32(r2)
    5254:	1004c03a 	cmpne	r2,r2,zero
    5258:	1000031e 	bne	r2,zero,5268 <isatty+0x7c>
    {
      return 1;
    525c:	00800044 	movi	r2,1
    5260:	e0bffe15 	stw	r2,-8(fp)
    5264:	00000c06 	br	5298 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5268:	e17fee04 	addi	r5,fp,-72
    526c:	e13ffd17 	ldw	r4,-12(fp)
    5270:	00050b40 	call	50b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5274:	e0bfef17 	ldw	r2,-68(fp)
    5278:	10880020 	cmpeqi	r2,r2,8192
    527c:	e0bffe15 	stw	r2,-8(fp)
    5280:	00000506 	br	5298 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5284:	00052b00 	call	52b0 <alt_get_errno>
    5288:	1007883a 	mov	r3,r2
    528c:	00801444 	movi	r2,81
    5290:	18800015 	stw	r2,0(r3)
    return 0;
    5294:	e03ffe15 	stw	zero,-8(fp)
    5298:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    529c:	e037883a 	mov	sp,fp
    52a0:	dfc00117 	ldw	ra,4(sp)
    52a4:	df000017 	ldw	fp,0(sp)
    52a8:	dec00204 	addi	sp,sp,8
    52ac:	f800283a 	ret

000052b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    52b0:	defffd04 	addi	sp,sp,-12
    52b4:	dfc00215 	stw	ra,8(sp)
    52b8:	df000115 	stw	fp,4(sp)
    52bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    52c0:	00800034 	movhi	r2,0
    52c4:	109cb104 	addi	r2,r2,29380
    52c8:	10800017 	ldw	r2,0(r2)
    52cc:	1005003a 	cmpeq	r2,r2,zero
    52d0:	1000061e 	bne	r2,zero,52ec <alt_get_errno+0x3c>
    52d4:	00800034 	movhi	r2,0
    52d8:	109cb104 	addi	r2,r2,29380
    52dc:	10800017 	ldw	r2,0(r2)
    52e0:	103ee83a 	callr	r2
    52e4:	e0bfff15 	stw	r2,-4(fp)
    52e8:	00000306 	br	52f8 <alt_get_errno+0x48>
    52ec:	00800074 	movhi	r2,1
    52f0:	10a34b04 	addi	r2,r2,-29396
    52f4:	e0bfff15 	stw	r2,-4(fp)
    52f8:	e0bfff17 	ldw	r2,-4(fp)
}
    52fc:	e037883a 	mov	sp,fp
    5300:	dfc00117 	ldw	ra,4(sp)
    5304:	df000017 	ldw	fp,0(sp)
    5308:	dec00204 	addi	sp,sp,8
    530c:	f800283a 	ret

00005310 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5310:	defff804 	addi	sp,sp,-32
    5314:	dfc00715 	stw	ra,28(sp)
    5318:	df000615 	stw	fp,24(sp)
    531c:	df000604 	addi	fp,sp,24
    5320:	e13ffc15 	stw	r4,-16(fp)
    5324:	e17ffd15 	stw	r5,-12(fp)
    5328:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    532c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5330:	e0bffc17 	ldw	r2,-16(fp)
    5334:	1004803a 	cmplt	r2,r2,zero
    5338:	1000091e 	bne	r2,zero,5360 <lseek+0x50>
    533c:	e13ffc17 	ldw	r4,-16(fp)
    5340:	01400304 	movi	r5,12
    5344:	0000ac40 	call	ac4 <__mulsi3>
    5348:	1007883a 	mov	r3,r2
    534c:	00800034 	movhi	r2,0
    5350:	109c4504 	addi	r2,r2,28948
    5354:	1887883a 	add	r3,r3,r2
    5358:	e0ffff15 	stw	r3,-4(fp)
    535c:	00000106 	br	5364 <lseek+0x54>
    5360:	e03fff15 	stw	zero,-4(fp)
    5364:	e0bfff17 	ldw	r2,-4(fp)
    5368:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    536c:	e0bffb17 	ldw	r2,-20(fp)
    5370:	1005003a 	cmpeq	r2,r2,zero
    5374:	1000111e 	bne	r2,zero,53bc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5378:	e0bffb17 	ldw	r2,-20(fp)
    537c:	10800017 	ldw	r2,0(r2)
    5380:	10800717 	ldw	r2,28(r2)
    5384:	1005003a 	cmpeq	r2,r2,zero
    5388:	1000091e 	bne	r2,zero,53b0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    538c:	e0bffb17 	ldw	r2,-20(fp)
    5390:	10800017 	ldw	r2,0(r2)
    5394:	10800717 	ldw	r2,28(r2)
    5398:	e13ffb17 	ldw	r4,-20(fp)
    539c:	e17ffd17 	ldw	r5,-12(fp)
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	103ee83a 	callr	r2
    53a8:	e0bffa15 	stw	r2,-24(fp)
    53ac:	00000506 	br	53c4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    53b0:	00bfde84 	movi	r2,-134
    53b4:	e0bffa15 	stw	r2,-24(fp)
    53b8:	00000206 	br	53c4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    53bc:	00bfebc4 	movi	r2,-81
    53c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    53c4:	e0bffa17 	ldw	r2,-24(fp)
    53c8:	1004403a 	cmpge	r2,r2,zero
    53cc:	1000071e 	bne	r2,zero,53ec <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    53d0:	00054040 	call	5404 <alt_get_errno>
    53d4:	1007883a 	mov	r3,r2
    53d8:	e0bffa17 	ldw	r2,-24(fp)
    53dc:	0085c83a 	sub	r2,zero,r2
    53e0:	18800015 	stw	r2,0(r3)
    rc = -1;
    53e4:	00bfffc4 	movi	r2,-1
    53e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    53ec:	e0bffa17 	ldw	r2,-24(fp)
}
    53f0:	e037883a 	mov	sp,fp
    53f4:	dfc00117 	ldw	ra,4(sp)
    53f8:	df000017 	ldw	fp,0(sp)
    53fc:	dec00204 	addi	sp,sp,8
    5400:	f800283a 	ret

00005404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5404:	defffd04 	addi	sp,sp,-12
    5408:	dfc00215 	stw	ra,8(sp)
    540c:	df000115 	stw	fp,4(sp)
    5410:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5414:	00800034 	movhi	r2,0
    5418:	109cb104 	addi	r2,r2,29380
    541c:	10800017 	ldw	r2,0(r2)
    5420:	1005003a 	cmpeq	r2,r2,zero
    5424:	1000061e 	bne	r2,zero,5440 <alt_get_errno+0x3c>
    5428:	00800034 	movhi	r2,0
    542c:	109cb104 	addi	r2,r2,29380
    5430:	10800017 	ldw	r2,0(r2)
    5434:	103ee83a 	callr	r2
    5438:	e0bfff15 	stw	r2,-4(fp)
    543c:	00000306 	br	544c <alt_get_errno+0x48>
    5440:	00800074 	movhi	r2,1
    5444:	10a34b04 	addi	r2,r2,-29396
    5448:	e0bfff15 	stw	r2,-4(fp)
    544c:	e0bfff17 	ldw	r2,-4(fp)
}
    5450:	e037883a 	mov	sp,fp
    5454:	dfc00117 	ldw	ra,4(sp)
    5458:	df000017 	ldw	fp,0(sp)
    545c:	dec00204 	addi	sp,sp,8
    5460:	f800283a 	ret

00005464 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5464:	defff704 	addi	sp,sp,-36
    5468:	dfc00815 	stw	ra,32(sp)
    546c:	df000715 	stw	fp,28(sp)
    5470:	df000704 	addi	fp,sp,28
    5474:	e13ffb15 	stw	r4,-20(fp)
    5478:	e17ffc15 	stw	r5,-16(fp)
    547c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5480:	e0bffb17 	ldw	r2,-20(fp)
    5484:	1004803a 	cmplt	r2,r2,zero
    5488:	1000091e 	bne	r2,zero,54b0 <read+0x4c>
    548c:	e13ffb17 	ldw	r4,-20(fp)
    5490:	01400304 	movi	r5,12
    5494:	0000ac40 	call	ac4 <__mulsi3>
    5498:	1007883a 	mov	r3,r2
    549c:	00800034 	movhi	r2,0
    54a0:	109c4504 	addi	r2,r2,28948
    54a4:	1887883a 	add	r3,r3,r2
    54a8:	e0ffff15 	stw	r3,-4(fp)
    54ac:	00000106 	br	54b4 <read+0x50>
    54b0:	e03fff15 	stw	zero,-4(fp)
    54b4:	e0bfff17 	ldw	r2,-4(fp)
    54b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    54bc:	e0bffa17 	ldw	r2,-24(fp)
    54c0:	1005003a 	cmpeq	r2,r2,zero
    54c4:	1000241e 	bne	r2,zero,5558 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    54c8:	e0bffa17 	ldw	r2,-24(fp)
    54cc:	10800217 	ldw	r2,8(r2)
    54d0:	108000cc 	andi	r2,r2,3
    54d4:	10800060 	cmpeqi	r2,r2,1
    54d8:	10001a1e 	bne	r2,zero,5544 <read+0xe0>
    54dc:	e0bffa17 	ldw	r2,-24(fp)
    54e0:	10800017 	ldw	r2,0(r2)
    54e4:	10800517 	ldw	r2,20(r2)
    54e8:	1005003a 	cmpeq	r2,r2,zero
    54ec:	1000151e 	bne	r2,zero,5544 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    54f0:	e0bffa17 	ldw	r2,-24(fp)
    54f4:	10800017 	ldw	r2,0(r2)
    54f8:	10800517 	ldw	r2,20(r2)
    54fc:	e17ffc17 	ldw	r5,-16(fp)
    5500:	e1bffd17 	ldw	r6,-12(fp)
    5504:	e13ffa17 	ldw	r4,-24(fp)
    5508:	103ee83a 	callr	r2
    550c:	e0bff915 	stw	r2,-28(fp)
    5510:	e0bff917 	ldw	r2,-28(fp)
    5514:	1004403a 	cmpge	r2,r2,zero
    5518:	1000071e 	bne	r2,zero,5538 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    551c:	00055880 	call	5588 <alt_get_errno>
    5520:	e0fff917 	ldw	r3,-28(fp)
    5524:	00c7c83a 	sub	r3,zero,r3
    5528:	10c00015 	stw	r3,0(r2)
          return -1;
    552c:	00bfffc4 	movi	r2,-1
    5530:	e0bffe15 	stw	r2,-8(fp)
    5534:	00000e06 	br	5570 <read+0x10c>
        }
        return rval;
    5538:	e0bff917 	ldw	r2,-28(fp)
    553c:	e0bffe15 	stw	r2,-8(fp)
    5540:	00000b06 	br	5570 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5544:	00055880 	call	5588 <alt_get_errno>
    5548:	1007883a 	mov	r3,r2
    554c:	00800344 	movi	r2,13
    5550:	18800015 	stw	r2,0(r3)
    5554:	00000406 	br	5568 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5558:	00055880 	call	5588 <alt_get_errno>
    555c:	1007883a 	mov	r3,r2
    5560:	00801444 	movi	r2,81
    5564:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5568:	00bfffc4 	movi	r2,-1
    556c:	e0bffe15 	stw	r2,-8(fp)
    5570:	e0bffe17 	ldw	r2,-8(fp)
}
    5574:	e037883a 	mov	sp,fp
    5578:	dfc00117 	ldw	ra,4(sp)
    557c:	df000017 	ldw	fp,0(sp)
    5580:	dec00204 	addi	sp,sp,8
    5584:	f800283a 	ret

00005588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5588:	defffd04 	addi	sp,sp,-12
    558c:	dfc00215 	stw	ra,8(sp)
    5590:	df000115 	stw	fp,4(sp)
    5594:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5598:	00800034 	movhi	r2,0
    559c:	109cb104 	addi	r2,r2,29380
    55a0:	10800017 	ldw	r2,0(r2)
    55a4:	1005003a 	cmpeq	r2,r2,zero
    55a8:	1000061e 	bne	r2,zero,55c4 <alt_get_errno+0x3c>
    55ac:	00800034 	movhi	r2,0
    55b0:	109cb104 	addi	r2,r2,29380
    55b4:	10800017 	ldw	r2,0(r2)
    55b8:	103ee83a 	callr	r2
    55bc:	e0bfff15 	stw	r2,-4(fp)
    55c0:	00000306 	br	55d0 <alt_get_errno+0x48>
    55c4:	00800074 	movhi	r2,1
    55c8:	10a34b04 	addi	r2,r2,-29396
    55cc:	e0bfff15 	stw	r2,-4(fp)
    55d0:	e0bfff17 	ldw	r2,-4(fp)
}
    55d4:	e037883a 	mov	sp,fp
    55d8:	dfc00117 	ldw	ra,4(sp)
    55dc:	df000017 	ldw	fp,0(sp)
    55e0:	dec00204 	addi	sp,sp,8
    55e4:	f800283a 	ret

000055e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    55e8:	defff704 	addi	sp,sp,-36
    55ec:	dfc00815 	stw	ra,32(sp)
    55f0:	df000715 	stw	fp,28(sp)
    55f4:	df000704 	addi	fp,sp,28
    55f8:	e13ffb15 	stw	r4,-20(fp)
    55fc:	e17ffc15 	stw	r5,-16(fp)
    5600:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5604:	e0bffb17 	ldw	r2,-20(fp)
    5608:	1004803a 	cmplt	r2,r2,zero
    560c:	1000091e 	bne	r2,zero,5634 <write+0x4c>
    5610:	e13ffb17 	ldw	r4,-20(fp)
    5614:	01400304 	movi	r5,12
    5618:	0000ac40 	call	ac4 <__mulsi3>
    561c:	1007883a 	mov	r3,r2
    5620:	00800034 	movhi	r2,0
    5624:	109c4504 	addi	r2,r2,28948
    5628:	1887883a 	add	r3,r3,r2
    562c:	e0ffff15 	stw	r3,-4(fp)
    5630:	00000106 	br	5638 <write+0x50>
    5634:	e03fff15 	stw	zero,-4(fp)
    5638:	e0bfff17 	ldw	r2,-4(fp)
    563c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    5640:	e0bffa17 	ldw	r2,-24(fp)
    5644:	1005003a 	cmpeq	r2,r2,zero
    5648:	1000241e 	bne	r2,zero,56dc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    564c:	e0bffa17 	ldw	r2,-24(fp)
    5650:	10800217 	ldw	r2,8(r2)
    5654:	108000cc 	andi	r2,r2,3
    5658:	1005003a 	cmpeq	r2,r2,zero
    565c:	10001a1e 	bne	r2,zero,56c8 <write+0xe0>
    5660:	e0bffa17 	ldw	r2,-24(fp)
    5664:	10800017 	ldw	r2,0(r2)
    5668:	10800617 	ldw	r2,24(r2)
    566c:	1005003a 	cmpeq	r2,r2,zero
    5670:	1000151e 	bne	r2,zero,56c8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5674:	e0bffa17 	ldw	r2,-24(fp)
    5678:	10800017 	ldw	r2,0(r2)
    567c:	10800617 	ldw	r2,24(r2)
    5680:	e17ffc17 	ldw	r5,-16(fp)
    5684:	e1bffd17 	ldw	r6,-12(fp)
    5688:	e13ffa17 	ldw	r4,-24(fp)
    568c:	103ee83a 	callr	r2
    5690:	e0bff915 	stw	r2,-28(fp)
    5694:	e0bff917 	ldw	r2,-28(fp)
    5698:	1004403a 	cmpge	r2,r2,zero
    569c:	1000071e 	bne	r2,zero,56bc <write+0xd4>
      {
        ALT_ERRNO = -rval;
    56a0:	000570c0 	call	570c <alt_get_errno>
    56a4:	e0fff917 	ldw	r3,-28(fp)
    56a8:	00c7c83a 	sub	r3,zero,r3
    56ac:	10c00015 	stw	r3,0(r2)
        return -1;
    56b0:	00bfffc4 	movi	r2,-1
    56b4:	e0bffe15 	stw	r2,-8(fp)
    56b8:	00000e06 	br	56f4 <write+0x10c>
      }
      return rval;
    56bc:	e0bff917 	ldw	r2,-28(fp)
    56c0:	e0bffe15 	stw	r2,-8(fp)
    56c4:	00000b06 	br	56f4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    56c8:	000570c0 	call	570c <alt_get_errno>
    56cc:	1007883a 	mov	r3,r2
    56d0:	00800344 	movi	r2,13
    56d4:	18800015 	stw	r2,0(r3)
    56d8:	00000406 	br	56ec <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    56dc:	000570c0 	call	570c <alt_get_errno>
    56e0:	1007883a 	mov	r3,r2
    56e4:	00801444 	movi	r2,81
    56e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    56ec:	00bfffc4 	movi	r2,-1
    56f0:	e0bffe15 	stw	r2,-8(fp)
    56f4:	e0bffe17 	ldw	r2,-8(fp)
}
    56f8:	e037883a 	mov	sp,fp
    56fc:	dfc00117 	ldw	ra,4(sp)
    5700:	df000017 	ldw	fp,0(sp)
    5704:	dec00204 	addi	sp,sp,8
    5708:	f800283a 	ret

0000570c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    570c:	defffd04 	addi	sp,sp,-12
    5710:	dfc00215 	stw	ra,8(sp)
    5714:	df000115 	stw	fp,4(sp)
    5718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    571c:	00800034 	movhi	r2,0
    5720:	109cb104 	addi	r2,r2,29380
    5724:	10800017 	ldw	r2,0(r2)
    5728:	1005003a 	cmpeq	r2,r2,zero
    572c:	1000061e 	bne	r2,zero,5748 <alt_get_errno+0x3c>
    5730:	00800034 	movhi	r2,0
    5734:	109cb104 	addi	r2,r2,29380
    5738:	10800017 	ldw	r2,0(r2)
    573c:	103ee83a 	callr	r2
    5740:	e0bfff15 	stw	r2,-4(fp)
    5744:	00000306 	br	5754 <alt_get_errno+0x48>
    5748:	00800074 	movhi	r2,1
    574c:	10a34b04 	addi	r2,r2,-29396
    5750:	e0bfff15 	stw	r2,-4(fp)
    5754:	e0bfff17 	ldw	r2,-4(fp)
}
    5758:	e037883a 	mov	sp,fp
    575c:	dfc00117 	ldw	ra,4(sp)
    5760:	df000017 	ldw	fp,0(sp)
    5764:	dec00204 	addi	sp,sp,8
    5768:	f800283a 	ret
    576c:	000040a4 	muli	zero,zero,258
