
thread-scheduler.elf:     file format elf32-littlenios2
thread-scheduler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000057ec memsz 0x000057ec flags r-x
    LOAD off    0x0000680c vaddr 0x0000580c paddr 0x00007254 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008c9c vaddr 0x00008c9c paddr 0x00008c9c align 2**12
         filesz 0x00000000 memsz 0x00000334 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005520  000001d8  000001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  000056f8  000056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0000580c  00007254  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000334  00008c9c  00008c9c  00008c9c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  00008280  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000efd  00000000  00000000  00008bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a50c  00000000  00000000  00009ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000051fe  00000000  00000000  00023fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c4cb  00000000  00000000  000291bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001230  00000000  00000000  0003568c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016c3  00000000  00000000  000368bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000362d  00000000  00000000  00037f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003deff  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003df02  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003df05  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003df06  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003df0a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003df0e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003df12  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003df1b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003df24  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003df2d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0003df38  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006a1c7  00000000  00000000  0003df67  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d8 l    d  .text	00000000 .text
000056f8 l    d  .rodata	00000000 .rodata
0000580c l    d  .rwdata	00000000 .rwdata
00008c9c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000210 l       .text	00000000 alt_after_alt_main
000000a4 l       .exceptions	00000000 schedule_threads
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000900 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00005c14 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
00001870 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000722c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006014 l     O .rwdata	00001060 JTAG_UART
00001f10 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00002150 l     F .text	00000228 altera_avalon_jtag_uart_irq
00002378 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000029f4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00002bf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002c70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002d50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00003160 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000032b0 l     F .text	000000f8 alt_file_locked
00003534 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000402c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004410 l     F .text	00000058 std
0000451c l     F .text	00000008 __fp_lock
00004524 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004fdc l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00005114 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005238 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000538c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00005510 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00005694 l     F .text	00000060 alt_get_errno
00004e7c g     F .text	00000070 _isatty_r
000018dc g     F .text	0000006c alt_main
00008d40 g     O .bss	00000100 alt_irq
00004eec g     F .text	00000078 _lseek_r
00007254 g       *ABS*	00000000 __flash_rwdata_start
00008fd0 g       *ABS*	00000000 __alt_heap_start
0000089c g     F .text	00000020 get_global_flag
00004ab8 g     F .text	00000068 __sseek
00004478 g     F .text	000000a4 __sinit
00003c70 g     F .text	00000130 __swbuf_r
00004578 g     F .text	0000009c __sfmoreglue
00001968 g     F .text	00000020 __malloc_unlock
0000087c g     F .text	00000020 reset_global_flag
00004568 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00008cf8 g     O .bss	00000030 run_queue
00000000 g     F .entry	0000000c __reset
00000520 g     F .text	00000110 prune_queue
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004e08 g     F .text	00000074 _fstat_r
00008cb4 g     O .bss	00000004 errno
00008cbc g     O .bss	00000004 alt_argv
0000f21c g       *ABS*	00000000 _gp
0000709c g     O .rwdata	00000180 alt_fd_list
0000362c g     F .text	00000094 alt_find_dev
00003970 g     F .text	000000a0 memcpy
0000455c g     F .text	0000000c _cleanup_r
00003238 g     F .text	00000078 alt_io_redirect
000056f8 g       *ABS*	00000000 __DTOR_END__
0000360c g     F .text	00000020 altera_nios2_irq_init
00002590 g     F .text	00000224 altera_avalon_jtag_uart_read
00000a98 g     F .text	00000014 malloc
00000a3c g     F .text	00000008 __udivsi3
00005174 g     F .text	000000c4 isatty
00008ca8 g     O .bss	00000004 __malloc_top_pad
000011ec g     F .text	00000070 _sbrk_r
00004f64 g     F .text	00000078 _read_r
00007248 g     O .rwdata	00000004 alt_max_fd
00004ce4 g     F .text	00000110 _fclose_r
000043dc g     F .text	00000034 fflush
00008cac g     O .bss	00000004 __malloc_max_sbrked_mem
000004ac g     F .text	0000004c destroy_thread
00008ca0 g     O .bss	00000004 current_thread
00005298 g     F .text	000000f4 lseek
00007228 g     O .rwdata	00000004 _global_impure_ptr
00008fd0 g       *ABS*	00000000 __bss_end
00003068 g     F .text	000000f8 alt_iic_isr_register
00001d74 g     F .text	0000010c alt_tick
00000240 g     F .text	000000a8 mythread
00008c9c g     O .bss	00000004 global_flag
00004544 g     F .text	00000018 __fp_lock_all
00003020 g     F .text	00000048 alt_ic_irq_enabled
00008d28 g     O .bss	00000018 alarm
00001cdc g     F .text	00000098 alt_alarm_stop
00008ccc g     O .bss	00000004 alt_irq_active
00000110 g     F .exceptions	000000c8 alt_irq_handler
00007074 g     O .rwdata	00000028 alt_dev_null
00002c54 g     F .text	0000001c alt_dcache_flush_all
00007254 g       *ABS*	00000000 __ram_rwdata_end
00007240 g     O .rwdata	00000008 alt_dev_list
00005570 g     F .text	00000124 write
00003b14 g     F .text	000000e8 _putc_r
0000580c g       *ABS*	00000000 __ram_rodata_end
0000503c g     F .text	000000d8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00000a44 g     F .text	00000008 __umodsi3
00008fd0 g       *ABS*	00000000 end
00002090 g     F .text	000000c0 altera_avalon_jtag_uart_init
000056f4 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00002a64 g     F .text	00000090 alt_avalon_timer_sc_init
000027b4 g     F .text	00000240 altera_avalon_jtag_uart_write
00004468 g     F .text	00000004 __sfp_lock_acquire
00001388 g     F .text	00000314 _free_r
00001988 g     F .text	00000258 alt_printf
00004030 g     F .text	000001b0 __call_exitprocs
00007220 g     O .rwdata	00000004 __malloc_sbrk_base
000001d8 g     F .text	0000003c _start
00008cc4 g     O .bss	00000004 _alt_tick_rate
00008cc8 g     O .bss	00000004 _alt_nticks
000053ec g     F .text	00000124 read
00001eb4 g     F .text	0000005c alt_sys_init
00003ef8 g     F .text	00000134 __register_exitproc
00002428 g     F .text	00000074 altera_avalon_jtag_uart_close
00000a4c g     F .text	00000038 __mulsi3
0000580c g       *ABS*	00000000 __ram_rwdata_start
000056f8 g       *ABS*	00000000 __ram_rodata_start
00008cd0 g     O .bss	00000028 __malloc_current_mallinfo
00001f48 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000037e0 g     F .text	000000d0 alt_get_fd
00004c74 g     F .text	00000070 _close_r
000038fc g     F .text	00000074 memcmp
00001ff8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00008fd0 g       *ABS*	00000000 __alt_stack_base
00002040 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003dbc g     F .text	0000013c __swsetup_r
00004614 g     F .text	000000f0 __sfp
0000580c g     O .rwdata	00000408 __malloc_av_
00004474 g     F .text	00000004 __sinit_lock_release
00004b9c g     F .text	00000060 __sread
000036c0 g     F .text	00000120 alt_find_file
00002c9c g     F .text	000000b4 alt_dev_llist_insert
00001948 g     F .text	00000020 __malloc_lock
00001c20 g     F .text	000000bc sbrk
000041e0 g     F .text	000001fc _fflush_r
00008c9c g       *ABS*	00000000 __bss_start
00004a18 g     F .text	00000098 memset
00000214 g     F .text	0000002c main
00008cc0 g     O .bss	00000004 alt_envp
00008cb0 g     O .bss	00000004 __malloc_max_total_mem
00001fa0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00003da0 g     F .text	0000001c __swbuf
00004ab0 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00004df4 g     F .text	00000014 fclose
00008e40 g     O .bss	00000190 _atexit0
00000aac g     F .text	00000740 _malloc_r
0000724c g     O .rwdata	00000004 alt_errno
000047cc g     F .text	000000b8 _fwalk
00003a10 g     F .text	00000104 putc
0000097c g     F .text	00000060 __divsi3
0000125c g     F .text	0000012c _malloc_trim_r
000056f8 g       *ABS*	00000000 __CTOR_END__
000056f8 g       *ABS*	00000000 __flash_rodata_start
000056f8 g       *ABS*	00000000 __DTOR_LIST__
00000810 g     F .text	0000006c interrupt_handler
00001e80 g     F .text	00000034 alt_irq_init
00003594 g     F .text	00000078 alt_release_fd
000038b0 g     F .text	00000014 atexit
000004f8 g     F .text	00000028 finish_thread
00004bfc g     F .text	00000078 _write_r
00007224 g     O .rwdata	00000004 _impure_ptr
00008cb8 g     O .bss	00000004 alt_argc
00002e14 g     F .text	00000064 _do_dtors
000008bc g     F .text	00000020 disable_interrupts
00000020 g       .exceptions	00000000 alt_irq_entry
00008ca4 g     O .bss	00000004 run_queue_count
0000452c g     F .text	00000018 __fp_unlock_all
00007238 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002e94 g     F .text	00000050 alt_ic_isr_register
00007254 g       *ABS*	00000000 _edata
00008fd0 g       *ABS*	00000000 _end
000001d8 g       *ABS*	00000000 __ram_exceptions_end
0000249c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000072c g     F .text	000000e4 prototype_os
00002f80 g     F .text	000000a0 alt_ic_irq_disable
00004b20 g     F .text	0000007c __swrite
0000721c g     O .rwdata	00000004 __malloc_trim_threshold
000038c4 g     F .text	00000038 exit
00004704 g     F .text	000000c8 _fwalk_reent
000009dc g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000446c g     F .text	00000004 __sfp_lock_release
0000501c g     F .text	00000020 _exit
0000169c g     F .text	00000154 alt_alarm_start
00004884 g     F .text	00000194 __smakebuf_r
00003bfc g     F .text	00000074 strlen
000033a8 g     F .text	0000018c open
00001be0 g     F .text	00000040 alt_putchar
08000000 g       *ABS*	00000000 __alt_mem_SRAM
00002e78 g     F .text	0000001c alt_icache_flush_all
000008dc g     F .text	00000024 enable_interrupts
000002e8 g     F .text	000000d4 thread_create
00007250 g     O .rwdata	00000004 alt_priority_mask
00002ee4 g     F .text	0000009c alt_ic_irq_enable
000003ec g     F .text	000000c0 thread_scheduler
00007230 g     O .rwdata	00000008 alt_alarm_list
00002db0 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00002af4 g     F .text	00000100 close
000003bc g     F .text	00000030 thread_join
000017f0 g     F .text	00000080 alt_load
00000a84 g     F .text	00000014 free
00004470 g     F .text	00000004 __sinit_lock_acquire
00000630 g     F .text	000000fc prioritize_queue



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407614 	ori	at,at,472
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00001100 	call	110 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
.section .exceptions.exit.user, "xa"
call get_global_flag
  98:	000089c0 	call	89c <get_global_flag>
movi r8, 1
  9c:	02000044 	movi	r8,1
beq r2, r8, schedule_threads
  a0:	12000026 	beq	r2,r8,a4 <schedule_threads>

000000a4 <schedule_threads>:

schedule_threads:
mov r4, sp
  a4:	d809883a 	mov	r4,sp
mov r5, fp
  a8:	e00b883a 	mov	r5,fp
call thread_scheduler
  ac:	00003ec0 	call	3ec <thread_scheduler>
mov sp, r4
  b0:	2037883a 	mov	sp,r4
mov fp, r5
  b4:	2839883a 	mov	fp,r5
call reset_global_flag
  b8:	000087c0 	call	87c <reset_global_flag>
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  bc:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  c0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  c4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  cc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  d0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  dc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  e0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e4:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  ec:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  f0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  f4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  fc:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 100:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 104:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 108:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10c:	ef80083a 	eret

00000110 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 110:	defff904 	addi	sp,sp,-28
 114:	dfc00615 	stw	ra,24(sp)
 118:	df000515 	stw	fp,20(sp)
 11c:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 120:	0005313a 	rdctl	r2,ipending
 124:	e0bffc15 	stw	r2,-16(fp)

  return active;
 128:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 12c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 134:	00800044 	movi	r2,1
 138:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 13c:	e0ffff17 	ldw	r3,-4(fp)
 140:	e0bffe17 	ldw	r2,-8(fp)
 144:	1884703a 	and	r2,r3,r2
 148:	1005003a 	cmpeq	r2,r2,zero
 14c:	1000161e 	bne	r2,zero,1a8 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	00c00074 	movhi	r3,1
 158:	18e35004 	addi	r3,r3,-29376
 15c:	100490fa 	slli	r2,r2,3
 160:	10c5883a 	add	r2,r2,r3
 164:	11400017 	ldw	r5,0(r2)
 168:	e0bffd17 	ldw	r2,-12(fp)
 16c:	00c00074 	movhi	r3,1
 170:	18e35004 	addi	r3,r3,-29376
 174:	100490fa 	slli	r2,r2,3
 178:	10c5883a 	add	r2,r2,r3
 17c:	10800104 	addi	r2,r2,4
 180:	11000017 	ldw	r4,0(r2)
 184:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 190:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 194:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 198:	e0bfff17 	ldw	r2,-4(fp)
 19c:	1004c03a 	cmpne	r2,r2,zero
 1a0:	103fe31e 	bne	r2,zero,130 <alt_irq_handler+0x20>
 1a4:	00000706 	br	1c4 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a8:	e0bffe17 	ldw	r2,-8(fp)
 1ac:	1085883a 	add	r2,r2,r2
 1b0:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1b4:	e0bffd17 	ldw	r2,-12(fp)
 1b8:	10800044 	addi	r2,r2,1
 1bc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1c0:	003fde06 	br	13c <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c4:	e037883a 	mov	sp,fp
 1c8:	dfc00117 	ldw	ra,4(sp)
 1cc:	df000017 	ldw	fp,0(sp)
 1d0:	dec00204 	addi	sp,sp,8
 1d4:	f800283a 	ret

Disassembly of section .text:

000001d8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1dc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1e0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1e4:	d6bc8714 	ori	gp,gp,61980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1ec:	10a32714 	ori	r2,r2,35996

    movhi r3, %hi(__bss_end)
     1f0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1f4:	18e3f414 	ori	r3,r3,36816

    beq r2, r3, 1f
     1f8:	10c00326 	beq	r2,r3,208 <_start+0x30>

0:
    stw zero, (r2)
     1fc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     200:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     204:	10fffd36 	bltu	r2,r3,1fc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     208:	00017f00 	call	17f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     20c:	00018dc0 	call	18dc <alt_main>

00000210 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     210:	003fff06 	br	210 <alt_after_alt_main>

00000214 <main>:
int run_queue_count;
/* the currently running thread */
tcb* current_thread;

int main()
{
     214:	defffe04 	addi	sp,sp,-8
     218:	dfc00115 	stw	ra,4(sp)
     21c:	df000015 	stw	fp,0(sp)
     220:	d839883a 	mov	fp,sp
	// begin execution of the operating system
	prototype_os();
     224:	000072c0 	call	72c <prototype_os>
	return 0;
     228:	0005883a 	mov	r2,zero
}
     22c:	e037883a 	mov	sp,fp
     230:	dfc00117 	ldw	ra,4(sp)
     234:	df000017 	ldw	fp,0(sp)
     238:	dec00204 	addi	sp,sp,8
     23c:	f800283a 	ret

00000240 <mythread>:

void mythread(int thread_id)
{
     240:	defff904 	addi	sp,sp,-28
     244:	dfc00615 	stw	ra,24(sp)
     248:	df000515 	stw	fp,20(sp)
     24c:	df000504 	addi	fp,sp,20
     250:	e13ffe15 	stw	r4,-8(fp)
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
     254:	e0bffe17 	ldw	r2,-8(fp)
     258:	1080004c 	andi	r2,r2,1
     25c:	1004c03a 	cmpne	r2,r2,zero
     260:	1000031e 	bne	r2,zero,270 <mythread+0x30>
     264:	00800284 	movi	r2,10
     268:	e0bfff15 	stw	r2,-4(fp)
     26c:	00000206 	br	278 <mythread+0x38>
     270:	008003c4 	movi	r2,15
     274:	e0bfff15 	stw	r2,-4(fp)
     278:	e0bfff17 	ldw	r2,-4(fp)
     27c:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++)
     280:	e03ffd15 	stw	zero,-12(fp)
     284:	00001006 	br	2c8 <mythread+0x88>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
     288:	01000034 	movhi	r4,0
     28c:	2115be04 	addi	r4,r4,22264
     290:	e17ffd17 	ldw	r5,-12(fp)
     294:	e1bffe17 	ldw	r6,-8(fp)
     298:	00019880 	call	1988 <alt_printf>
		for (j = 0; j < MAX; j++);
     29c:	e03ffc15 	stw	zero,-16(fp)
     2a0:	00000306 	br	2b0 <mythread+0x70>
     2a4:	e0bffc17 	ldw	r2,-16(fp)
     2a8:	10800044 	addi	r2,r2,1
     2ac:	e0bffc15 	stw	r2,-16(fp)
     2b0:	e0bffc17 	ldw	r2,-16(fp)
     2b4:	1089c410 	cmplti	r2,r2,10000
     2b8:	103ffa1e 	bne	r2,zero,2a4 <mythread+0x64>

void mythread(int thread_id)
{
	int i, j, n;
	n = (thread_id % 2 == 0) ? 10 : 15;
	for (i = 0; i < n; i++)
     2bc:	e0bffd17 	ldw	r2,-12(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bffd15 	stw	r2,-12(fp)
     2c8:	e0fffd17 	ldw	r3,-12(fp)
     2cc:	e0bffb17 	ldw	r2,-20(fp)
     2d0:	18bfed16 	blt	r3,r2,288 <mythread+0x48>
	{
		alt_printf("This is message %d of thread # %d.\n", i, thread_id);
		for (j = 0; j < MAX; j++);
	}
}
     2d4:	e037883a 	mov	sp,fp
     2d8:	dfc00117 	ldw	ra,4(sp)
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00204 	addi	sp,sp,8
     2e4:	f800283a 	ret

000002e8 <thread_create>:

void thread_create(int thread_id, tcb *thread, void(*f)(void *arg), void *arg)
{
     2e8:	defff904 	addi	sp,sp,-28
     2ec:	dfc00615 	stw	ra,24(sp)
     2f0:	df000515 	stw	fp,20(sp)
     2f4:	df000504 	addi	fp,sp,20
     2f8:	e13ffc15 	stw	r4,-16(fp)
     2fc:	e17ffd15 	stw	r5,-12(fp)
     300:	e1bffe15 	stw	r6,-8(fp)
     304:	e1ffff15 	stw	r7,-4(fp)
	// allocate memory for the thread's workspace and stack
	tcb *t = (tcb *)malloc(sizeof(tcb) + STACK_SIZE);
     308:	01040704 	movi	r4,4124
     30c:	0000a980 	call	a98 <malloc>
     310:	e0bffb15 	stw	r2,-20(fp)
	t->thread_id = thread_id;
     314:	e0fffb17 	ldw	r3,-20(fp)
     318:	e0bffc17 	ldw	r2,-16(fp)
     31c:	18800015 	stw	r2,0(r3)
	// set stack pointer
	t->sp = t + sizeof(tcb);
     320:	e0bffb17 	ldw	r2,-20(fp)
     324:	1080c404 	addi	r2,r2,784
     328:	1007883a 	mov	r3,r2
     32c:	e0bffb17 	ldw	r2,-20(fp)
     330:	10c00315 	stw	r3,12(r2)
	// set frame pointer
	t->fp = t->sp + STACK_SIZE;
     334:	e0bffb17 	ldw	r2,-20(fp)
     338:	10800317 	ldw	r2,12(r2)
     33c:	10d00004 	addi	r3,r2,16384
     340:	e0bffb17 	ldw	r2,-20(fp)
     344:	10c00415 	stw	r3,16(r2)
	// set the thread's function to run
	t->function = f;
     348:	e0fffb17 	ldw	r3,-20(fp)
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	18800515 	stw	r2,20(r3)
	*(t->sp + 18) = finish_thread;
     354:	e0bffb17 	ldw	r2,-20(fp)
     358:	10800317 	ldw	r2,12(r2)
     35c:	10c01204 	addi	r3,r2,72
     360:	00800034 	movhi	r2,0
     364:	10813e04 	addi	r2,r2,1272
     368:	18800015 	stw	r2,0(r3)

	// add thread to run_queue
	run_queue[thread_id] = t;
     36c:	e0bffc17 	ldw	r2,-16(fp)
     370:	00c00074 	movhi	r3,1
     374:	18e33e04 	addi	r3,r3,-29448
     378:	1085883a 	add	r2,r2,r2
     37c:	1085883a 	add	r2,r2,r2
     380:	10c7883a 	add	r3,r2,r3
     384:	e0bffb17 	ldw	r2,-20(fp)
     388:	18800015 	stw	r2,0(r3)
	run_queue_count++;
     38c:	d0a6a217 	ldw	r2,-25976(gp)
     390:	10800044 	addi	r2,r2,1
     394:	d0a6a215 	stw	r2,-25976(gp)
	// thread has been added to queue; set its status to scheduled
	t->status = scheduled;
     398:	e0bffb17 	ldw	r2,-20(fp)
     39c:	10000215 	stw	zero,8(r2)
	thread = t;
     3a0:	e0bffb17 	ldw	r2,-20(fp)
     3a4:	e0bffd15 	stw	r2,-12(fp)
}
     3a8:	e037883a 	mov	sp,fp
     3ac:	dfc00117 	ldw	ra,4(sp)
     3b0:	df000017 	ldw	fp,0(sp)
     3b4:	dec00204 	addi	sp,sp,8
     3b8:	f800283a 	ret

000003bc <thread_join>:

// TODO
void thread_join(tcb *thread)
{
     3bc:	defffe04 	addi	sp,sp,-8
     3c0:	df000115 	stw	fp,4(sp)
     3c4:	df000104 	addi	fp,sp,4
     3c8:	e13fff15 	stw	r4,-4(fp)
	while(thread->status != finished);
     3cc:	e0bfff17 	ldw	r2,-4(fp)
     3d0:	10800217 	ldw	r2,8(r2)
     3d4:	10800098 	cmpnei	r2,r2,2
     3d8:	103ffc1e 	bne	r2,zero,3cc <thread_join+0x10>
}
     3dc:	e037883a 	mov	sp,fp
     3e0:	df000017 	ldw	fp,0(sp)
     3e4:	dec00104 	addi	sp,sp,4
     3e8:	f800283a 	ret

000003ec <thread_scheduler>:

void thread_scheduler(void *sp, void *fp)
{
     3ec:	defffc04 	addi	sp,sp,-16
     3f0:	dfc00315 	stw	ra,12(sp)
     3f4:	df000215 	stw	fp,8(sp)
     3f8:	df000204 	addi	fp,sp,8
     3fc:	e13ffe15 	stw	r4,-8(fp)
     400:	e17fff15 	stw	r5,-4(fp)
	alt_printf("scheduling threads...");
     404:	01000034 	movhi	r4,0
     408:	2115c704 	addi	r4,r4,22300
     40c:	00019880 	call	1988 <alt_printf>

	//disable_interrupts(); // TODO why does this not work?
	// save the yielded thread's progress via sp, fp
	current_thread->sp = (int *)sp;
     410:	d0e6a117 	ldw	r3,-25980(gp)
     414:	e0bffe17 	ldw	r2,-8(fp)
     418:	18800315 	stw	r2,12(r3)
	current_thread->fp = (int *)fp;
     41c:	d0e6a117 	ldw	r3,-25980(gp)
     420:	e0bfff17 	ldw	r2,-4(fp)
     424:	18800415 	stw	r2,16(r3)

	if(run_queue_count > 0)
     428:	d0a6a217 	ldw	r2,-25976(gp)
     42c:	10800050 	cmplti	r2,r2,1
     430:	1000161e 	bne	r2,zero,48c <thread_scheduler+0xa0>
	{
		// remove completed threads from the queue
		prune_queue();
     434:	00005200 	call	520 <prune_queue>
		// reprioritize the queue
		prioritize_queue();
     438:	00006300 	call	630 <prioritize_queue>

		// set the next-to-run to run as the current thread
		current_thread = run_queue[0];
     43c:	00800074 	movhi	r2,1
     440:	10a33e04 	addi	r2,r2,-29448
     444:	10800017 	ldw	r2,0(r2)
     448:	d0a6a115 	stw	r2,-25980(gp)
		// update next-to-run thread's number of times scheduled count
		current_thread->scheduled_count++;
     44c:	d0e6a117 	ldw	r3,-25980(gp)
     450:	18800117 	ldw	r2,4(r3)
     454:	10800044 	addi	r2,r2,1
     458:	18800115 	stw	r2,4(r3)

		alt_printf("next thread to run: %i", current_thread->thread_id);
     45c:	d0a6a117 	ldw	r2,-25980(gp)
     460:	11400017 	ldw	r5,0(r2)
     464:	01000034 	movhi	r4,0
     468:	2115cd04 	addi	r4,r4,22324
     46c:	00019880 	call	1988 <alt_printf>

		// send the next-to-run thread's stack context back to assembly to be run
		sp = current_thread->sp;
     470:	d0a6a117 	ldw	r2,-25980(gp)
     474:	10800317 	ldw	r2,12(r2)
     478:	e0bffe15 	stw	r2,-8(fp)
		fp = current_thread->fp;
     47c:	d0a6a117 	ldw	r2,-25980(gp)
     480:	10800417 	ldw	r2,16(r2)
     484:	e0bfff15 	stw	r2,-4(fp)
     488:	00000306 	br	498 <thread_scheduler+0xac>

		// TODO start function of new thread
	}
	else
	{
		alt_printf("Interrupted by the DE2 timer!\n");
     48c:	01000034 	movhi	r4,0
     490:	2115d304 	addi	r4,r4,22348
     494:	00019880 	call	1988 <alt_printf>
	}
	//enable_interrupts();
}
     498:	e037883a 	mov	sp,fp
     49c:	dfc00117 	ldw	ra,4(sp)
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00204 	addi	sp,sp,8
     4a8:	f800283a 	ret

000004ac <destroy_thread>:

void destroy_thread(tcb *thread)
{
     4ac:	defffd04 	addi	sp,sp,-12
     4b0:	dfc00215 	stw	ra,8(sp)
     4b4:	df000115 	stw	fp,4(sp)
     4b8:	df000104 	addi	fp,sp,4
     4bc:	e13fff15 	stw	r4,-4(fp)
	alt_printf("thread %i destroyed; was scheduled %i times\n", thread->thread_id, thread->scheduled_count);
     4c0:	e0bfff17 	ldw	r2,-4(fp)
     4c4:	11400017 	ldw	r5,0(r2)
     4c8:	e0bfff17 	ldw	r2,-4(fp)
     4cc:	11800117 	ldw	r6,4(r2)
     4d0:	01000034 	movhi	r4,0
     4d4:	2115db04 	addi	r4,r4,22380
     4d8:	00019880 	call	1988 <alt_printf>
	free(thread);
     4dc:	e13fff17 	ldw	r4,-4(fp)
     4e0:	0000a840 	call	a84 <free>
}
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <finish_thread>:

void finish_thread()
{
     4f8:	deffff04 	addi	sp,sp,-4
     4fc:	df000015 	stw	fp,0(sp)
     500:	d839883a 	mov	fp,sp
	current_thread->status = finished;
     504:	d0e6a117 	ldw	r3,-25980(gp)
     508:	00800084 	movi	r2,2
     50c:	18800215 	stw	r2,8(r3)
}
     510:	e037883a 	mov	sp,fp
     514:	df000017 	ldw	fp,0(sp)
     518:	dec00104 	addi	sp,sp,4
     51c:	f800283a 	ret

00000520 <prune_queue>:

void prune_queue()
{
     520:	defffb04 	addi	sp,sp,-20
     524:	dfc00415 	stw	ra,16(sp)
     528:	df000315 	stw	fp,12(sp)
     52c:	df000304 	addi	fp,sp,12
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00003606 	br	610 <prune_queue+0xf0>
	{
		tcb *thread = run_queue[i];
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	00c00074 	movhi	r3,1
     540:	18e33e04 	addi	r3,r3,-29448
     544:	1085883a 	add	r2,r2,r2
     548:	1085883a 	add	r2,r2,r2
     54c:	10c5883a 	add	r2,r2,r3
     550:	10800017 	ldw	r2,0(r2)
     554:	e0bffd15 	stw	r2,-12(fp)
		// thread has finished and exited
		if (thread->status == finished)
     558:	e0bffd17 	ldw	r2,-12(fp)
     55c:	10800217 	ldw	r2,8(r2)
     560:	10800098 	cmpnei	r2,r2,2
     564:	1000271e 	bne	r2,zero,604 <prune_queue+0xe4>
		{
			// remove the completed thread from the queue
			run_queue[i] = NULL;
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	00c00074 	movhi	r3,1
     570:	18e33e04 	addi	r3,r3,-29448
     574:	1085883a 	add	r2,r2,r2
     578:	1085883a 	add	r2,r2,r2
     57c:	10c5883a 	add	r2,r2,r3
     580:	10000015 	stw	zero,0(r2)
			run_queue_count--;
     584:	d0a6a217 	ldw	r2,-25976(gp)
     588:	10bfffc4 	addi	r2,r2,-1
     58c:	d0a6a215 	stw	r2,-25976(gp)
			destroy_thread(thread);
     590:	e13ffd17 	ldw	r4,-12(fp)
     594:	00004ac0 	call	4ac <destroy_thread>
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     598:	e0bfff17 	ldw	r2,-4(fp)
     59c:	e0bffe15 	stw	r2,-8(fp)
     5a0:	00001206 	br	5ec <prune_queue+0xcc>
			{
				run_queue[j] = run_queue[j+1];
     5a4:	e17ffe17 	ldw	r5,-8(fp)
     5a8:	e0bffe17 	ldw	r2,-8(fp)
     5ac:	10800044 	addi	r2,r2,1
     5b0:	00c00074 	movhi	r3,1
     5b4:	18e33e04 	addi	r3,r3,-29448
     5b8:	1085883a 	add	r2,r2,r2
     5bc:	1085883a 	add	r2,r2,r2
     5c0:	10c5883a 	add	r2,r2,r3
     5c4:	11000017 	ldw	r4,0(r2)
     5c8:	00c00074 	movhi	r3,1
     5cc:	18e33e04 	addi	r3,r3,-29448
     5d0:	2945883a 	add	r2,r5,r5
     5d4:	1085883a 	add	r2,r2,r2
     5d8:	10c5883a 	add	r2,r2,r3
     5dc:	11000015 	stw	r4,0(r2)
			// remove the completed thread from the queue
			run_queue[i] = NULL;
			run_queue_count--;
			destroy_thread(thread);
			// shift all remaining threads in the queue up
			for(j = i; j < NUM_THREADS-1; j++)
     5e0:	e0bffe17 	ldw	r2,-8(fp)
     5e4:	10800044 	addi	r2,r2,1
     5e8:	e0bffe15 	stw	r2,-8(fp)
     5ec:	e0bffe17 	ldw	r2,-8(fp)
     5f0:	108002d0 	cmplti	r2,r2,11
     5f4:	103feb1e 	bne	r2,zero,5a4 <prune_queue+0x84>
			{
				run_queue[j] = run_queue[j+1];
			}
			// insert an empty slot at the end of the queue
			run_queue[NUM_THREADS-1] = NULL;
     5f8:	00800074 	movhi	r2,1
     5fc:	10a33e04 	addi	r2,r2,-29448
     600:	10000b15 	stw	zero,44(r2)

void prune_queue()
{
	int i, j;
	// iterate through queue
	for (i = 0; i < NUM_THREADS; i++)
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	10800044 	addi	r2,r2,1
     60c:	e0bfff15 	stw	r2,-4(fp)
     610:	e0bfff17 	ldw	r2,-4(fp)
     614:	10800310 	cmplti	r2,r2,12
     618:	103fc71e 	bne	r2,zero,538 <prune_queue+0x18>
			}
			// insert an empty slot at the end of the queue
			run_queue[NUM_THREADS-1] = NULL;
		}
	}
}
     61c:	e037883a 	mov	sp,fp
     620:	dfc00117 	ldw	ra,4(sp)
     624:	df000017 	ldw	fp,0(sp)
     628:	dec00204 	addi	sp,sp,8
     62c:	f800283a 	ret

00000630 <prioritize_queue>:

void prioritize_queue()
{
     630:	defffc04 	addi	sp,sp,-16
     634:	dfc00315 	stw	ra,12(sp)
     638:	df000215 	stw	fp,8(sp)
     63c:	df000204 	addi	fp,sp,8
	// determine how many open spots are available in the queue
	// snapshot the current highest priority thread
	tcb *current_thread = run_queue[0];
     640:	00800074 	movhi	r2,1
     644:	10a33e04 	addi	r2,r2,-29448
     648:	10800017 	ldw	r2,0(r2)
     64c:	e0bfff15 	stw	r2,-4(fp)
	if (current_thread == NULL)
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	1004c03a 	cmpne	r2,r2,zero
     658:	1000041e 	bne	r2,zero,66c <prioritize_queue+0x3c>
	{
		alt_printf("run queue is empty");
     65c:	01000034 	movhi	r4,0
     660:	2115e704 	addi	r4,r4,22428
     664:	00019880 	call	1988 <alt_printf>
		return;
     668:	00002b06 	br	718 <prioritize_queue+0xe8>
	}
	// make the highest priority slot available
	run_queue[0] = NULL;
     66c:	00800074 	movhi	r2,1
     670:	10a33e04 	addi	r2,r2,-29448
     674:	10000015 	stw	zero,0(r2)
	int i;
	for(i = 0; i < NUM_THREADS-1; i++)
     678:	e03ffe15 	stw	zero,-8(fp)
     67c:	00001b06 	br	6ec <prioritize_queue+0xbc>
	{
		// the rest of the queue is empty slots
		if (run_queue[i] == NULL)
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	00c00074 	movhi	r3,1
     688:	18e33e04 	addi	r3,r3,-29448
     68c:	1085883a 	add	r2,r2,r2
     690:	1085883a 	add	r2,r2,r2
     694:	10c5883a 	add	r2,r2,r3
     698:	10800017 	ldw	r2,0(r2)
     69c:	1005003a 	cmpeq	r2,r2,zero
     6a0:	1000151e 	bne	r2,zero,6f8 <prioritize_queue+0xc8>
		{
			break;
		}
		run_queue[i] = run_queue[i+1];
     6a4:	e17ffe17 	ldw	r5,-8(fp)
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	10800044 	addi	r2,r2,1
     6b0:	00c00074 	movhi	r3,1
     6b4:	18e33e04 	addi	r3,r3,-29448
     6b8:	1085883a 	add	r2,r2,r2
     6bc:	1085883a 	add	r2,r2,r2
     6c0:	10c5883a 	add	r2,r2,r3
     6c4:	11000017 	ldw	r4,0(r2)
     6c8:	00c00074 	movhi	r3,1
     6cc:	18e33e04 	addi	r3,r3,-29448
     6d0:	2945883a 	add	r2,r5,r5
     6d4:	1085883a 	add	r2,r2,r2
     6d8:	10c5883a 	add	r2,r2,r3
     6dc:	11000015 	stw	r4,0(r2)
		return;
	}
	// make the highest priority slot available
	run_queue[0] = NULL;
	int i;
	for(i = 0; i < NUM_THREADS-1; i++)
     6e0:	e0bffe17 	ldw	r2,-8(fp)
     6e4:	10800044 	addi	r2,r2,1
     6e8:	e0bffe15 	stw	r2,-8(fp)
     6ec:	e0bffe17 	ldw	r2,-8(fp)
     6f0:	108002d0 	cmplti	r2,r2,11
     6f4:	103fe21e 	bne	r2,zero,680 <prioritize_queue+0x50>
			break;
		}
		run_queue[i] = run_queue[i+1];
	}
	// insert the former highest priority thread at the back of the queue
	run_queue[i] = current_thread;
     6f8:	e0bffe17 	ldw	r2,-8(fp)
     6fc:	00c00074 	movhi	r3,1
     700:	18e33e04 	addi	r3,r3,-29448
     704:	1085883a 	add	r2,r2,r2
     708:	1085883a 	add	r2,r2,r2
     70c:	10c7883a 	add	r3,r2,r3
     710:	e0bfff17 	ldw	r2,-4(fp)
     714:	18800015 	stw	r2,0(r3)
}
     718:	e037883a 	mov	sp,fp
     71c:	dfc00117 	ldw	ra,4(sp)
     720:	df000017 	ldw	fp,0(sp)
     724:	dec00204 	addi	sp,sp,8
     728:	f800283a 	ret

0000072c <prototype_os>:

void prototype_os()
{
     72c:	defffc04 	addi	sp,sp,-16
     730:	dfc00315 	stw	ra,12(sp)
     734:	df000215 	stw	fp,8(sp)
     738:	df000204 	addi	fp,sp,8
	run_queue_count = 0;
     73c:	d026a215 	stw	zero,-25976(gp)
	int i;
	// create new threads; set their function to execute to mythread
	for (i = 0; i < NUM_THREADS; i++)
     740:	e03fff15 	stw	zero,-4(fp)
     744:	00000906 	br	76c <prototype_os+0x40>
	{
		tcb *new_thread;
		thread_create(i, new_thread, mythread, &i);
     748:	e13fff17 	ldw	r4,-4(fp)
     74c:	01800034 	movhi	r6,0
     750:	31809004 	addi	r6,r6,576
     754:	e1ffff04 	addi	r7,fp,-4
     758:	e17ffe17 	ldw	r5,-8(fp)
     75c:	00002e80 	call	2e8 <thread_create>
void prototype_os()
{
	run_queue_count = 0;
	int i;
	// create new threads; set their function to execute to mythread
	for (i = 0; i < NUM_THREADS; i++)
     760:	e0bfff17 	ldw	r2,-4(fp)
     764:	10800044 	addi	r2,r2,1
     768:	e0bfff15 	stw	r2,-4(fp)
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10800310 	cmplti	r2,r2,12
     774:	103ff41e 	bne	r2,zero,748 <prototype_os+0x1c>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     778:	00800074 	movhi	r2,1
     77c:	10a33104 	addi	r2,r2,-29500
     780:	10800017 	ldw	r2,0(r2)
     784:	100b883a 	mov	r5,r2
		tcb *new_thread;
		thread_create(i, new_thread, mythread, &i);
	}
	
	// initialize the alarm to interrupt after 1 second and set the alarm's callback function
	alt_alarm_start(&alarm, alt_ticks_per_second(), interrupt_handler, NULL);
     788:	01000074 	movhi	r4,1
     78c:	21234a04 	addi	r4,r4,-29400
     790:	01800034 	movhi	r6,0
     794:	31820404 	addi	r6,r6,2064
     798:	000f883a 	mov	r7,zero
     79c:	000169c0 	call	169c <alt_alarm_start>

	// join all threads on main (main paused until all threads finish)
	for (i = 0; i < NUM_THREADS; i++)
     7a0:	e03fff15 	stw	zero,-4(fp)
     7a4:	00000b06 	br	7d4 <prototype_os+0xa8>
	{
		thread_join(run_queue[i]);
     7a8:	e0bfff17 	ldw	r2,-4(fp)
     7ac:	00c00074 	movhi	r3,1
     7b0:	18e33e04 	addi	r3,r3,-29448
     7b4:	1085883a 	add	r2,r2,r2
     7b8:	1085883a 	add	r2,r2,r2
     7bc:	10c5883a 	add	r2,r2,r3
     7c0:	11000017 	ldw	r4,0(r2)
     7c4:	00003bc0 	call	3bc <thread_join>
	
	// initialize the alarm to interrupt after 1 second and set the alarm's callback function
	alt_alarm_start(&alarm, alt_ticks_per_second(), interrupt_handler, NULL);

	// join all threads on main (main paused until all threads finish)
	for (i = 0; i < NUM_THREADS; i++)
     7c8:	e0bfff17 	ldw	r2,-4(fp)
     7cc:	10800044 	addi	r2,r2,1
     7d0:	e0bfff15 	stw	r2,-4(fp)
     7d4:	e0bfff17 	ldw	r2,-4(fp)
     7d8:	10800310 	cmplti	r2,r2,12
     7dc:	103ff21e 	bne	r2,zero,7a8 <prototype_os+0x7c>
	}

	// loop endlessly
	while(1)
	{
		alt_printf("Hello from uOS!\n");
     7e0:	01000034 	movhi	r4,0
     7e4:	2115ec04 	addi	r4,r4,22448
     7e8:	00019880 	call	1988 <alt_printf>

		// loop; will be interrupted
		for (i = 0; i < 10000; i++);
     7ec:	e03fff15 	stw	zero,-4(fp)
     7f0:	00000306 	br	800 <prototype_os+0xd4>
     7f4:	e0bfff17 	ldw	r2,-4(fp)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	e0bfff15 	stw	r2,-4(fp)
     800:	e0bfff17 	ldw	r2,-4(fp)
     804:	1089c410 	cmplti	r2,r2,10000
     808:	103ffa1e 	bne	r2,zero,7f4 <prototype_os+0xc8>
	}
     80c:	003ff406 	br	7e0 <prototype_os+0xb4>

00000810 <interrupt_handler>:
}

alt_u32 interrupt_handler(void* context)
{
     810:	defffd04 	addi	sp,sp,-12
     814:	dfc00215 	stw	ra,8(sp)
     818:	df000115 	stw	fp,4(sp)
     81c:	df000104 	addi	fp,sp,4
     820:	e13fff15 	stw	r4,-4(fp)
	alt_printf("Interrupted by timer!\n");
     824:	01000034 	movhi	r4,0
     828:	2115f104 	addi	r4,r4,22468
     82c:	00019880 	call	1988 <alt_printf>
	// schedule new thread
	if (run_queue_count > 0) // TODO do we have to do this?
     830:	d0a6a217 	ldw	r2,-25976(gp)
     834:	10800050 	cmplti	r2,r2,1
     838:	1000021e 	bne	r2,zero,844 <interrupt_handler+0x34>
	{
		global_flag = 1;
     83c:	00800044 	movi	r2,1
     840:	d0a6a015 	stw	r2,-25984(gp)
     844:	00800074 	movhi	r2,1
     848:	10a33104 	addi	r2,r2,-29500
     84c:	10800017 	ldw	r2,0(r2)
     850:	1009883a 	mov	r4,r2
	}
	// reset the alarm to interrupt next in 0.5 seconds
	return ALARMTICKS(50);
     854:	01400c84 	movi	r5,50
     858:	0000a4c0 	call	a4c <__mulsi3>
     85c:	1009883a 	mov	r4,r2
     860:	01400284 	movi	r5,10
     864:	0000a3c0 	call	a3c <__udivsi3>
}
     868:	e037883a 	mov	sp,fp
     86c:	dfc00117 	ldw	ra,4(sp)
     870:	df000017 	ldw	fp,0(sp)
     874:	dec00204 	addi	sp,sp,8
     878:	f800283a 	ret

0000087c <reset_global_flag>:

void reset_global_flag()
{
     87c:	deffff04 	addi	sp,sp,-4
     880:	df000015 	stw	fp,0(sp)
     884:	d839883a 	mov	fp,sp
	global_flag = 0;
     888:	d026a015 	stw	zero,-25984(gp)
}
     88c:	e037883a 	mov	sp,fp
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00104 	addi	sp,sp,4
     898:	f800283a 	ret

0000089c <get_global_flag>:

int get_global_flag()
{
     89c:	deffff04 	addi	sp,sp,-4
     8a0:	df000015 	stw	fp,0(sp)
     8a4:	d839883a 	mov	fp,sp
	return global_flag;
     8a8:	d0a6a017 	ldw	r2,-25984(gp)
}
     8ac:	e037883a 	mov	sp,fp
     8b0:	df000017 	ldw	fp,0(sp)
     8b4:	dec00104 	addi	sp,sp,4
     8b8:	f800283a 	ret

000008bc <disable_interrupts>:

void disable_interrupts()
{
     8bc:	deffff04 	addi	sp,sp,-4
     8c0:	df000015 	stw	fp,0(sp)
     8c4:	d839883a 	mov	fp,sp
	asm("wrctl status, zero");
     8c8:	0001703a 	wrctl	status,zero
}
     8cc:	e037883a 	mov	sp,fp
     8d0:	df000017 	ldw	fp,0(sp)
     8d4:	dec00104 	addi	sp,sp,4
     8d8:	f800283a 	ret

000008dc <enable_interrupts>:

void enable_interrupts()
{
     8dc:	deffff04 	addi	sp,sp,-4
     8e0:	df000015 	stw	fp,0(sp)
     8e4:	d839883a 	mov	fp,sp
	asm("movi et, 1");
     8e8:	06000044 	movi	et,1
	asm("wrctl status, et");
     8ec:	c001703a 	wrctl	status,et
}
     8f0:	e037883a 	mov	sp,fp
     8f4:	df000017 	ldw	fp,0(sp)
     8f8:	dec00104 	addi	sp,sp,4
     8fc:	f800283a 	ret

00000900 <udivmodsi4>:
     900:	29001b2e 	bgeu	r5,r4,970 <udivmodsi4+0x70>
     904:	28001a16 	blt	r5,zero,970 <udivmodsi4+0x70>
     908:	00800044 	movi	r2,1
     90c:	0007883a 	mov	r3,zero
     910:	01c007c4 	movi	r7,31
     914:	00000306 	br	924 <udivmodsi4+0x24>
     918:	19c01326 	beq	r3,r7,968 <udivmodsi4+0x68>
     91c:	18c00044 	addi	r3,r3,1
     920:	28000416 	blt	r5,zero,934 <udivmodsi4+0x34>
     924:	294b883a 	add	r5,r5,r5
     928:	1085883a 	add	r2,r2,r2
     92c:	293ffa36 	bltu	r5,r4,918 <udivmodsi4+0x18>
     930:	10000d26 	beq	r2,zero,968 <udivmodsi4+0x68>
     934:	0007883a 	mov	r3,zero
     938:	21400236 	bltu	r4,r5,944 <udivmodsi4+0x44>
     93c:	2149c83a 	sub	r4,r4,r5
     940:	1886b03a 	or	r3,r3,r2
     944:	1004d07a 	srli	r2,r2,1
     948:	280ad07a 	srli	r5,r5,1
     94c:	103ffa1e 	bne	r2,zero,938 <udivmodsi4+0x38>
     950:	30000226 	beq	r6,zero,95c <udivmodsi4+0x5c>
     954:	2005883a 	mov	r2,r4
     958:	f800283a 	ret
     95c:	1809883a 	mov	r4,r3
     960:	2005883a 	mov	r2,r4
     964:	f800283a 	ret
     968:	0007883a 	mov	r3,zero
     96c:	003ff806 	br	950 <udivmodsi4+0x50>
     970:	00800044 	movi	r2,1
     974:	0007883a 	mov	r3,zero
     978:	003fef06 	br	938 <udivmodsi4+0x38>

0000097c <__divsi3>:
     97c:	defffe04 	addi	sp,sp,-8
     980:	dc000015 	stw	r16,0(sp)
     984:	dfc00115 	stw	ra,4(sp)
     988:	0021883a 	mov	r16,zero
     98c:	20000c16 	blt	r4,zero,9c0 <__divsi3+0x44>
     990:	000d883a 	mov	r6,zero
     994:	28000e16 	blt	r5,zero,9d0 <__divsi3+0x54>
     998:	00009000 	call	900 <udivmodsi4>
     99c:	1007883a 	mov	r3,r2
     9a0:	8005003a 	cmpeq	r2,r16,zero
     9a4:	1000011e 	bne	r2,zero,9ac <__divsi3+0x30>
     9a8:	00c7c83a 	sub	r3,zero,r3
     9ac:	1805883a 	mov	r2,r3
     9b0:	dfc00117 	ldw	ra,4(sp)
     9b4:	dc000017 	ldw	r16,0(sp)
     9b8:	dec00204 	addi	sp,sp,8
     9bc:	f800283a 	ret
     9c0:	0109c83a 	sub	r4,zero,r4
     9c4:	04000044 	movi	r16,1
     9c8:	000d883a 	mov	r6,zero
     9cc:	283ff20e 	bge	r5,zero,998 <__divsi3+0x1c>
     9d0:	014bc83a 	sub	r5,zero,r5
     9d4:	8021003a 	cmpeq	r16,r16,zero
     9d8:	003fef06 	br	998 <__divsi3+0x1c>

000009dc <__modsi3>:
     9dc:	deffff04 	addi	sp,sp,-4
     9e0:	dfc00015 	stw	ra,0(sp)
     9e4:	01800044 	movi	r6,1
     9e8:	2807883a 	mov	r3,r5
     9ec:	20000416 	blt	r4,zero,a00 <__modsi3+0x24>
     9f0:	28000c16 	blt	r5,zero,a24 <__modsi3+0x48>
     9f4:	dfc00017 	ldw	ra,0(sp)
     9f8:	dec00104 	addi	sp,sp,4
     9fc:	00009001 	jmpi	900 <udivmodsi4>
     a00:	0109c83a 	sub	r4,zero,r4
     a04:	28000b16 	blt	r5,zero,a34 <__modsi3+0x58>
     a08:	180b883a 	mov	r5,r3
     a0c:	01800044 	movi	r6,1
     a10:	00009000 	call	900 <udivmodsi4>
     a14:	0085c83a 	sub	r2,zero,r2
     a18:	dfc00017 	ldw	ra,0(sp)
     a1c:	dec00104 	addi	sp,sp,4
     a20:	f800283a 	ret
     a24:	014bc83a 	sub	r5,zero,r5
     a28:	dfc00017 	ldw	ra,0(sp)
     a2c:	dec00104 	addi	sp,sp,4
     a30:	00009001 	jmpi	900 <udivmodsi4>
     a34:	0147c83a 	sub	r3,zero,r5
     a38:	003ff306 	br	a08 <__modsi3+0x2c>

00000a3c <__udivsi3>:
     a3c:	000d883a 	mov	r6,zero
     a40:	00009001 	jmpi	900 <udivmodsi4>

00000a44 <__umodsi3>:
     a44:	01800044 	movi	r6,1
     a48:	00009001 	jmpi	900 <udivmodsi4>

00000a4c <__mulsi3>:
     a4c:	20000a26 	beq	r4,zero,a78 <__mulsi3+0x2c>
     a50:	0007883a 	mov	r3,zero
     a54:	2080004c 	andi	r2,r4,1
     a58:	1005003a 	cmpeq	r2,r2,zero
     a5c:	2008d07a 	srli	r4,r4,1
     a60:	1000011e 	bne	r2,zero,a68 <__mulsi3+0x1c>
     a64:	1947883a 	add	r3,r3,r5
     a68:	294b883a 	add	r5,r5,r5
     a6c:	203ff91e 	bne	r4,zero,a54 <__mulsi3+0x8>
     a70:	1805883a 	mov	r2,r3
     a74:	f800283a 	ret
     a78:	0007883a 	mov	r3,zero
     a7c:	1805883a 	mov	r2,r3
     a80:	f800283a 	ret

00000a84 <free>:
     a84:	00800034 	movhi	r2,0
     a88:	109c8904 	addi	r2,r2,29220
     a8c:	200b883a 	mov	r5,r4
     a90:	11000017 	ldw	r4,0(r2)
     a94:	00013881 	jmpi	1388 <_free_r>

00000a98 <malloc>:
     a98:	00800034 	movhi	r2,0
     a9c:	109c8904 	addi	r2,r2,29220
     aa0:	200b883a 	mov	r5,r4
     aa4:	11000017 	ldw	r4,0(r2)
     aa8:	0000aac1 	jmpi	aac <_malloc_r>

00000aac <_malloc_r>:
     aac:	defff604 	addi	sp,sp,-40
     ab0:	28c002c4 	addi	r3,r5,11
     ab4:	00800584 	movi	r2,22
     ab8:	dc800215 	stw	r18,8(sp)
     abc:	dfc00915 	stw	ra,36(sp)
     ac0:	df000815 	stw	fp,32(sp)
     ac4:	ddc00715 	stw	r23,28(sp)
     ac8:	dd800615 	stw	r22,24(sp)
     acc:	dd400515 	stw	r21,20(sp)
     ad0:	dd000415 	stw	r20,16(sp)
     ad4:	dcc00315 	stw	r19,12(sp)
     ad8:	dc400115 	stw	r17,4(sp)
     adc:	dc000015 	stw	r16,0(sp)
     ae0:	2025883a 	mov	r18,r4
     ae4:	10c01236 	bltu	r2,r3,b30 <_malloc_r+0x84>
     ae8:	04400404 	movi	r17,16
     aec:	8940142e 	bgeu	r17,r5,b40 <_malloc_r+0x94>
     af0:	00800304 	movi	r2,12
     af4:	0007883a 	mov	r3,zero
     af8:	90800015 	stw	r2,0(r18)
     afc:	1805883a 	mov	r2,r3
     b00:	dfc00917 	ldw	ra,36(sp)
     b04:	df000817 	ldw	fp,32(sp)
     b08:	ddc00717 	ldw	r23,28(sp)
     b0c:	dd800617 	ldw	r22,24(sp)
     b10:	dd400517 	ldw	r21,20(sp)
     b14:	dd000417 	ldw	r20,16(sp)
     b18:	dcc00317 	ldw	r19,12(sp)
     b1c:	dc800217 	ldw	r18,8(sp)
     b20:	dc400117 	ldw	r17,4(sp)
     b24:	dc000017 	ldw	r16,0(sp)
     b28:	dec00a04 	addi	sp,sp,40
     b2c:	f800283a 	ret
     b30:	00bffe04 	movi	r2,-8
     b34:	18a2703a 	and	r17,r3,r2
     b38:	883fed16 	blt	r17,zero,af0 <_malloc_r+0x44>
     b3c:	897fec36 	bltu	r17,r5,af0 <_malloc_r+0x44>
     b40:	9009883a 	mov	r4,r18
     b44:	00019480 	call	1948 <__malloc_lock>
     b48:	00807dc4 	movi	r2,503
     b4c:	14402b2e 	bgeu	r2,r17,bfc <_malloc_r+0x150>
     b50:	8806d27a 	srli	r3,r17,9
     b54:	18003f1e 	bne	r3,zero,c54 <_malloc_r+0x1a8>
     b58:	880cd0fa 	srli	r6,r17,3
     b5c:	300490fa 	slli	r2,r6,3
     b60:	02c00034 	movhi	r11,0
     b64:	5ad60304 	addi	r11,r11,22540
     b68:	12cb883a 	add	r5,r2,r11
     b6c:	2c000317 	ldw	r16,12(r5)
     b70:	580f883a 	mov	r7,r11
     b74:	2c00041e 	bne	r5,r16,b88 <_malloc_r+0xdc>
     b78:	00000a06 	br	ba4 <_malloc_r+0xf8>
     b7c:	1800860e 	bge	r3,zero,d98 <_malloc_r+0x2ec>
     b80:	84000317 	ldw	r16,12(r16)
     b84:	2c000726 	beq	r5,r16,ba4 <_malloc_r+0xf8>
     b88:	80800117 	ldw	r2,4(r16)
     b8c:	00ffff04 	movi	r3,-4
     b90:	10c8703a 	and	r4,r2,r3
     b94:	2447c83a 	sub	r3,r4,r17
     b98:	008003c4 	movi	r2,15
     b9c:	10fff70e 	bge	r2,r3,b7c <_malloc_r+0xd0>
     ba0:	31bfffc4 	addi	r6,r6,-1
     ba4:	32400044 	addi	r9,r6,1
     ba8:	02800034 	movhi	r10,0
     bac:	52960504 	addi	r10,r10,22548
     bb0:	54000217 	ldw	r16,8(r10)
     bb4:	8280a026 	beq	r16,r10,e38 <_malloc_r+0x38c>
     bb8:	80800117 	ldw	r2,4(r16)
     bbc:	00ffff04 	movi	r3,-4
     bc0:	10ca703a 	and	r5,r2,r3
     bc4:	2c4dc83a 	sub	r6,r5,r17
     bc8:	008003c4 	movi	r2,15
     bcc:	11808316 	blt	r2,r6,ddc <_malloc_r+0x330>
     bd0:	52800315 	stw	r10,12(r10)
     bd4:	52800215 	stw	r10,8(r10)
     bd8:	30002916 	blt	r6,zero,c80 <_malloc_r+0x1d4>
     bdc:	8147883a 	add	r3,r16,r5
     be0:	18800117 	ldw	r2,4(r3)
     be4:	9009883a 	mov	r4,r18
     be8:	10800054 	ori	r2,r2,1
     bec:	18800115 	stw	r2,4(r3)
     bf0:	00019680 	call	1968 <__malloc_unlock>
     bf4:	80c00204 	addi	r3,r16,8
     bf8:	003fc006 	br	afc <_malloc_r+0x50>
     bfc:	02c00034 	movhi	r11,0
     c00:	5ad60304 	addi	r11,r11,22540
     c04:	8ac5883a 	add	r2,r17,r11
     c08:	14000317 	ldw	r16,12(r2)
     c0c:	580f883a 	mov	r7,r11
     c10:	8806d0fa 	srli	r3,r17,3
     c14:	14006c26 	beq	r2,r16,dc8 <_malloc_r+0x31c>
     c18:	80c00117 	ldw	r3,4(r16)
     c1c:	00bfff04 	movi	r2,-4
     c20:	81800317 	ldw	r6,12(r16)
     c24:	1886703a 	and	r3,r3,r2
     c28:	80c7883a 	add	r3,r16,r3
     c2c:	18800117 	ldw	r2,4(r3)
     c30:	81400217 	ldw	r5,8(r16)
     c34:	9009883a 	mov	r4,r18
     c38:	10800054 	ori	r2,r2,1
     c3c:	18800115 	stw	r2,4(r3)
     c40:	31400215 	stw	r5,8(r6)
     c44:	29800315 	stw	r6,12(r5)
     c48:	00019680 	call	1968 <__malloc_unlock>
     c4c:	80c00204 	addi	r3,r16,8
     c50:	003faa06 	br	afc <_malloc_r+0x50>
     c54:	00800104 	movi	r2,4
     c58:	10c0052e 	bgeu	r2,r3,c70 <_malloc_r+0x1c4>
     c5c:	00800504 	movi	r2,20
     c60:	10c07836 	bltu	r2,r3,e44 <_malloc_r+0x398>
     c64:	198016c4 	addi	r6,r3,91
     c68:	300490fa 	slli	r2,r6,3
     c6c:	003fbc06 	br	b60 <_malloc_r+0xb4>
     c70:	8804d1ba 	srli	r2,r17,6
     c74:	11800e04 	addi	r6,r2,56
     c78:	300490fa 	slli	r2,r6,3
     c7c:	003fb806 	br	b60 <_malloc_r+0xb4>
     c80:	00807fc4 	movi	r2,511
     c84:	1140bb36 	bltu	r2,r5,f74 <_malloc_r+0x4c8>
     c88:	2806d0fa 	srli	r3,r5,3
     c8c:	573ffe04 	addi	fp,r10,-8
     c90:	00800044 	movi	r2,1
     c94:	180890fa 	slli	r4,r3,3
     c98:	1807d0ba 	srai	r3,r3,2
     c9c:	e1c00117 	ldw	r7,4(fp)
     ca0:	5909883a 	add	r4,r11,r4
     ca4:	21400217 	ldw	r5,8(r4)
     ca8:	10c4983a 	sll	r2,r2,r3
     cac:	81000315 	stw	r4,12(r16)
     cb0:	81400215 	stw	r5,8(r16)
     cb4:	388eb03a 	or	r7,r7,r2
     cb8:	2c000315 	stw	r16,12(r5)
     cbc:	24000215 	stw	r16,8(r4)
     cc0:	e1c00115 	stw	r7,4(fp)
     cc4:	4807883a 	mov	r3,r9
     cc8:	4800cd16 	blt	r9,zero,1000 <_malloc_r+0x554>
     ccc:	1807d0ba 	srai	r3,r3,2
     cd0:	00800044 	movi	r2,1
     cd4:	10c8983a 	sll	r4,r2,r3
     cd8:	39004436 	bltu	r7,r4,dec <_malloc_r+0x340>
     cdc:	21c4703a 	and	r2,r4,r7
     ce0:	10000a1e 	bne	r2,zero,d0c <_malloc_r+0x260>
     ce4:	2109883a 	add	r4,r4,r4
     ce8:	00bfff04 	movi	r2,-4
     cec:	4884703a 	and	r2,r9,r2
     cf0:	3906703a 	and	r3,r7,r4
     cf4:	12400104 	addi	r9,r2,4
     cf8:	1800041e 	bne	r3,zero,d0c <_malloc_r+0x260>
     cfc:	2109883a 	add	r4,r4,r4
     d00:	3904703a 	and	r2,r7,r4
     d04:	4a400104 	addi	r9,r9,4
     d08:	103ffc26 	beq	r2,zero,cfc <_malloc_r+0x250>
     d0c:	480490fa 	slli	r2,r9,3
     d10:	4819883a 	mov	r12,r9
     d14:	023fff04 	movi	r8,-4
     d18:	589b883a 	add	r13,r11,r2
     d1c:	6807883a 	mov	r3,r13
     d20:	014003c4 	movi	r5,15
     d24:	1c000317 	ldw	r16,12(r3)
     d28:	1c00041e 	bne	r3,r16,d3c <_malloc_r+0x290>
     d2c:	0000a706 	br	fcc <_malloc_r+0x520>
     d30:	3000ab0e 	bge	r6,zero,fe0 <_malloc_r+0x534>
     d34:	84000317 	ldw	r16,12(r16)
     d38:	1c00a426 	beq	r3,r16,fcc <_malloc_r+0x520>
     d3c:	80800117 	ldw	r2,4(r16)
     d40:	1204703a 	and	r2,r2,r8
     d44:	144dc83a 	sub	r6,r2,r17
     d48:	29bff90e 	bge	r5,r6,d30 <_malloc_r+0x284>
     d4c:	81000317 	ldw	r4,12(r16)
     d50:	80c00217 	ldw	r3,8(r16)
     d54:	89400054 	ori	r5,r17,1
     d58:	8445883a 	add	r2,r16,r17
     d5c:	20c00215 	stw	r3,8(r4)
     d60:	19000315 	stw	r4,12(r3)
     d64:	81400115 	stw	r5,4(r16)
     d68:	1187883a 	add	r3,r2,r6
     d6c:	31000054 	ori	r4,r6,1
     d70:	50800315 	stw	r2,12(r10)
     d74:	50800215 	stw	r2,8(r10)
     d78:	19800015 	stw	r6,0(r3)
     d7c:	11000115 	stw	r4,4(r2)
     d80:	12800215 	stw	r10,8(r2)
     d84:	12800315 	stw	r10,12(r2)
     d88:	9009883a 	mov	r4,r18
     d8c:	00019680 	call	1968 <__malloc_unlock>
     d90:	80c00204 	addi	r3,r16,8
     d94:	003f5906 	br	afc <_malloc_r+0x50>
     d98:	8109883a 	add	r4,r16,r4
     d9c:	20800117 	ldw	r2,4(r4)
     da0:	80c00217 	ldw	r3,8(r16)
     da4:	81400317 	ldw	r5,12(r16)
     da8:	10800054 	ori	r2,r2,1
     dac:	20800115 	stw	r2,4(r4)
     db0:	28c00215 	stw	r3,8(r5)
     db4:	19400315 	stw	r5,12(r3)
     db8:	9009883a 	mov	r4,r18
     dbc:	00019680 	call	1968 <__malloc_unlock>
     dc0:	80c00204 	addi	r3,r16,8
     dc4:	003f4d06 	br	afc <_malloc_r+0x50>
     dc8:	80800204 	addi	r2,r16,8
     dcc:	14000317 	ldw	r16,12(r2)
     dd0:	143f911e 	bne	r2,r16,c18 <_malloc_r+0x16c>
     dd4:	1a400084 	addi	r9,r3,2
     dd8:	003f7306 	br	ba8 <_malloc_r+0xfc>
     ddc:	88c00054 	ori	r3,r17,1
     de0:	8445883a 	add	r2,r16,r17
     de4:	80c00115 	stw	r3,4(r16)
     de8:	003fdf06 	br	d68 <_malloc_r+0x2bc>
     dec:	e4000217 	ldw	r16,8(fp)
     df0:	00bfff04 	movi	r2,-4
     df4:	80c00117 	ldw	r3,4(r16)
     df8:	802d883a 	mov	r22,r16
     dfc:	18aa703a 	and	r21,r3,r2
     e00:	ac401636 	bltu	r21,r17,e5c <_malloc_r+0x3b0>
     e04:	ac49c83a 	sub	r4,r21,r17
     e08:	008003c4 	movi	r2,15
     e0c:	1100130e 	bge	r2,r4,e5c <_malloc_r+0x3b0>
     e10:	88800054 	ori	r2,r17,1
     e14:	8447883a 	add	r3,r16,r17
     e18:	80800115 	stw	r2,4(r16)
     e1c:	20800054 	ori	r2,r4,1
     e20:	18800115 	stw	r2,4(r3)
     e24:	e0c00215 	stw	r3,8(fp)
     e28:	9009883a 	mov	r4,r18
     e2c:	00019680 	call	1968 <__malloc_unlock>
     e30:	80c00204 	addi	r3,r16,8
     e34:	003f3106 	br	afc <_malloc_r+0x50>
     e38:	39c00117 	ldw	r7,4(r7)
     e3c:	573ffe04 	addi	fp,r10,-8
     e40:	003fa006 	br	cc4 <_malloc_r+0x218>
     e44:	00801504 	movi	r2,84
     e48:	10c06736 	bltu	r2,r3,fe8 <_malloc_r+0x53c>
     e4c:	8804d33a 	srli	r2,r17,12
     e50:	11801b84 	addi	r6,r2,110
     e54:	300490fa 	slli	r2,r6,3
     e58:	003f4106 	br	b60 <_malloc_r+0xb4>
     e5c:	d0a6a317 	ldw	r2,-25972(gp)
     e60:	d0e00117 	ldw	r3,-32764(gp)
     e64:	053fffc4 	movi	r20,-1
     e68:	10800404 	addi	r2,r2,16
     e6c:	88a7883a 	add	r19,r17,r2
     e70:	1d000326 	beq	r3,r20,e80 <_malloc_r+0x3d4>
     e74:	98c3ffc4 	addi	r3,r19,4095
     e78:	00bc0004 	movi	r2,-4096
     e7c:	18a6703a 	and	r19,r3,r2
     e80:	9009883a 	mov	r4,r18
     e84:	980b883a 	mov	r5,r19
     e88:	00011ec0 	call	11ec <_sbrk_r>
     e8c:	1009883a 	mov	r4,r2
     e90:	15000426 	beq	r2,r20,ea4 <_malloc_r+0x3f8>
     e94:	854b883a 	add	r5,r16,r21
     e98:	1029883a 	mov	r20,r2
     e9c:	11405a2e 	bgeu	r2,r5,1008 <_malloc_r+0x55c>
     ea0:	87000c26 	beq	r16,fp,ed4 <_malloc_r+0x428>
     ea4:	e4000217 	ldw	r16,8(fp)
     ea8:	80c00117 	ldw	r3,4(r16)
     eac:	00bfff04 	movi	r2,-4
     eb0:	1884703a 	and	r2,r3,r2
     eb4:	14400336 	bltu	r2,r17,ec4 <_malloc_r+0x418>
     eb8:	1449c83a 	sub	r4,r2,r17
     ebc:	008003c4 	movi	r2,15
     ec0:	113fd316 	blt	r2,r4,e10 <_malloc_r+0x364>
     ec4:	9009883a 	mov	r4,r18
     ec8:	00019680 	call	1968 <__malloc_unlock>
     ecc:	0007883a 	mov	r3,zero
     ed0:	003f0a06 	br	afc <_malloc_r+0x50>
     ed4:	05c00074 	movhi	r23,1
     ed8:	bde33404 	addi	r23,r23,-29488
     edc:	b8800017 	ldw	r2,0(r23)
     ee0:	988d883a 	add	r6,r19,r2
     ee4:	b9800015 	stw	r6,0(r23)
     ee8:	d0e00117 	ldw	r3,-32764(gp)
     eec:	00bfffc4 	movi	r2,-1
     ef0:	18808e26 	beq	r3,r2,112c <_malloc_r+0x680>
     ef4:	2145c83a 	sub	r2,r4,r5
     ef8:	3085883a 	add	r2,r6,r2
     efc:	b8800015 	stw	r2,0(r23)
     f00:	20c001cc 	andi	r3,r4,7
     f04:	18005f1e 	bne	r3,zero,1084 <_malloc_r+0x5d8>
     f08:	000b883a 	mov	r5,zero
     f0c:	a4c5883a 	add	r2,r20,r19
     f10:	1083ffcc 	andi	r2,r2,4095
     f14:	00c40004 	movi	r3,4096
     f18:	1887c83a 	sub	r3,r3,r2
     f1c:	28e7883a 	add	r19,r5,r3
     f20:	9009883a 	mov	r4,r18
     f24:	980b883a 	mov	r5,r19
     f28:	00011ec0 	call	11ec <_sbrk_r>
     f2c:	1007883a 	mov	r3,r2
     f30:	00bfffc4 	movi	r2,-1
     f34:	18807a26 	beq	r3,r2,1120 <_malloc_r+0x674>
     f38:	1d05c83a 	sub	r2,r3,r20
     f3c:	9885883a 	add	r2,r19,r2
     f40:	10c00054 	ori	r3,r2,1
     f44:	b8800017 	ldw	r2,0(r23)
     f48:	a021883a 	mov	r16,r20
     f4c:	a0c00115 	stw	r3,4(r20)
     f50:	9885883a 	add	r2,r19,r2
     f54:	b8800015 	stw	r2,0(r23)
     f58:	e5000215 	stw	r20,8(fp)
     f5c:	b7003626 	beq	r22,fp,1038 <_malloc_r+0x58c>
     f60:	018003c4 	movi	r6,15
     f64:	35404b36 	bltu	r6,r21,1094 <_malloc_r+0x5e8>
     f68:	00800044 	movi	r2,1
     f6c:	a0800115 	stw	r2,4(r20)
     f70:	003fcd06 	br	ea8 <_malloc_r+0x3fc>
     f74:	2808d27a 	srli	r4,r5,9
     f78:	2000371e 	bne	r4,zero,1058 <_malloc_r+0x5ac>
     f7c:	2808d0fa 	srli	r4,r5,3
     f80:	200690fa 	slli	r3,r4,3
     f84:	1ad1883a 	add	r8,r3,r11
     f88:	41800217 	ldw	r6,8(r8)
     f8c:	41805b26 	beq	r8,r6,10fc <_malloc_r+0x650>
     f90:	30800117 	ldw	r2,4(r6)
     f94:	00ffff04 	movi	r3,-4
     f98:	10c4703a 	and	r2,r2,r3
     f9c:	2880022e 	bgeu	r5,r2,fa8 <_malloc_r+0x4fc>
     fa0:	31800217 	ldw	r6,8(r6)
     fa4:	41bffa1e 	bne	r8,r6,f90 <_malloc_r+0x4e4>
     fa8:	32000317 	ldw	r8,12(r6)
     fac:	39c00117 	ldw	r7,4(r7)
     fb0:	82000315 	stw	r8,12(r16)
     fb4:	81800215 	stw	r6,8(r16)
     fb8:	07000034 	movhi	fp,0
     fbc:	e7160304 	addi	fp,fp,22540
     fc0:	34000315 	stw	r16,12(r6)
     fc4:	44000215 	stw	r16,8(r8)
     fc8:	003f3e06 	br	cc4 <_malloc_r+0x218>
     fcc:	63000044 	addi	r12,r12,1
     fd0:	608000cc 	andi	r2,r12,3
     fd4:	10005d26 	beq	r2,zero,114c <_malloc_r+0x6a0>
     fd8:	18c00204 	addi	r3,r3,8
     fdc:	003f5106 	br	d24 <_malloc_r+0x278>
     fe0:	8089883a 	add	r4,r16,r2
     fe4:	003f6d06 	br	d9c <_malloc_r+0x2f0>
     fe8:	00805504 	movi	r2,340
     fec:	10c02036 	bltu	r2,r3,1070 <_malloc_r+0x5c4>
     ff0:	8804d3fa 	srli	r2,r17,15
     ff4:	11801dc4 	addi	r6,r2,119
     ff8:	300490fa 	slli	r2,r6,3
     ffc:	003ed806 	br	b60 <_malloc_r+0xb4>
    1000:	48c000c4 	addi	r3,r9,3
    1004:	003f3106 	br	ccc <_malloc_r+0x220>
    1008:	05c00074 	movhi	r23,1
    100c:	bde33404 	addi	r23,r23,-29488
    1010:	b8800017 	ldw	r2,0(r23)
    1014:	988d883a 	add	r6,r19,r2
    1018:	b9800015 	stw	r6,0(r23)
    101c:	293fb21e 	bne	r5,r4,ee8 <_malloc_r+0x43c>
    1020:	2083ffcc 	andi	r2,r4,4095
    1024:	103fb01e 	bne	r2,zero,ee8 <_malloc_r+0x43c>
    1028:	e4000217 	ldw	r16,8(fp)
    102c:	9d45883a 	add	r2,r19,r21
    1030:	10800054 	ori	r2,r2,1
    1034:	80800115 	stw	r2,4(r16)
    1038:	b8c00017 	ldw	r3,0(r23)
    103c:	d0a6a417 	ldw	r2,-25968(gp)
    1040:	10c0012e 	bgeu	r2,r3,1048 <_malloc_r+0x59c>
    1044:	d0e6a415 	stw	r3,-25968(gp)
    1048:	d0a6a517 	ldw	r2,-25964(gp)
    104c:	10ff962e 	bgeu	r2,r3,ea8 <_malloc_r+0x3fc>
    1050:	d0e6a515 	stw	r3,-25964(gp)
    1054:	003f9406 	br	ea8 <_malloc_r+0x3fc>
    1058:	00800104 	movi	r2,4
    105c:	11001e36 	bltu	r2,r4,10d8 <_malloc_r+0x62c>
    1060:	2804d1ba 	srli	r2,r5,6
    1064:	11000e04 	addi	r4,r2,56
    1068:	200690fa 	slli	r3,r4,3
    106c:	003fc506 	br	f84 <_malloc_r+0x4d8>
    1070:	00815504 	movi	r2,1364
    1074:	10c01d2e 	bgeu	r2,r3,10ec <_malloc_r+0x640>
    1078:	01801f84 	movi	r6,126
    107c:	0080fc04 	movi	r2,1008
    1080:	003eb706 	br	b60 <_malloc_r+0xb4>
    1084:	00800204 	movi	r2,8
    1088:	10cbc83a 	sub	r5,r2,r3
    108c:	2169883a 	add	r20,r4,r5
    1090:	003f9e06 	br	f0c <_malloc_r+0x460>
    1094:	00bffe04 	movi	r2,-8
    1098:	a93ffd04 	addi	r4,r21,-12
    109c:	2088703a 	and	r4,r4,r2
    10a0:	b10b883a 	add	r5,r22,r4
    10a4:	00c00144 	movi	r3,5
    10a8:	28c00215 	stw	r3,8(r5)
    10ac:	28c00115 	stw	r3,4(r5)
    10b0:	b0800117 	ldw	r2,4(r22)
    10b4:	1080004c 	andi	r2,r2,1
    10b8:	2084b03a 	or	r2,r4,r2
    10bc:	b0800115 	stw	r2,4(r22)
    10c0:	313fdd2e 	bgeu	r6,r4,1038 <_malloc_r+0x58c>
    10c4:	b1400204 	addi	r5,r22,8
    10c8:	9009883a 	mov	r4,r18
    10cc:	00013880 	call	1388 <_free_r>
    10d0:	e4000217 	ldw	r16,8(fp)
    10d4:	003fd806 	br	1038 <_malloc_r+0x58c>
    10d8:	00800504 	movi	r2,20
    10dc:	11001536 	bltu	r2,r4,1134 <_malloc_r+0x688>
    10e0:	210016c4 	addi	r4,r4,91
    10e4:	200690fa 	slli	r3,r4,3
    10e8:	003fa606 	br	f84 <_malloc_r+0x4d8>
    10ec:	8804d4ba 	srli	r2,r17,18
    10f0:	11801f04 	addi	r6,r2,124
    10f4:	300490fa 	slli	r2,r6,3
    10f8:	003e9906 	br	b60 <_malloc_r+0xb4>
    10fc:	2009d0ba 	srai	r4,r4,2
    1100:	01400034 	movhi	r5,0
    1104:	29560304 	addi	r5,r5,22540
    1108:	00c00044 	movi	r3,1
    110c:	28800117 	ldw	r2,4(r5)
    1110:	1906983a 	sll	r3,r3,r4
    1114:	10c4b03a 	or	r2,r2,r3
    1118:	28800115 	stw	r2,4(r5)
    111c:	003fa306 	br	fac <_malloc_r+0x500>
    1120:	0027883a 	mov	r19,zero
    1124:	00c00044 	movi	r3,1
    1128:	003f8606 	br	f44 <_malloc_r+0x498>
    112c:	d1200115 	stw	r4,-32764(gp)
    1130:	003f7306 	br	f00 <_malloc_r+0x454>
    1134:	00801504 	movi	r2,84
    1138:	11001936 	bltu	r2,r4,11a0 <_malloc_r+0x6f4>
    113c:	2804d33a 	srli	r2,r5,12
    1140:	11001b84 	addi	r4,r2,110
    1144:	200690fa 	slli	r3,r4,3
    1148:	003f8e06 	br	f84 <_malloc_r+0x4d8>
    114c:	480b883a 	mov	r5,r9
    1150:	6807883a 	mov	r3,r13
    1154:	288000cc 	andi	r2,r5,3
    1158:	18fffe04 	addi	r3,r3,-8
    115c:	297fffc4 	addi	r5,r5,-1
    1160:	10001526 	beq	r2,zero,11b8 <_malloc_r+0x70c>
    1164:	18800217 	ldw	r2,8(r3)
    1168:	10fffa26 	beq	r2,r3,1154 <_malloc_r+0x6a8>
    116c:	2109883a 	add	r4,r4,r4
    1170:	393f1e36 	bltu	r7,r4,dec <_malloc_r+0x340>
    1174:	203f1d26 	beq	r4,zero,dec <_malloc_r+0x340>
    1178:	21c4703a 	and	r2,r4,r7
    117c:	10000226 	beq	r2,zero,1188 <_malloc_r+0x6dc>
    1180:	6013883a 	mov	r9,r12
    1184:	003ee106 	br	d0c <_malloc_r+0x260>
    1188:	2109883a 	add	r4,r4,r4
    118c:	3904703a 	and	r2,r7,r4
    1190:	63000104 	addi	r12,r12,4
    1194:	103ffc26 	beq	r2,zero,1188 <_malloc_r+0x6dc>
    1198:	6013883a 	mov	r9,r12
    119c:	003edb06 	br	d0c <_malloc_r+0x260>
    11a0:	00805504 	movi	r2,340
    11a4:	11000836 	bltu	r2,r4,11c8 <_malloc_r+0x71c>
    11a8:	2804d3fa 	srli	r2,r5,15
    11ac:	11001dc4 	addi	r4,r2,119
    11b0:	200690fa 	slli	r3,r4,3
    11b4:	003f7306 	br	f84 <_malloc_r+0x4d8>
    11b8:	0104303a 	nor	r2,zero,r4
    11bc:	388e703a 	and	r7,r7,r2
    11c0:	e1c00115 	stw	r7,4(fp)
    11c4:	003fe906 	br	116c <_malloc_r+0x6c0>
    11c8:	00815504 	movi	r2,1364
    11cc:	1100032e 	bgeu	r2,r4,11dc <_malloc_r+0x730>
    11d0:	01001f84 	movi	r4,126
    11d4:	00c0fc04 	movi	r3,1008
    11d8:	003f6a06 	br	f84 <_malloc_r+0x4d8>
    11dc:	2804d4ba 	srli	r2,r5,18
    11e0:	11001f04 	addi	r4,r2,124
    11e4:	200690fa 	slli	r3,r4,3
    11e8:	003f6606 	br	f84 <_malloc_r+0x4d8>

000011ec <_sbrk_r>:
    11ec:	defffd04 	addi	sp,sp,-12
    11f0:	dc000015 	stw	r16,0(sp)
    11f4:	04000074 	movhi	r16,1
    11f8:	84232d04 	addi	r16,r16,-29516
    11fc:	dc400115 	stw	r17,4(sp)
    1200:	80000015 	stw	zero,0(r16)
    1204:	2023883a 	mov	r17,r4
    1208:	2809883a 	mov	r4,r5
    120c:	dfc00215 	stw	ra,8(sp)
    1210:	0001c200 	call	1c20 <sbrk>
    1214:	1007883a 	mov	r3,r2
    1218:	00bfffc4 	movi	r2,-1
    121c:	18800626 	beq	r3,r2,1238 <_sbrk_r+0x4c>
    1220:	1805883a 	mov	r2,r3
    1224:	dfc00217 	ldw	ra,8(sp)
    1228:	dc400117 	ldw	r17,4(sp)
    122c:	dc000017 	ldw	r16,0(sp)
    1230:	dec00304 	addi	sp,sp,12
    1234:	f800283a 	ret
    1238:	80800017 	ldw	r2,0(r16)
    123c:	103ff826 	beq	r2,zero,1220 <_sbrk_r+0x34>
    1240:	88800015 	stw	r2,0(r17)
    1244:	1805883a 	mov	r2,r3
    1248:	dfc00217 	ldw	ra,8(sp)
    124c:	dc400117 	ldw	r17,4(sp)
    1250:	dc000017 	ldw	r16,0(sp)
    1254:	dec00304 	addi	sp,sp,12
    1258:	f800283a 	ret

0000125c <_malloc_trim_r>:
    125c:	defffb04 	addi	sp,sp,-20
    1260:	dcc00315 	stw	r19,12(sp)
    1264:	04c00034 	movhi	r19,0
    1268:	9cd60304 	addi	r19,r19,22540
    126c:	dc800215 	stw	r18,8(sp)
    1270:	dc400115 	stw	r17,4(sp)
    1274:	dc000015 	stw	r16,0(sp)
    1278:	2823883a 	mov	r17,r5
    127c:	2025883a 	mov	r18,r4
    1280:	dfc00415 	stw	ra,16(sp)
    1284:	00019480 	call	1948 <__malloc_lock>
    1288:	98800217 	ldw	r2,8(r19)
    128c:	9009883a 	mov	r4,r18
    1290:	000b883a 	mov	r5,zero
    1294:	10c00117 	ldw	r3,4(r2)
    1298:	00bfff04 	movi	r2,-4
    129c:	18a0703a 	and	r16,r3,r2
    12a0:	8463c83a 	sub	r17,r16,r17
    12a4:	8c43fbc4 	addi	r17,r17,4079
    12a8:	8822d33a 	srli	r17,r17,12
    12ac:	0083ffc4 	movi	r2,4095
    12b0:	8c7fffc4 	addi	r17,r17,-1
    12b4:	8822933a 	slli	r17,r17,12
    12b8:	1440060e 	bge	r2,r17,12d4 <_malloc_trim_r+0x78>
    12bc:	00011ec0 	call	11ec <_sbrk_r>
    12c0:	98c00217 	ldw	r3,8(r19)
    12c4:	9009883a 	mov	r4,r18
    12c8:	044bc83a 	sub	r5,zero,r17
    12cc:	80c7883a 	add	r3,r16,r3
    12d0:	10c00926 	beq	r2,r3,12f8 <_malloc_trim_r+0x9c>
    12d4:	00019680 	call	1968 <__malloc_unlock>
    12d8:	0005883a 	mov	r2,zero
    12dc:	dfc00417 	ldw	ra,16(sp)
    12e0:	dcc00317 	ldw	r19,12(sp)
    12e4:	dc800217 	ldw	r18,8(sp)
    12e8:	dc400117 	ldw	r17,4(sp)
    12ec:	dc000017 	ldw	r16,0(sp)
    12f0:	dec00504 	addi	sp,sp,20
    12f4:	f800283a 	ret
    12f8:	9009883a 	mov	r4,r18
    12fc:	00011ec0 	call	11ec <_sbrk_r>
    1300:	844dc83a 	sub	r6,r16,r17
    1304:	00ffffc4 	movi	r3,-1
    1308:	9009883a 	mov	r4,r18
    130c:	000b883a 	mov	r5,zero
    1310:	01c00074 	movhi	r7,1
    1314:	39e33404 	addi	r7,r7,-29488
    1318:	31800054 	ori	r6,r6,1
    131c:	10c00926 	beq	r2,r3,1344 <_malloc_trim_r+0xe8>
    1320:	38800017 	ldw	r2,0(r7)
    1324:	98c00217 	ldw	r3,8(r19)
    1328:	9009883a 	mov	r4,r18
    132c:	1445c83a 	sub	r2,r2,r17
    1330:	38800015 	stw	r2,0(r7)
    1334:	19800115 	stw	r6,4(r3)
    1338:	00019680 	call	1968 <__malloc_unlock>
    133c:	00800044 	movi	r2,1
    1340:	003fe606 	br	12dc <_malloc_trim_r+0x80>
    1344:	00011ec0 	call	11ec <_sbrk_r>
    1348:	99800217 	ldw	r6,8(r19)
    134c:	100f883a 	mov	r7,r2
    1350:	9009883a 	mov	r4,r18
    1354:	1187c83a 	sub	r3,r2,r6
    1358:	008003c4 	movi	r2,15
    135c:	19400054 	ori	r5,r3,1
    1360:	10ffdc0e 	bge	r2,r3,12d4 <_malloc_trim_r+0x78>
    1364:	00800034 	movhi	r2,0
    1368:	109c8804 	addi	r2,r2,29216
    136c:	10c00017 	ldw	r3,0(r2)
    1370:	00800074 	movhi	r2,1
    1374:	10a33404 	addi	r2,r2,-29488
    1378:	31400115 	stw	r5,4(r6)
    137c:	38c7c83a 	sub	r3,r7,r3
    1380:	10c00015 	stw	r3,0(r2)
    1384:	003fd306 	br	12d4 <_malloc_trim_r+0x78>

00001388 <_free_r>:
    1388:	defffd04 	addi	sp,sp,-12
    138c:	dc400115 	stw	r17,4(sp)
    1390:	dc000015 	stw	r16,0(sp)
    1394:	dfc00215 	stw	ra,8(sp)
    1398:	2821883a 	mov	r16,r5
    139c:	2023883a 	mov	r17,r4
    13a0:	28005a26 	beq	r5,zero,150c <_free_r+0x184>
    13a4:	00019480 	call	1948 <__malloc_lock>
    13a8:	823ffe04 	addi	r8,r16,-8
    13ac:	41400117 	ldw	r5,4(r8)
    13b0:	00bfff84 	movi	r2,-2
    13b4:	02800034 	movhi	r10,0
    13b8:	52960304 	addi	r10,r10,22540
    13bc:	288e703a 	and	r7,r5,r2
    13c0:	41cd883a 	add	r6,r8,r7
    13c4:	30c00117 	ldw	r3,4(r6)
    13c8:	51000217 	ldw	r4,8(r10)
    13cc:	00bfff04 	movi	r2,-4
    13d0:	1892703a 	and	r9,r3,r2
    13d4:	5017883a 	mov	r11,r10
    13d8:	31006726 	beq	r6,r4,1578 <_free_r+0x1f0>
    13dc:	2880004c 	andi	r2,r5,1
    13e0:	1005003a 	cmpeq	r2,r2,zero
    13e4:	32400115 	stw	r9,4(r6)
    13e8:	10001a1e 	bne	r2,zero,1454 <_free_r+0xcc>
    13ec:	000b883a 	mov	r5,zero
    13f0:	3247883a 	add	r3,r6,r9
    13f4:	18800117 	ldw	r2,4(r3)
    13f8:	1080004c 	andi	r2,r2,1
    13fc:	1000231e 	bne	r2,zero,148c <_free_r+0x104>
    1400:	280ac03a 	cmpne	r5,r5,zero
    1404:	3a4f883a 	add	r7,r7,r9
    1408:	2800451e 	bne	r5,zero,1520 <_free_r+0x198>
    140c:	31000217 	ldw	r4,8(r6)
    1410:	00800034 	movhi	r2,0
    1414:	10960504 	addi	r2,r2,22548
    1418:	20807b26 	beq	r4,r2,1608 <_free_r+0x280>
    141c:	30800317 	ldw	r2,12(r6)
    1420:	3a07883a 	add	r3,r7,r8
    1424:	19c00015 	stw	r7,0(r3)
    1428:	11000215 	stw	r4,8(r2)
    142c:	20800315 	stw	r2,12(r4)
    1430:	38800054 	ori	r2,r7,1
    1434:	40800115 	stw	r2,4(r8)
    1438:	28001a26 	beq	r5,zero,14a4 <_free_r+0x11c>
    143c:	8809883a 	mov	r4,r17
    1440:	dfc00217 	ldw	ra,8(sp)
    1444:	dc400117 	ldw	r17,4(sp)
    1448:	dc000017 	ldw	r16,0(sp)
    144c:	dec00304 	addi	sp,sp,12
    1450:	00019681 	jmpi	1968 <__malloc_unlock>
    1454:	80bffe17 	ldw	r2,-8(r16)
    1458:	50c00204 	addi	r3,r10,8
    145c:	4091c83a 	sub	r8,r8,r2
    1460:	41000217 	ldw	r4,8(r8)
    1464:	388f883a 	add	r7,r7,r2
    1468:	20c06126 	beq	r4,r3,15f0 <_free_r+0x268>
    146c:	40800317 	ldw	r2,12(r8)
    1470:	3247883a 	add	r3,r6,r9
    1474:	000b883a 	mov	r5,zero
    1478:	11000215 	stw	r4,8(r2)
    147c:	20800315 	stw	r2,12(r4)
    1480:	18800117 	ldw	r2,4(r3)
    1484:	1080004c 	andi	r2,r2,1
    1488:	103fdd26 	beq	r2,zero,1400 <_free_r+0x78>
    148c:	38800054 	ori	r2,r7,1
    1490:	3a07883a 	add	r3,r7,r8
    1494:	280ac03a 	cmpne	r5,r5,zero
    1498:	40800115 	stw	r2,4(r8)
    149c:	19c00015 	stw	r7,0(r3)
    14a0:	283fe61e 	bne	r5,zero,143c <_free_r+0xb4>
    14a4:	00807fc4 	movi	r2,511
    14a8:	11c01f2e 	bgeu	r2,r7,1528 <_free_r+0x1a0>
    14ac:	3806d27a 	srli	r3,r7,9
    14b0:	1800481e 	bne	r3,zero,15d4 <_free_r+0x24c>
    14b4:	3804d0fa 	srli	r2,r7,3
    14b8:	100690fa 	slli	r3,r2,3
    14bc:	1acd883a 	add	r6,r3,r11
    14c0:	31400217 	ldw	r5,8(r6)
    14c4:	31405926 	beq	r6,r5,162c <_free_r+0x2a4>
    14c8:	28800117 	ldw	r2,4(r5)
    14cc:	00ffff04 	movi	r3,-4
    14d0:	10c4703a 	and	r2,r2,r3
    14d4:	3880022e 	bgeu	r7,r2,14e0 <_free_r+0x158>
    14d8:	29400217 	ldw	r5,8(r5)
    14dc:	317ffa1e 	bne	r6,r5,14c8 <_free_r+0x140>
    14e0:	29800317 	ldw	r6,12(r5)
    14e4:	41800315 	stw	r6,12(r8)
    14e8:	41400215 	stw	r5,8(r8)
    14ec:	8809883a 	mov	r4,r17
    14f0:	2a000315 	stw	r8,12(r5)
    14f4:	32000215 	stw	r8,8(r6)
    14f8:	dfc00217 	ldw	ra,8(sp)
    14fc:	dc400117 	ldw	r17,4(sp)
    1500:	dc000017 	ldw	r16,0(sp)
    1504:	dec00304 	addi	sp,sp,12
    1508:	00019681 	jmpi	1968 <__malloc_unlock>
    150c:	dfc00217 	ldw	ra,8(sp)
    1510:	dc400117 	ldw	r17,4(sp)
    1514:	dc000017 	ldw	r16,0(sp)
    1518:	dec00304 	addi	sp,sp,12
    151c:	f800283a 	ret
    1520:	31000217 	ldw	r4,8(r6)
    1524:	003fbd06 	br	141c <_free_r+0x94>
    1528:	3806d0fa 	srli	r3,r7,3
    152c:	00800044 	movi	r2,1
    1530:	51400117 	ldw	r5,4(r10)
    1534:	180890fa 	slli	r4,r3,3
    1538:	1807d0ba 	srai	r3,r3,2
    153c:	22c9883a 	add	r4,r4,r11
    1540:	21800217 	ldw	r6,8(r4)
    1544:	10c4983a 	sll	r2,r2,r3
    1548:	41000315 	stw	r4,12(r8)
    154c:	41800215 	stw	r6,8(r8)
    1550:	288ab03a 	or	r5,r5,r2
    1554:	22000215 	stw	r8,8(r4)
    1558:	8809883a 	mov	r4,r17
    155c:	51400115 	stw	r5,4(r10)
    1560:	32000315 	stw	r8,12(r6)
    1564:	dfc00217 	ldw	ra,8(sp)
    1568:	dc400117 	ldw	r17,4(sp)
    156c:	dc000017 	ldw	r16,0(sp)
    1570:	dec00304 	addi	sp,sp,12
    1574:	00019681 	jmpi	1968 <__malloc_unlock>
    1578:	2880004c 	andi	r2,r5,1
    157c:	3a4d883a 	add	r6,r7,r9
    1580:	1000071e 	bne	r2,zero,15a0 <_free_r+0x218>
    1584:	80bffe17 	ldw	r2,-8(r16)
    1588:	4091c83a 	sub	r8,r8,r2
    158c:	41000317 	ldw	r4,12(r8)
    1590:	40c00217 	ldw	r3,8(r8)
    1594:	308d883a 	add	r6,r6,r2
    1598:	20c00215 	stw	r3,8(r4)
    159c:	19000315 	stw	r4,12(r3)
    15a0:	00800034 	movhi	r2,0
    15a4:	109c8704 	addi	r2,r2,29212
    15a8:	11000017 	ldw	r4,0(r2)
    15ac:	30c00054 	ori	r3,r6,1
    15b0:	52000215 	stw	r8,8(r10)
    15b4:	40c00115 	stw	r3,4(r8)
    15b8:	313fa036 	bltu	r6,r4,143c <_free_r+0xb4>
    15bc:	00800074 	movhi	r2,1
    15c0:	10a32a04 	addi	r2,r2,-29528
    15c4:	11400017 	ldw	r5,0(r2)
    15c8:	8809883a 	mov	r4,r17
    15cc:	000125c0 	call	125c <_malloc_trim_r>
    15d0:	003f9a06 	br	143c <_free_r+0xb4>
    15d4:	00800104 	movi	r2,4
    15d8:	10c0072e 	bgeu	r2,r3,15f8 <_free_r+0x270>
    15dc:	00800504 	movi	r2,20
    15e0:	10c01936 	bltu	r2,r3,1648 <_free_r+0x2c0>
    15e4:	188016c4 	addi	r2,r3,91
    15e8:	100690fa 	slli	r3,r2,3
    15ec:	003fb306 	br	14bc <_free_r+0x134>
    15f0:	01400044 	movi	r5,1
    15f4:	003f7e06 	br	13f0 <_free_r+0x68>
    15f8:	3804d1ba 	srli	r2,r7,6
    15fc:	10800e04 	addi	r2,r2,56
    1600:	100690fa 	slli	r3,r2,3
    1604:	003fad06 	br	14bc <_free_r+0x134>
    1608:	22000315 	stw	r8,12(r4)
    160c:	22000215 	stw	r8,8(r4)
    1610:	3a05883a 	add	r2,r7,r8
    1614:	38c00054 	ori	r3,r7,1
    1618:	11c00015 	stw	r7,0(r2)
    161c:	41000215 	stw	r4,8(r8)
    1620:	40c00115 	stw	r3,4(r8)
    1624:	41000315 	stw	r4,12(r8)
    1628:	003f8406 	br	143c <_free_r+0xb4>
    162c:	1005d0ba 	srai	r2,r2,2
    1630:	00c00044 	movi	r3,1
    1634:	51000117 	ldw	r4,4(r10)
    1638:	1886983a 	sll	r3,r3,r2
    163c:	20c8b03a 	or	r4,r4,r3
    1640:	51000115 	stw	r4,4(r10)
    1644:	003fa706 	br	14e4 <_free_r+0x15c>
    1648:	00801504 	movi	r2,84
    164c:	10c00436 	bltu	r2,r3,1660 <_free_r+0x2d8>
    1650:	3804d33a 	srli	r2,r7,12
    1654:	10801b84 	addi	r2,r2,110
    1658:	100690fa 	slli	r3,r2,3
    165c:	003f9706 	br	14bc <_free_r+0x134>
    1660:	00805504 	movi	r2,340
    1664:	10c00436 	bltu	r2,r3,1678 <_free_r+0x2f0>
    1668:	3804d3fa 	srli	r2,r7,15
    166c:	10801dc4 	addi	r2,r2,119
    1670:	100690fa 	slli	r3,r2,3
    1674:	003f9106 	br	14bc <_free_r+0x134>
    1678:	00815504 	movi	r2,1364
    167c:	10c0032e 	bgeu	r2,r3,168c <_free_r+0x304>
    1680:	00801f84 	movi	r2,126
    1684:	00c0fc04 	movi	r3,1008
    1688:	003f8c06 	br	14bc <_free_r+0x134>
    168c:	3804d4ba 	srli	r2,r7,18
    1690:	10801f04 	addi	r2,r2,124
    1694:	100690fa 	slli	r3,r2,3
    1698:	003f8806 	br	14bc <_free_r+0x134>

0000169c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    169c:	defff404 	addi	sp,sp,-48
    16a0:	df000b15 	stw	fp,44(sp)
    16a4:	df000b04 	addi	fp,sp,44
    16a8:	e13ffb15 	stw	r4,-20(fp)
    16ac:	e17ffc15 	stw	r5,-16(fp)
    16b0:	e1bffd15 	stw	r6,-12(fp)
    16b4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    16b8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    16bc:	00800074 	movhi	r2,1
    16c0:	10a33104 	addi	r2,r2,-29500
    16c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    16c8:	1005003a 	cmpeq	r2,r2,zero
    16cc:	1000411e 	bne	r2,zero,17d4 <alt_alarm_start+0x138>
  {
    if (alarm)
    16d0:	e0bffb17 	ldw	r2,-20(fp)
    16d4:	1005003a 	cmpeq	r2,r2,zero
    16d8:	10003b1e 	bne	r2,zero,17c8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    16dc:	e0fffb17 	ldw	r3,-20(fp)
    16e0:	e0bffd17 	ldw	r2,-12(fp)
    16e4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    16e8:	e0fffb17 	ldw	r3,-20(fp)
    16ec:	e0bffe17 	ldw	r2,-8(fp)
    16f0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16f4:	0005303a 	rdctl	r2,status
    16f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16fc:	e0fff817 	ldw	r3,-32(fp)
    1700:	00bfff84 	movi	r2,-2
    1704:	1884703a 	and	r2,r3,r2
    1708:	1001703a 	wrctl	status,r2
  
  return context;
    170c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1710:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1714:	00800074 	movhi	r2,1
    1718:	10a33204 	addi	r2,r2,-29496
    171c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1720:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1724:	e0fffc17 	ldw	r3,-16(fp)
    1728:	e0bff917 	ldw	r2,-28(fp)
    172c:	1885883a 	add	r2,r3,r2
    1730:	10c00044 	addi	r3,r2,1
    1734:	e0bffb17 	ldw	r2,-20(fp)
    1738:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    173c:	e0bffb17 	ldw	r2,-20(fp)
    1740:	10c00217 	ldw	r3,8(r2)
    1744:	e0bff917 	ldw	r2,-28(fp)
    1748:	1880042e 	bgeu	r3,r2,175c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    174c:	e0fffb17 	ldw	r3,-20(fp)
    1750:	00800044 	movi	r2,1
    1754:	18800405 	stb	r2,16(r3)
    1758:	00000206 	br	1764 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    175c:	e0bffb17 	ldw	r2,-20(fp)
    1760:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1764:	e0fffb17 	ldw	r3,-20(fp)
    1768:	00800034 	movhi	r2,0
    176c:	109c8c04 	addi	r2,r2,29232
    1770:	e0bff615 	stw	r2,-40(fp)
    1774:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1778:	e0fff717 	ldw	r3,-36(fp)
    177c:	e0bff617 	ldw	r2,-40(fp)
    1780:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1784:	e0bff617 	ldw	r2,-40(fp)
    1788:	10c00017 	ldw	r3,0(r2)
    178c:	e0bff717 	ldw	r2,-36(fp)
    1790:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1794:	e0bff617 	ldw	r2,-40(fp)
    1798:	10c00017 	ldw	r3,0(r2)
    179c:	e0bff717 	ldw	r2,-36(fp)
    17a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    17a4:	e0fff617 	ldw	r3,-40(fp)
    17a8:	e0bff717 	ldw	r2,-36(fp)
    17ac:	18800015 	stw	r2,0(r3)
    17b0:	e0bffa17 	ldw	r2,-24(fp)
    17b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17b8:	e0bff517 	ldw	r2,-44(fp)
    17bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    17c0:	e03fff15 	stw	zero,-4(fp)
    17c4:	00000506 	br	17dc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    17c8:	00bffa84 	movi	r2,-22
    17cc:	e0bfff15 	stw	r2,-4(fp)
    17d0:	00000206 	br	17dc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    17d4:	00bfde84 	movi	r2,-134
    17d8:	e0bfff15 	stw	r2,-4(fp)
    17dc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    17e0:	e037883a 	mov	sp,fp
    17e4:	df000017 	ldw	fp,0(sp)
    17e8:	dec00104 	addi	sp,sp,4
    17ec:	f800283a 	ret

000017f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    17f0:	defffe04 	addi	sp,sp,-8
    17f4:	dfc00115 	stw	ra,4(sp)
    17f8:	df000015 	stw	fp,0(sp)
    17fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1800:	01000034 	movhi	r4,0
    1804:	211c9504 	addi	r4,r4,29268
    1808:	01400034 	movhi	r5,0
    180c:	29560304 	addi	r5,r5,22540
    1810:	01800034 	movhi	r6,0
    1814:	319c9504 	addi	r6,r6,29268
    1818:	00018700 	call	1870 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    181c:	01000034 	movhi	r4,0
    1820:	21000804 	addi	r4,r4,32
    1824:	01400034 	movhi	r5,0
    1828:	29400804 	addi	r5,r5,32
    182c:	01800034 	movhi	r6,0
    1830:	31807604 	addi	r6,r6,472
    1834:	00018700 	call	1870 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1838:	01000034 	movhi	r4,0
    183c:	2115be04 	addi	r4,r4,22264
    1840:	01400034 	movhi	r5,0
    1844:	2955be04 	addi	r5,r5,22264
    1848:	01800034 	movhi	r6,0
    184c:	31960304 	addi	r6,r6,22540
    1850:	00018700 	call	1870 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1854:	0002c540 	call	2c54 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1858:	0002e780 	call	2e78 <alt_icache_flush_all>
}
    185c:	e037883a 	mov	sp,fp
    1860:	dfc00117 	ldw	ra,4(sp)
    1864:	df000017 	ldw	fp,0(sp)
    1868:	dec00204 	addi	sp,sp,8
    186c:	f800283a 	ret

00001870 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1870:	defffc04 	addi	sp,sp,-16
    1874:	df000315 	stw	fp,12(sp)
    1878:	df000304 	addi	fp,sp,12
    187c:	e13ffd15 	stw	r4,-12(fp)
    1880:	e17ffe15 	stw	r5,-8(fp)
    1884:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1888:	e0fffe17 	ldw	r3,-8(fp)
    188c:	e0bffd17 	ldw	r2,-12(fp)
    1890:	18800e26 	beq	r3,r2,18cc <alt_load_section+0x5c>
  {
    while( to != end )
    1894:	00000a06 	br	18c0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    1898:	e0bffd17 	ldw	r2,-12(fp)
    189c:	10c00017 	ldw	r3,0(r2)
    18a0:	e0bffe17 	ldw	r2,-8(fp)
    18a4:	10c00015 	stw	r3,0(r2)
    18a8:	e0bffe17 	ldw	r2,-8(fp)
    18ac:	10800104 	addi	r2,r2,4
    18b0:	e0bffe15 	stw	r2,-8(fp)
    18b4:	e0bffd17 	ldw	r2,-12(fp)
    18b8:	10800104 	addi	r2,r2,4
    18bc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    18c0:	e0fffe17 	ldw	r3,-8(fp)
    18c4:	e0bfff17 	ldw	r2,-4(fp)
    18c8:	18bff31e 	bne	r3,r2,1898 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    18cc:	e037883a 	mov	sp,fp
    18d0:	df000017 	ldw	fp,0(sp)
    18d4:	dec00104 	addi	sp,sp,4
    18d8:	f800283a 	ret

000018dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    18dc:	defffd04 	addi	sp,sp,-12
    18e0:	dfc00215 	stw	ra,8(sp)
    18e4:	df000115 	stw	fp,4(sp)
    18e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    18ec:	0009883a 	mov	r4,zero
    18f0:	0001e800 	call	1e80 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    18f4:	0001eb40 	call	1eb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    18f8:	01000034 	movhi	r4,0
    18fc:	2115f804 	addi	r4,r4,22496
    1900:	01400034 	movhi	r5,0
    1904:	2955f804 	addi	r5,r5,22496
    1908:	01800034 	movhi	r6,0
    190c:	3195f804 	addi	r6,r6,22496
    1910:	00032380 	call	3238 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1914:	0002db00 	call	2db0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1918:	01000034 	movhi	r4,0
    191c:	210b8504 	addi	r4,r4,11796
    1920:	00038b00 	call	38b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1924:	d126a717 	ldw	r4,-25956(gp)
    1928:	d166a817 	ldw	r5,-25952(gp)
    192c:	d1a6a917 	ldw	r6,-25948(gp)
    1930:	00002140 	call	214 <main>
    1934:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    1938:	01000044 	movi	r4,1
    193c:	0002af40 	call	2af4 <close>
  exit (result);
    1940:	e13fff17 	ldw	r4,-4(fp)
    1944:	00038c40 	call	38c4 <exit>

00001948 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    1948:	defffe04 	addi	sp,sp,-8
    194c:	df000115 	stw	fp,4(sp)
    1950:	df000104 	addi	fp,sp,4
    1954:	e13fff15 	stw	r4,-4(fp)
}
    1958:	e037883a 	mov	sp,fp
    195c:	df000017 	ldw	fp,0(sp)
    1960:	dec00104 	addi	sp,sp,4
    1964:	f800283a 	ret

00001968 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    1968:	defffe04 	addi	sp,sp,-8
    196c:	df000115 	stw	fp,4(sp)
    1970:	df000104 	addi	fp,sp,4
    1974:	e13fff15 	stw	r4,-4(fp)
}
    1978:	e037883a 	mov	sp,fp
    197c:	df000017 	ldw	fp,0(sp)
    1980:	dec00104 	addi	sp,sp,4
    1984:	f800283a 	ret

00001988 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1988:	defff204 	addi	sp,sp,-56
    198c:	dfc00a15 	stw	ra,40(sp)
    1990:	df000915 	stw	fp,36(sp)
    1994:	df000904 	addi	fp,sp,36
    1998:	e1400215 	stw	r5,8(fp)
    199c:	e1800315 	stw	r6,12(fp)
    19a0:	e1c00415 	stw	r7,16(fp)
    19a4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    19a8:	e0800204 	addi	r2,fp,8
    19ac:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    19b0:	e0bfff17 	ldw	r2,-4(fp)
    19b4:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    19b8:	00007806 	br	1b9c <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    19bc:	e0bffc07 	ldb	r2,-16(fp)
    19c0:	10800960 	cmpeqi	r2,r2,37
    19c4:	1000031e 	bne	r2,zero,19d4 <alt_printf+0x4c>
        {
            alt_putchar(c);
    19c8:	e13ffc07 	ldb	r4,-16(fp)
    19cc:	0001be00 	call	1be0 <alt_putchar>
    19d0:	00007206 	br	1b9c <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    19d4:	e0bffd17 	ldw	r2,-12(fp)
    19d8:	10800003 	ldbu	r2,0(r2)
    19dc:	e0bffc05 	stb	r2,-16(fp)
    19e0:	e0bffc07 	ldb	r2,-16(fp)
    19e4:	1004c03a 	cmpne	r2,r2,zero
    19e8:	1007883a 	mov	r3,r2
    19ec:	e0bffd17 	ldw	r2,-12(fp)
    19f0:	10800044 	addi	r2,r2,1
    19f4:	e0bffd15 	stw	r2,-12(fp)
    19f8:	18803fcc 	andi	r2,r3,255
    19fc:	1005003a 	cmpeq	r2,r2,zero
    1a00:	1000721e 	bne	r2,zero,1bcc <alt_printf+0x244>
            {
                if (c == '%')
    1a04:	e0bffc07 	ldb	r2,-16(fp)
    1a08:	10800958 	cmpnei	r2,r2,37
    1a0c:	1000031e 	bne	r2,zero,1a1c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1a10:	e13ffc07 	ldb	r4,-16(fp)
    1a14:	0001be00 	call	1be0 <alt_putchar>
    1a18:	00006006 	br	1b9c <alt_printf+0x214>
                } 
                else if (c == 'c')
    1a1c:	e0bffc07 	ldb	r2,-16(fp)
    1a20:	108018d8 	cmpnei	r2,r2,99
    1a24:	1000091e 	bne	r2,zero,1a4c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    1a28:	e0fffe17 	ldw	r3,-8(fp)
    1a2c:	18800104 	addi	r2,r3,4
    1a30:	e0bffe15 	stw	r2,-8(fp)
    1a34:	1805883a 	mov	r2,r3
    1a38:	10800017 	ldw	r2,0(r2)
    1a3c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    1a40:	e13ffb17 	ldw	r4,-20(fp)
    1a44:	0001be00 	call	1be0 <alt_putchar>
    1a48:	00005406 	br	1b9c <alt_printf+0x214>
                }
                else if (c == 'x')
    1a4c:	e0bffc07 	ldb	r2,-16(fp)
    1a50:	10801e18 	cmpnei	r2,r2,120
    1a54:	1000371e 	bne	r2,zero,1b34 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    1a58:	e0fffe17 	ldw	r3,-8(fp)
    1a5c:	18800104 	addi	r2,r3,4
    1a60:	e0bffe15 	stw	r2,-8(fp)
    1a64:	1805883a 	mov	r2,r3
    1a68:	10800017 	ldw	r2,0(r2)
    1a6c:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1a70:	e0bffa17 	ldw	r2,-24(fp)
    1a74:	1004c03a 	cmpne	r2,r2,zero
    1a78:	1000031e 	bne	r2,zero,1a88 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    1a7c:	01000c04 	movi	r4,48
    1a80:	0001be00 	call	1be0 <alt_putchar>
                        continue;
    1a84:	00004506 	br	1b9c <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    1a88:	00800704 	movi	r2,28
    1a8c:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    1a90:	00000306 	br	1aa0 <alt_printf+0x118>
                        digit_shift -= 4;
    1a94:	e0bff817 	ldw	r2,-32(fp)
    1a98:	10bfff04 	addi	r2,r2,-4
    1a9c:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1aa0:	00c003c4 	movi	r3,15
    1aa4:	e0bff817 	ldw	r2,-32(fp)
    1aa8:	1884983a 	sll	r2,r3,r2
    1aac:	1007883a 	mov	r3,r2
    1ab0:	e0bffa17 	ldw	r2,-24(fp)
    1ab4:	1884703a 	and	r2,r3,r2
    1ab8:	1005003a 	cmpeq	r2,r2,zero
    1abc:	103ff51e 	bne	r2,zero,1a94 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1ac0:	00001806 	br	1b24 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1ac4:	00c003c4 	movi	r3,15
    1ac8:	e0bff817 	ldw	r2,-32(fp)
    1acc:	1884983a 	sll	r2,r3,r2
    1ad0:	1007883a 	mov	r3,r2
    1ad4:	e0bffa17 	ldw	r2,-24(fp)
    1ad8:	1886703a 	and	r3,r3,r2
    1adc:	e0bff817 	ldw	r2,-32(fp)
    1ae0:	1884d83a 	srl	r2,r3,r2
    1ae4:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    1ae8:	e0bff917 	ldw	r2,-28(fp)
    1aec:	108002a8 	cmpgeui	r2,r2,10
    1af0:	1000041e 	bne	r2,zero,1b04 <alt_printf+0x17c>
                            c = '0' + digit;
    1af4:	e0bff917 	ldw	r2,-28(fp)
    1af8:	10800c04 	addi	r2,r2,48
    1afc:	e0bffc05 	stb	r2,-16(fp)
    1b00:	00000306 	br	1b10 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    1b04:	e0bff917 	ldw	r2,-28(fp)
    1b08:	108015c4 	addi	r2,r2,87
    1b0c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    1b10:	e13ffc07 	ldb	r4,-16(fp)
    1b14:	0001be00 	call	1be0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1b18:	e0bff817 	ldw	r2,-32(fp)
    1b1c:	10bfff04 	addi	r2,r2,-4
    1b20:	e0bff815 	stw	r2,-32(fp)
    1b24:	e0bff817 	ldw	r2,-32(fp)
    1b28:	1004403a 	cmpge	r2,r2,zero
    1b2c:	103fe51e 	bne	r2,zero,1ac4 <alt_printf+0x13c>
    1b30:	00001a06 	br	1b9c <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1b34:	e0bffc07 	ldb	r2,-16(fp)
    1b38:	10801cd8 	cmpnei	r2,r2,115
    1b3c:	1000171e 	bne	r2,zero,1b9c <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1b40:	e0fffe17 	ldw	r3,-8(fp)
    1b44:	18800104 	addi	r2,r3,4
    1b48:	e0bffe15 	stw	r2,-8(fp)
    1b4c:	1805883a 	mov	r2,r3
    1b50:	10800017 	ldw	r2,0(r2)
    1b54:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    1b58:	00000906 	br	1b80 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    1b5c:	e0bff717 	ldw	r2,-36(fp)
    1b60:	10800003 	ldbu	r2,0(r2)
    1b64:	11003fcc 	andi	r4,r2,255
    1b68:	2100201c 	xori	r4,r4,128
    1b6c:	213fe004 	addi	r4,r4,-128
    1b70:	e0bff717 	ldw	r2,-36(fp)
    1b74:	10800044 	addi	r2,r2,1
    1b78:	e0bff715 	stw	r2,-36(fp)
    1b7c:	0001be00 	call	1be0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    1b80:	e0bff717 	ldw	r2,-36(fp)
    1b84:	10800003 	ldbu	r2,0(r2)
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	1080201c 	xori	r2,r2,128
    1b90:	10bfe004 	addi	r2,r2,-128
    1b94:	1004c03a 	cmpne	r2,r2,zero
    1b98:	103ff01e 	bne	r2,zero,1b5c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1b9c:	e0bffd17 	ldw	r2,-12(fp)
    1ba0:	10800003 	ldbu	r2,0(r2)
    1ba4:	e0bffc05 	stb	r2,-16(fp)
    1ba8:	e0bffc07 	ldb	r2,-16(fp)
    1bac:	1004c03a 	cmpne	r2,r2,zero
    1bb0:	1007883a 	mov	r3,r2
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	10800044 	addi	r2,r2,1
    1bbc:	e0bffd15 	stw	r2,-12(fp)
    1bc0:	18803fcc 	andi	r2,r3,255
    1bc4:	1004c03a 	cmpne	r2,r2,zero
    1bc8:	103f7c1e 	bne	r2,zero,19bc <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    1bcc:	e037883a 	mov	sp,fp
    1bd0:	dfc00117 	ldw	ra,4(sp)
    1bd4:	df000017 	ldw	fp,0(sp)
    1bd8:	dec00504 	addi	sp,sp,20
    1bdc:	f800283a 	ret

00001be0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1be0:	defffd04 	addi	sp,sp,-12
    1be4:	dfc00215 	stw	ra,8(sp)
    1be8:	df000115 	stw	fp,4(sp)
    1bec:	df000104 	addi	fp,sp,4
    1bf0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    1bf4:	00800034 	movhi	r2,0
    1bf8:	109c8904 	addi	r2,r2,29220
    1bfc:	10800017 	ldw	r2,0(r2)
    1c00:	11400217 	ldw	r5,8(r2)
    1c04:	e13fff17 	ldw	r4,-4(fp)
    1c08:	0003a100 	call	3a10 <putc>
#endif
}
    1c0c:	e037883a 	mov	sp,fp
    1c10:	dfc00117 	ldw	ra,4(sp)
    1c14:	df000017 	ldw	fp,0(sp)
    1c18:	dec00204 	addi	sp,sp,8
    1c1c:	f800283a 	ret

00001c20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    1c20:	defff804 	addi	sp,sp,-32
    1c24:	df000715 	stw	fp,28(sp)
    1c28:	df000704 	addi	fp,sp,28
    1c2c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c30:	0005303a 	rdctl	r2,status
    1c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c38:	e0fffb17 	ldw	r3,-20(fp)
    1c3c:	00bfff84 	movi	r2,-2
    1c40:	1884703a 	and	r2,r3,r2
    1c44:	1001703a 	wrctl	status,r2
  
  return context;
    1c48:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    1c4c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1c50:	d0a00417 	ldw	r2,-32752(gp)
    1c54:	10c000c4 	addi	r3,r2,3
    1c58:	00bfff04 	movi	r2,-4
    1c5c:	1884703a 	and	r2,r3,r2
    1c60:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1c64:	d0e00417 	ldw	r3,-32752(gp)
    1c68:	e0bffe17 	ldw	r2,-8(fp)
    1c6c:	1887883a 	add	r3,r3,r2
    1c70:	00802034 	movhi	r2,128
    1c74:	10800004 	addi	r2,r2,0
    1c78:	10c0072e 	bgeu	r2,r3,1c98 <sbrk+0x78>
    1c7c:	e0bffd17 	ldw	r2,-12(fp)
    1c80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c84:	e0bffa17 	ldw	r2,-24(fp)
    1c88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    1c8c:	00bfffc4 	movi	r2,-1
    1c90:	e0bfff15 	stw	r2,-4(fp)
    1c94:	00000c06 	br	1cc8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    1c98:	d0a00417 	ldw	r2,-32752(gp)
    1c9c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    1ca0:	d0e00417 	ldw	r3,-32752(gp)
    1ca4:	e0bffe17 	ldw	r2,-8(fp)
    1ca8:	1885883a 	add	r2,r3,r2
    1cac:	d0a00415 	stw	r2,-32752(gp)
    1cb0:	e0bffd17 	ldw	r2,-12(fp)
    1cb4:	e0bff915 	stw	r2,-28(fp)
    1cb8:	e0bff917 	ldw	r2,-28(fp)
    1cbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1cc0:	e0bffc17 	ldw	r2,-16(fp)
    1cc4:	e0bfff15 	stw	r2,-4(fp)
    1cc8:	e0bfff17 	ldw	r2,-4(fp)
} 
    1ccc:	e037883a 	mov	sp,fp
    1cd0:	df000017 	ldw	fp,0(sp)
    1cd4:	dec00104 	addi	sp,sp,4
    1cd8:	f800283a 	ret

00001cdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1cdc:	defffa04 	addi	sp,sp,-24
    1ce0:	df000515 	stw	fp,20(sp)
    1ce4:	df000504 	addi	fp,sp,20
    1ce8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1cec:	0005303a 	rdctl	r2,status
    1cf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1cf4:	e0fffd17 	ldw	r3,-12(fp)
    1cf8:	00bfff84 	movi	r2,-2
    1cfc:	1884703a 	and	r2,r3,r2
    1d00:	1001703a 	wrctl	status,r2
  
  return context;
    1d04:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1d08:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    1d0c:	e0bfff17 	ldw	r2,-4(fp)
    1d10:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1d14:	e0bffc17 	ldw	r2,-16(fp)
    1d18:	10c00017 	ldw	r3,0(r2)
    1d1c:	e0bffc17 	ldw	r2,-16(fp)
    1d20:	10800117 	ldw	r2,4(r2)
    1d24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    1d28:	e0bffc17 	ldw	r2,-16(fp)
    1d2c:	10c00117 	ldw	r3,4(r2)
    1d30:	e0bffc17 	ldw	r2,-16(fp)
    1d34:	10800017 	ldw	r2,0(r2)
    1d38:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1d3c:	e0fffc17 	ldw	r3,-16(fp)
    1d40:	e0bffc17 	ldw	r2,-16(fp)
    1d44:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    1d48:	e0fffc17 	ldw	r3,-16(fp)
    1d4c:	e0bffc17 	ldw	r2,-16(fp)
    1d50:	18800015 	stw	r2,0(r3)
    1d54:	e0bffe17 	ldw	r2,-8(fp)
    1d58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d5c:	e0bffb17 	ldw	r2,-20(fp)
    1d60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1d64:	e037883a 	mov	sp,fp
    1d68:	df000017 	ldw	fp,0(sp)
    1d6c:	dec00104 	addi	sp,sp,4
    1d70:	f800283a 	ret

00001d74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1d74:	defffb04 	addi	sp,sp,-20
    1d78:	dfc00415 	stw	ra,16(sp)
    1d7c:	df000315 	stw	fp,12(sp)
    1d80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1d84:	d0a00517 	ldw	r2,-32748(gp)
    1d88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1d8c:	d0a6ab17 	ldw	r2,-25940(gp)
    1d90:	10800044 	addi	r2,r2,1
    1d94:	d0a6ab15 	stw	r2,-25940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1d98:	00003106 	br	1e60 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    1d9c:	e0bffe17 	ldw	r2,-8(fp)
    1da0:	10800017 	ldw	r2,0(r2)
    1da4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1da8:	e0bffe17 	ldw	r2,-8(fp)
    1dac:	10800403 	ldbu	r2,16(r2)
    1db0:	10803fcc 	andi	r2,r2,255
    1db4:	1005003a 	cmpeq	r2,r2,zero
    1db8:	1000051e 	bne	r2,zero,1dd0 <alt_tick+0x5c>
    1dbc:	d0a6ab17 	ldw	r2,-25940(gp)
    1dc0:	1004c03a 	cmpne	r2,r2,zero
    1dc4:	1000021e 	bne	r2,zero,1dd0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    1dc8:	e0bffe17 	ldw	r2,-8(fp)
    1dcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	10c00217 	ldw	r3,8(r2)
    1dd8:	d0a6ab17 	ldw	r2,-25940(gp)
    1ddc:	10c01e36 	bltu	r2,r3,1e58 <alt_tick+0xe4>
    1de0:	e0bffe17 	ldw	r2,-8(fp)
    1de4:	10800403 	ldbu	r2,16(r2)
    1de8:	10803fcc 	andi	r2,r2,255
    1dec:	1004c03a 	cmpne	r2,r2,zero
    1df0:	1000191e 	bne	r2,zero,1e58 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    1df4:	e0bffe17 	ldw	r2,-8(fp)
    1df8:	10c00317 	ldw	r3,12(r2)
    1dfc:	e0bffe17 	ldw	r2,-8(fp)
    1e00:	11000517 	ldw	r4,20(r2)
    1e04:	183ee83a 	callr	r3
    1e08:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1e0c:	e0bffd17 	ldw	r2,-12(fp)
    1e10:	1004c03a 	cmpne	r2,r2,zero
    1e14:	1000031e 	bne	r2,zero,1e24 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    1e18:	e13ffe17 	ldw	r4,-8(fp)
    1e1c:	0001cdc0 	call	1cdc <alt_alarm_stop>
    1e20:	00000d06 	br	1e58 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	10c00217 	ldw	r3,8(r2)
    1e2c:	e0bffd17 	ldw	r2,-12(fp)
    1e30:	1887883a 	add	r3,r3,r2
    1e34:	e0bffe17 	ldw	r2,-8(fp)
    1e38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1e3c:	e0bffe17 	ldw	r2,-8(fp)
    1e40:	10c00217 	ldw	r3,8(r2)
    1e44:	d0a6ab17 	ldw	r2,-25940(gp)
    1e48:	1880032e 	bgeu	r3,r2,1e58 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    1e4c:	e0fffe17 	ldw	r3,-8(fp)
    1e50:	00800044 	movi	r2,1
    1e54:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    1e58:	e0bfff17 	ldw	r2,-4(fp)
    1e5c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1e60:	d0e00504 	addi	r3,gp,-32748
    1e64:	e0bffe17 	ldw	r2,-8(fp)
    1e68:	10ffcc1e 	bne	r2,r3,1d9c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1e6c:	e037883a 	mov	sp,fp
    1e70:	dfc00117 	ldw	ra,4(sp)
    1e74:	df000017 	ldw	fp,0(sp)
    1e78:	dec00204 	addi	sp,sp,8
    1e7c:	f800283a 	ret

00001e80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1e80:	defffd04 	addi	sp,sp,-12
    1e84:	dfc00215 	stw	ra,8(sp)
    1e88:	df000115 	stw	fp,4(sp)
    1e8c:	df000104 	addi	fp,sp,4
    1e90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    1e94:	000360c0 	call	360c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1e98:	00800044 	movi	r2,1
    1e9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1ea0:	e037883a 	mov	sp,fp
    1ea4:	dfc00117 	ldw	ra,4(sp)
    1ea8:	df000017 	ldw	fp,0(sp)
    1eac:	dec00204 	addi	sp,sp,8
    1eb0:	f800283a 	ret

00001eb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1eb4:	defffe04 	addi	sp,sp,-8
    1eb8:	dfc00115 	stw	ra,4(sp)
    1ebc:	df000015 	stw	fp,0(sp)
    1ec0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    1ec4:	01040034 	movhi	r4,4096
    1ec8:	21080004 	addi	r4,r4,8192
    1ecc:	000b883a 	mov	r5,zero
    1ed0:	000d883a 	mov	r6,zero
    1ed4:	01c00204 	movi	r7,8
    1ed8:	0002a640 	call	2a64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1edc:	01000034 	movhi	r4,0
    1ee0:	21180f04 	addi	r4,r4,24636
    1ee4:	000b883a 	mov	r5,zero
    1ee8:	01800204 	movi	r6,8
    1eec:	00020900 	call	2090 <altera_avalon_jtag_uart_init>
    1ef0:	01000034 	movhi	r4,0
    1ef4:	21180504 	addi	r4,r4,24596
    1ef8:	0001f100 	call	1f10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1f10:	defffd04 	addi	sp,sp,-12
    1f14:	dfc00215 	stw	ra,8(sp)
    1f18:	df000115 	stw	fp,4(sp)
    1f1c:	df000104 	addi	fp,sp,4
    1f20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1f24:	e13fff17 	ldw	r4,-4(fp)
    1f28:	01400034 	movhi	r5,0
    1f2c:	295c9004 	addi	r5,r5,29248
    1f30:	0002c9c0 	call	2c9c <alt_dev_llist_insert>
}
    1f34:	e037883a 	mov	sp,fp
    1f38:	dfc00117 	ldw	ra,4(sp)
    1f3c:	df000017 	ldw	fp,0(sp)
    1f40:	dec00204 	addi	sp,sp,8
    1f44:	f800283a 	ret

00001f48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1f48:	defffa04 	addi	sp,sp,-24
    1f4c:	dfc00515 	stw	ra,20(sp)
    1f50:	df000415 	stw	fp,16(sp)
    1f54:	df000404 	addi	fp,sp,16
    1f58:	e13ffd15 	stw	r4,-12(fp)
    1f5c:	e17ffe15 	stw	r5,-8(fp)
    1f60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1f64:	e0bffd17 	ldw	r2,-12(fp)
    1f68:	10800017 	ldw	r2,0(r2)
    1f6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1f70:	e0bffc17 	ldw	r2,-16(fp)
    1f74:	11000a04 	addi	r4,r2,40
    1f78:	e0bffd17 	ldw	r2,-12(fp)
    1f7c:	11c00217 	ldw	r7,8(r2)
    1f80:	e17ffe17 	ldw	r5,-8(fp)
    1f84:	e1bfff17 	ldw	r6,-4(fp)
    1f88:	00025900 	call	2590 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1f8c:	e037883a 	mov	sp,fp
    1f90:	dfc00117 	ldw	ra,4(sp)
    1f94:	df000017 	ldw	fp,0(sp)
    1f98:	dec00204 	addi	sp,sp,8
    1f9c:	f800283a 	ret

00001fa0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1fa0:	defffa04 	addi	sp,sp,-24
    1fa4:	dfc00515 	stw	ra,20(sp)
    1fa8:	df000415 	stw	fp,16(sp)
    1fac:	df000404 	addi	fp,sp,16
    1fb0:	e13ffd15 	stw	r4,-12(fp)
    1fb4:	e17ffe15 	stw	r5,-8(fp)
    1fb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1fbc:	e0bffd17 	ldw	r2,-12(fp)
    1fc0:	10800017 	ldw	r2,0(r2)
    1fc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1fc8:	e0bffc17 	ldw	r2,-16(fp)
    1fcc:	11000a04 	addi	r4,r2,40
    1fd0:	e0bffd17 	ldw	r2,-12(fp)
    1fd4:	11c00217 	ldw	r7,8(r2)
    1fd8:	e17ffe17 	ldw	r5,-8(fp)
    1fdc:	e1bfff17 	ldw	r6,-4(fp)
    1fe0:	00027b40 	call	27b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1fe4:	e037883a 	mov	sp,fp
    1fe8:	dfc00117 	ldw	ra,4(sp)
    1fec:	df000017 	ldw	fp,0(sp)
    1ff0:	dec00204 	addi	sp,sp,8
    1ff4:	f800283a 	ret

00001ff8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1ff8:	defffc04 	addi	sp,sp,-16
    1ffc:	dfc00315 	stw	ra,12(sp)
    2000:	df000215 	stw	fp,8(sp)
    2004:	df000204 	addi	fp,sp,8
    2008:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    200c:	e0bfff17 	ldw	r2,-4(fp)
    2010:	10800017 	ldw	r2,0(r2)
    2014:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    2018:	e0bffe17 	ldw	r2,-8(fp)
    201c:	11000a04 	addi	r4,r2,40
    2020:	e0bfff17 	ldw	r2,-4(fp)
    2024:	11400217 	ldw	r5,8(r2)
    2028:	00024280 	call	2428 <altera_avalon_jtag_uart_close>
}
    202c:	e037883a 	mov	sp,fp
    2030:	dfc00117 	ldw	ra,4(sp)
    2034:	df000017 	ldw	fp,0(sp)
    2038:	dec00204 	addi	sp,sp,8
    203c:	f800283a 	ret

00002040 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    2040:	defffa04 	addi	sp,sp,-24
    2044:	dfc00515 	stw	ra,20(sp)
    2048:	df000415 	stw	fp,16(sp)
    204c:	df000404 	addi	fp,sp,16
    2050:	e13ffd15 	stw	r4,-12(fp)
    2054:	e17ffe15 	stw	r5,-8(fp)
    2058:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    205c:	e0bffd17 	ldw	r2,-12(fp)
    2060:	10800017 	ldw	r2,0(r2)
    2064:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    2068:	e0bffc17 	ldw	r2,-16(fp)
    206c:	11000a04 	addi	r4,r2,40
    2070:	e17ffe17 	ldw	r5,-8(fp)
    2074:	e1bfff17 	ldw	r6,-4(fp)
    2078:	000249c0 	call	249c <altera_avalon_jtag_uart_ioctl>
}
    207c:	e037883a 	mov	sp,fp
    2080:	dfc00117 	ldw	ra,4(sp)
    2084:	df000017 	ldw	fp,0(sp)
    2088:	dec00204 	addi	sp,sp,8
    208c:	f800283a 	ret

00002090 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2090:	defffa04 	addi	sp,sp,-24
    2094:	dfc00515 	stw	ra,20(sp)
    2098:	df000415 	stw	fp,16(sp)
    209c:	df000404 	addi	fp,sp,16
    20a0:	e13ffd15 	stw	r4,-12(fp)
    20a4:	e17ffe15 	stw	r5,-8(fp)
    20a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    20ac:	e0fffd17 	ldw	r3,-12(fp)
    20b0:	00800044 	movi	r2,1
    20b4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    20b8:	e0bffd17 	ldw	r2,-12(fp)
    20bc:	10800017 	ldw	r2,0(r2)
    20c0:	11000104 	addi	r4,r2,4
    20c4:	e0bffd17 	ldw	r2,-12(fp)
    20c8:	10800817 	ldw	r2,32(r2)
    20cc:	1007883a 	mov	r3,r2
    20d0:	2005883a 	mov	r2,r4
    20d4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    20d8:	e13ffe17 	ldw	r4,-8(fp)
    20dc:	e17fff17 	ldw	r5,-4(fp)
    20e0:	d8000015 	stw	zero,0(sp)
    20e4:	01800034 	movhi	r6,0
    20e8:	31885404 	addi	r6,r6,8528
    20ec:	e1fffd17 	ldw	r7,-12(fp)
    20f0:	0002e940 	call	2e94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    20f4:	e0bffd17 	ldw	r2,-12(fp)
    20f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    20fc:	e0bffd17 	ldw	r2,-12(fp)
    2100:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2104:	00800074 	movhi	r2,1
    2108:	10a33104 	addi	r2,r2,-29500
    210c:	10800017 	ldw	r2,0(r2)
    2110:	100b883a 	mov	r5,r2
    2114:	01800034 	movhi	r6,0
    2118:	3188de04 	addi	r6,r6,9080
    211c:	e1fffd17 	ldw	r7,-12(fp)
    2120:	000169c0 	call	169c <alt_alarm_start>
    2124:	1004403a 	cmpge	r2,r2,zero
    2128:	1000041e 	bne	r2,zero,213c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    212c:	e0fffd17 	ldw	r3,-12(fp)
    2130:	00a00034 	movhi	r2,32768
    2134:	10bfffc4 	addi	r2,r2,-1
    2138:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    213c:	e037883a 	mov	sp,fp
    2140:	dfc00117 	ldw	ra,4(sp)
    2144:	df000017 	ldw	fp,0(sp)
    2148:	dec00204 	addi	sp,sp,8
    214c:	f800283a 	ret

00002150 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    2150:	defff804 	addi	sp,sp,-32
    2154:	df000715 	stw	fp,28(sp)
    2158:	df000704 	addi	fp,sp,28
    215c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    2160:	e0bfff17 	ldw	r2,-4(fp)
    2164:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    2168:	e0bffe17 	ldw	r2,-8(fp)
    216c:	10800017 	ldw	r2,0(r2)
    2170:	e0bffd15 	stw	r2,-12(fp)
    2174:	00000006 	br	2178 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2178:	e0bffd17 	ldw	r2,-12(fp)
    217c:	10800104 	addi	r2,r2,4
    2180:	10800037 	ldwio	r2,0(r2)
    2184:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    2188:	e0bffc17 	ldw	r2,-16(fp)
    218c:	1080c00c 	andi	r2,r2,768
    2190:	1005003a 	cmpeq	r2,r2,zero
    2194:	1000741e 	bne	r2,zero,2368 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    2198:	e0bffc17 	ldw	r2,-16(fp)
    219c:	1080400c 	andi	r2,r2,256
    21a0:	1005003a 	cmpeq	r2,r2,zero
    21a4:	1000351e 	bne	r2,zero,227c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    21a8:	00800074 	movhi	r2,1
    21ac:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	10800a17 	ldw	r2,40(r2)
    21b8:	10800044 	addi	r2,r2,1
    21bc:	1081ffcc 	andi	r2,r2,2047
    21c0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    21c4:	e0bffe17 	ldw	r2,-8(fp)
    21c8:	10c00b17 	ldw	r3,44(r2)
    21cc:	e0bffa17 	ldw	r2,-24(fp)
    21d0:	18801626 	beq	r3,r2,222c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    21d4:	e0bffd17 	ldw	r2,-12(fp)
    21d8:	10800037 	ldwio	r2,0(r2)
    21dc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    21e0:	e0bffb17 	ldw	r2,-20(fp)
    21e4:	10a0000c 	andi	r2,r2,32768
    21e8:	1005003a 	cmpeq	r2,r2,zero
    21ec:	10000f1e 	bne	r2,zero,222c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    21f0:	e0bffe17 	ldw	r2,-8(fp)
    21f4:	10c00a17 	ldw	r3,40(r2)
    21f8:	e0bffb17 	ldw	r2,-20(fp)
    21fc:	1009883a 	mov	r4,r2
    2200:	e0bffe17 	ldw	r2,-8(fp)
    2204:	1885883a 	add	r2,r3,r2
    2208:	10800e04 	addi	r2,r2,56
    220c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2210:	e0bffe17 	ldw	r2,-8(fp)
    2214:	10800a17 	ldw	r2,40(r2)
    2218:	10800044 	addi	r2,r2,1
    221c:	10c1ffcc 	andi	r3,r2,2047
    2220:	e0bffe17 	ldw	r2,-8(fp)
    2224:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    2228:	003fe106 	br	21b0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    222c:	e0bffb17 	ldw	r2,-20(fp)
    2230:	10bfffec 	andhi	r2,r2,65535
    2234:	1005003a 	cmpeq	r2,r2,zero
    2238:	1000101e 	bne	r2,zero,227c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    223c:	e0bffe17 	ldw	r2,-8(fp)
    2240:	10c00817 	ldw	r3,32(r2)
    2244:	00bfff84 	movi	r2,-2
    2248:	1886703a 	and	r3,r3,r2
    224c:	e0bffe17 	ldw	r2,-8(fp)
    2250:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    2254:	e0bffd17 	ldw	r2,-12(fp)
    2258:	11000104 	addi	r4,r2,4
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	10800817 	ldw	r2,32(r2)
    2264:	1007883a 	mov	r3,r2
    2268:	2005883a 	mov	r2,r4
    226c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2270:	e0bffd17 	ldw	r2,-12(fp)
    2274:	10800104 	addi	r2,r2,4
    2278:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    227c:	e0bffc17 	ldw	r2,-16(fp)
    2280:	1080800c 	andi	r2,r2,512
    2284:	1005003a 	cmpeq	r2,r2,zero
    2288:	103fbb1e 	bne	r2,zero,2178 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    228c:	e0bffc17 	ldw	r2,-16(fp)
    2290:	10bfffec 	andhi	r2,r2,65535
    2294:	1004d43a 	srli	r2,r2,16
    2298:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    229c:	00001506 	br	22f4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    22a0:	e13ffd17 	ldw	r4,-12(fp)
    22a4:	e0bffe17 	ldw	r2,-8(fp)
    22a8:	10c00d17 	ldw	r3,52(r2)
    22ac:	e0bffe17 	ldw	r2,-8(fp)
    22b0:	1885883a 	add	r2,r3,r2
    22b4:	10820e04 	addi	r2,r2,2104
    22b8:	10800003 	ldbu	r2,0(r2)
    22bc:	10c03fcc 	andi	r3,r2,255
    22c0:	18c0201c 	xori	r3,r3,128
    22c4:	18ffe004 	addi	r3,r3,-128
    22c8:	2005883a 	mov	r2,r4
    22cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    22d0:	e0bffe17 	ldw	r2,-8(fp)
    22d4:	10800d17 	ldw	r2,52(r2)
    22d8:	10800044 	addi	r2,r2,1
    22dc:	10c1ffcc 	andi	r3,r2,2047
    22e0:	e0bffe17 	ldw	r2,-8(fp)
    22e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    22e8:	e0bff917 	ldw	r2,-28(fp)
    22ec:	10bfffc4 	addi	r2,r2,-1
    22f0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    22f4:	e0bff917 	ldw	r2,-28(fp)
    22f8:	1005003a 	cmpeq	r2,r2,zero
    22fc:	1000051e 	bne	r2,zero,2314 <altera_avalon_jtag_uart_irq+0x1c4>
    2300:	e0bffe17 	ldw	r2,-8(fp)
    2304:	10c00d17 	ldw	r3,52(r2)
    2308:	e0bffe17 	ldw	r2,-8(fp)
    230c:	10800c17 	ldw	r2,48(r2)
    2310:	18bfe31e 	bne	r3,r2,22a0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    2314:	e0bff917 	ldw	r2,-28(fp)
    2318:	1005003a 	cmpeq	r2,r2,zero
    231c:	103f961e 	bne	r2,zero,2178 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2320:	e0bffe17 	ldw	r2,-8(fp)
    2324:	10c00817 	ldw	r3,32(r2)
    2328:	00bfff44 	movi	r2,-3
    232c:	1886703a 	and	r3,r3,r2
    2330:	e0bffe17 	ldw	r2,-8(fp)
    2334:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2338:	e0bffe17 	ldw	r2,-8(fp)
    233c:	10800017 	ldw	r2,0(r2)
    2340:	11000104 	addi	r4,r2,4
    2344:	e0bffe17 	ldw	r2,-8(fp)
    2348:	10800817 	ldw	r2,32(r2)
    234c:	1007883a 	mov	r3,r2
    2350:	2005883a 	mov	r2,r4
    2354:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2358:	e0bffd17 	ldw	r2,-12(fp)
    235c:	10800104 	addi	r2,r2,4
    2360:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    2364:	003f8406 	br	2178 <altera_avalon_jtag_uart_irq+0x28>
}
    2368:	e037883a 	mov	sp,fp
    236c:	df000017 	ldw	fp,0(sp)
    2370:	dec00104 	addi	sp,sp,4
    2374:	f800283a 	ret

00002378 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    2378:	defffc04 	addi	sp,sp,-16
    237c:	df000315 	stw	fp,12(sp)
    2380:	df000304 	addi	fp,sp,12
    2384:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    2388:	e0bfff17 	ldw	r2,-4(fp)
    238c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    2390:	e0bffe17 	ldw	r2,-8(fp)
    2394:	10800017 	ldw	r2,0(r2)
    2398:	10800104 	addi	r2,r2,4
    239c:	10800037 	ldwio	r2,0(r2)
    23a0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    23a4:	e0bffd17 	ldw	r2,-12(fp)
    23a8:	1081000c 	andi	r2,r2,1024
    23ac:	1005003a 	cmpeq	r2,r2,zero
    23b0:	10000c1e 	bne	r2,zero,23e4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    23b4:	e0bffe17 	ldw	r2,-8(fp)
    23b8:	10800017 	ldw	r2,0(r2)
    23bc:	11000104 	addi	r4,r2,4
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	10800817 	ldw	r2,32(r2)
    23c8:	10810014 	ori	r2,r2,1024
    23cc:	1007883a 	mov	r3,r2
    23d0:	2005883a 	mov	r2,r4
    23d4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    23d8:	e0bffe17 	ldw	r2,-8(fp)
    23dc:	10000915 	stw	zero,36(r2)
    23e0:	00000a06 	br	240c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    23e4:	e0bffe17 	ldw	r2,-8(fp)
    23e8:	10c00917 	ldw	r3,36(r2)
    23ec:	00a00034 	movhi	r2,32768
    23f0:	10bfff04 	addi	r2,r2,-4
    23f4:	10c00536 	bltu	r2,r3,240c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    23f8:	e0bffe17 	ldw	r2,-8(fp)
    23fc:	10800917 	ldw	r2,36(r2)
    2400:	10c00044 	addi	r3,r2,1
    2404:	e0bffe17 	ldw	r2,-8(fp)
    2408:	10c00915 	stw	r3,36(r2)
    240c:	00800074 	movhi	r2,1
    2410:	10a33104 	addi	r2,r2,-29500
    2414:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2418:	e037883a 	mov	sp,fp
    241c:	df000017 	ldw	fp,0(sp)
    2420:	dec00104 	addi	sp,sp,4
    2424:	f800283a 	ret

00002428 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    2428:	defffc04 	addi	sp,sp,-16
    242c:	df000315 	stw	fp,12(sp)
    2430:	df000304 	addi	fp,sp,12
    2434:	e13ffd15 	stw	r4,-12(fp)
    2438:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    243c:	00000706 	br	245c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    2440:	e0bffe17 	ldw	r2,-8(fp)
    2444:	1090000c 	andi	r2,r2,16384
    2448:	1005003a 	cmpeq	r2,r2,zero
    244c:	1000031e 	bne	r2,zero,245c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    2450:	00bffd44 	movi	r2,-11
    2454:	e0bfff15 	stw	r2,-4(fp)
    2458:	00000b06 	br	2488 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    245c:	e0bffd17 	ldw	r2,-12(fp)
    2460:	10c00d17 	ldw	r3,52(r2)
    2464:	e0bffd17 	ldw	r2,-12(fp)
    2468:	10800c17 	ldw	r2,48(r2)
    246c:	18800526 	beq	r3,r2,2484 <altera_avalon_jtag_uart_close+0x5c>
    2470:	e0bffd17 	ldw	r2,-12(fp)
    2474:	10c00917 	ldw	r3,36(r2)
    2478:	e0bffd17 	ldw	r2,-12(fp)
    247c:	10800117 	ldw	r2,4(r2)
    2480:	18bfef36 	bltu	r3,r2,2440 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    2484:	e03fff15 	stw	zero,-4(fp)
    2488:	e0bfff17 	ldw	r2,-4(fp)
}
    248c:	e037883a 	mov	sp,fp
    2490:	df000017 	ldw	fp,0(sp)
    2494:	dec00104 	addi	sp,sp,4
    2498:	f800283a 	ret

0000249c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    249c:	defff804 	addi	sp,sp,-32
    24a0:	df000715 	stw	fp,28(sp)
    24a4:	df000704 	addi	fp,sp,28
    24a8:	e13ffb15 	stw	r4,-20(fp)
    24ac:	e17ffc15 	stw	r5,-16(fp)
    24b0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    24b4:	00bff9c4 	movi	r2,-25
    24b8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    24bc:	e0bffc17 	ldw	r2,-16(fp)
    24c0:	e0bfff15 	stw	r2,-4(fp)
    24c4:	e0ffff17 	ldw	r3,-4(fp)
    24c8:	189a8060 	cmpeqi	r2,r3,27137
    24cc:	1000041e 	bne	r2,zero,24e0 <altera_avalon_jtag_uart_ioctl+0x44>
    24d0:	e0ffff17 	ldw	r3,-4(fp)
    24d4:	189a80a0 	cmpeqi	r2,r3,27138
    24d8:	10001b1e 	bne	r2,zero,2548 <altera_avalon_jtag_uart_ioctl+0xac>
    24dc:	00002706 	br	257c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    24e0:	e0bffb17 	ldw	r2,-20(fp)
    24e4:	10c00117 	ldw	r3,4(r2)
    24e8:	00a00034 	movhi	r2,32768
    24ec:	10bfffc4 	addi	r2,r2,-1
    24f0:	18802226 	beq	r3,r2,257c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    24f4:	e0bffd17 	ldw	r2,-12(fp)
    24f8:	10800017 	ldw	r2,0(r2)
    24fc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2500:	e0bff917 	ldw	r2,-28(fp)
    2504:	10800090 	cmplti	r2,r2,2
    2508:	1000071e 	bne	r2,zero,2528 <altera_avalon_jtag_uart_ioctl+0x8c>
    250c:	e0fff917 	ldw	r3,-28(fp)
    2510:	00a00034 	movhi	r2,32768
    2514:	10bfffc4 	addi	r2,r2,-1
    2518:	18800326 	beq	r3,r2,2528 <altera_avalon_jtag_uart_ioctl+0x8c>
    251c:	e0bff917 	ldw	r2,-28(fp)
    2520:	e0bffe15 	stw	r2,-8(fp)
    2524:	00000306 	br	2534 <altera_avalon_jtag_uart_ioctl+0x98>
    2528:	00e00034 	movhi	r3,32768
    252c:	18ffff84 	addi	r3,r3,-2
    2530:	e0fffe15 	stw	r3,-8(fp)
    2534:	e0bffb17 	ldw	r2,-20(fp)
    2538:	e0fffe17 	ldw	r3,-8(fp)
    253c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    2540:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    2544:	00000d06 	br	257c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    2548:	e0bffb17 	ldw	r2,-20(fp)
    254c:	10c00117 	ldw	r3,4(r2)
    2550:	00a00034 	movhi	r2,32768
    2554:	10bfffc4 	addi	r2,r2,-1
    2558:	18800826 	beq	r3,r2,257c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    255c:	e13ffd17 	ldw	r4,-12(fp)
    2560:	e0bffb17 	ldw	r2,-20(fp)
    2564:	10c00917 	ldw	r3,36(r2)
    2568:	e0bffb17 	ldw	r2,-20(fp)
    256c:	10800117 	ldw	r2,4(r2)
    2570:	1885803a 	cmpltu	r2,r3,r2
    2574:	20800015 	stw	r2,0(r4)
      rc = 0;
    2578:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    257c:	e0bffa17 	ldw	r2,-24(fp)
}
    2580:	e037883a 	mov	sp,fp
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00104 	addi	sp,sp,4
    258c:	f800283a 	ret

00002590 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    2590:	defff204 	addi	sp,sp,-56
    2594:	dfc00d15 	stw	ra,52(sp)
    2598:	df000c15 	stw	fp,48(sp)
    259c:	df000c04 	addi	fp,sp,48
    25a0:	e13ffb15 	stw	r4,-20(fp)
    25a4:	e17ffc15 	stw	r5,-16(fp)
    25a8:	e1bffd15 	stw	r6,-12(fp)
    25ac:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    25b0:	e0bffc17 	ldw	r2,-16(fp)
    25b4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    25b8:	00004806 	br	26dc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    25bc:	e0bffb17 	ldw	r2,-20(fp)
    25c0:	10800a17 	ldw	r2,40(r2)
    25c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    25c8:	e0bffb17 	ldw	r2,-20(fp)
    25cc:	10800b17 	ldw	r2,44(r2)
    25d0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    25d4:	e0fff717 	ldw	r3,-36(fp)
    25d8:	e0bff617 	ldw	r2,-40(fp)
    25dc:	18800536 	bltu	r3,r2,25f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    25e0:	e0bff717 	ldw	r2,-36(fp)
    25e4:	e0fff617 	ldw	r3,-40(fp)
    25e8:	10c5c83a 	sub	r2,r2,r3
    25ec:	e0bff815 	stw	r2,-32(fp)
    25f0:	00000406 	br	2604 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    25f4:	00820004 	movi	r2,2048
    25f8:	e0fff617 	ldw	r3,-40(fp)
    25fc:	10c5c83a 	sub	r2,r2,r3
    2600:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    2604:	e0bff817 	ldw	r2,-32(fp)
    2608:	1005003a 	cmpeq	r2,r2,zero
    260c:	10001f1e 	bne	r2,zero,268c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    2610:	e0fffd17 	ldw	r3,-12(fp)
    2614:	e0bff817 	ldw	r2,-32(fp)
    2618:	1880022e 	bgeu	r3,r2,2624 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    261c:	e0bffd17 	ldw	r2,-12(fp)
    2620:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    2624:	e0bffb17 	ldw	r2,-20(fp)
    2628:	10c00e04 	addi	r3,r2,56
    262c:	e0bff617 	ldw	r2,-40(fp)
    2630:	1887883a 	add	r3,r3,r2
    2634:	e0bffa17 	ldw	r2,-24(fp)
    2638:	1009883a 	mov	r4,r2
    263c:	180b883a 	mov	r5,r3
    2640:	e1bff817 	ldw	r6,-32(fp)
    2644:	00039700 	call	3970 <memcpy>
      ptr   += n;
    2648:	e0fff817 	ldw	r3,-32(fp)
    264c:	e0bffa17 	ldw	r2,-24(fp)
    2650:	10c5883a 	add	r2,r2,r3
    2654:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    2658:	e0fffd17 	ldw	r3,-12(fp)
    265c:	e0bff817 	ldw	r2,-32(fp)
    2660:	1885c83a 	sub	r2,r3,r2
    2664:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2668:	e0fff617 	ldw	r3,-40(fp)
    266c:	e0bff817 	ldw	r2,-32(fp)
    2670:	1885883a 	add	r2,r3,r2
    2674:	10c1ffcc 	andi	r3,r2,2047
    2678:	e0bffb17 	ldw	r2,-20(fp)
    267c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    2680:	e0bffd17 	ldw	r2,-12(fp)
    2684:	10800048 	cmpgei	r2,r2,1
    2688:	103fcc1e 	bne	r2,zero,25bc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    268c:	e0fffa17 	ldw	r3,-24(fp)
    2690:	e0bffc17 	ldw	r2,-16(fp)
    2694:	1880141e 	bne	r3,r2,26e8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    2698:	e0bffe17 	ldw	r2,-8(fp)
    269c:	1090000c 	andi	r2,r2,16384
    26a0:	1004c03a 	cmpne	r2,r2,zero
    26a4:	1000101e 	bne	r2,zero,26e8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    26a8:	e0bffb17 	ldw	r2,-20(fp)
    26ac:	10c00a17 	ldw	r3,40(r2)
    26b0:	e0bff717 	ldw	r2,-36(fp)
    26b4:	1880051e 	bne	r3,r2,26cc <altera_avalon_jtag_uart_read+0x13c>
    26b8:	e0bffb17 	ldw	r2,-20(fp)
    26bc:	10c00917 	ldw	r3,36(r2)
    26c0:	e0bffb17 	ldw	r2,-20(fp)
    26c4:	10800117 	ldw	r2,4(r2)
    26c8:	18bff736 	bltu	r3,r2,26a8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    26cc:	e0bffb17 	ldw	r2,-20(fp)
    26d0:	10c00a17 	ldw	r3,40(r2)
    26d4:	e0bff717 	ldw	r2,-36(fp)
    26d8:	18800326 	beq	r3,r2,26e8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    26dc:	e0bffd17 	ldw	r2,-12(fp)
    26e0:	10800048 	cmpgei	r2,r2,1
    26e4:	103fb51e 	bne	r2,zero,25bc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    26e8:	e0fffa17 	ldw	r3,-24(fp)
    26ec:	e0bffc17 	ldw	r2,-16(fp)
    26f0:	18801926 	beq	r3,r2,2758 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26f4:	0005303a 	rdctl	r2,status
    26f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26fc:	e0fff517 	ldw	r3,-44(fp)
    2700:	00bfff84 	movi	r2,-2
    2704:	1884703a 	and	r2,r3,r2
    2708:	1001703a 	wrctl	status,r2
  
  return context;
    270c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2710:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2714:	e0bffb17 	ldw	r2,-20(fp)
    2718:	10800817 	ldw	r2,32(r2)
    271c:	10c00054 	ori	r3,r2,1
    2720:	e0bffb17 	ldw	r2,-20(fp)
    2724:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2728:	e0bffb17 	ldw	r2,-20(fp)
    272c:	10800017 	ldw	r2,0(r2)
    2730:	11000104 	addi	r4,r2,4
    2734:	e0bffb17 	ldw	r2,-20(fp)
    2738:	10800817 	ldw	r2,32(r2)
    273c:	1007883a 	mov	r3,r2
    2740:	2005883a 	mov	r2,r4
    2744:	10c00035 	stwio	r3,0(r2)
    2748:	e0bff917 	ldw	r2,-28(fp)
    274c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2750:	e0bff417 	ldw	r2,-48(fp)
    2754:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    2758:	e0fffa17 	ldw	r3,-24(fp)
    275c:	e0bffc17 	ldw	r2,-16(fp)
    2760:	18800526 	beq	r3,r2,2778 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    2764:	e0fffa17 	ldw	r3,-24(fp)
    2768:	e0bffc17 	ldw	r2,-16(fp)
    276c:	1887c83a 	sub	r3,r3,r2
    2770:	e0ffff15 	stw	r3,-4(fp)
    2774:	00000906 	br	279c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    2778:	e0bffe17 	ldw	r2,-8(fp)
    277c:	1090000c 	andi	r2,r2,16384
    2780:	1005003a 	cmpeq	r2,r2,zero
    2784:	1000031e 	bne	r2,zero,2794 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    2788:	00bffd44 	movi	r2,-11
    278c:	e0bfff15 	stw	r2,-4(fp)
    2790:	00000206 	br	279c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    2794:	00bffec4 	movi	r2,-5
    2798:	e0bfff15 	stw	r2,-4(fp)
    279c:	e0bfff17 	ldw	r2,-4(fp)
}
    27a0:	e037883a 	mov	sp,fp
    27a4:	dfc00117 	ldw	ra,4(sp)
    27a8:	df000017 	ldw	fp,0(sp)
    27ac:	dec00204 	addi	sp,sp,8
    27b0:	f800283a 	ret

000027b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    27b4:	defff204 	addi	sp,sp,-56
    27b8:	dfc00d15 	stw	ra,52(sp)
    27bc:	df000c15 	stw	fp,48(sp)
    27c0:	df000c04 	addi	fp,sp,48
    27c4:	e13ffb15 	stw	r4,-20(fp)
    27c8:	e17ffc15 	stw	r5,-16(fp)
    27cc:	e1bffd15 	stw	r6,-12(fp)
    27d0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    27d4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    27d8:	e0bffc17 	ldw	r2,-16(fp)
    27dc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    27e0:	00003a06 	br	28cc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    27e4:	e0bffb17 	ldw	r2,-20(fp)
    27e8:	10800c17 	ldw	r2,48(r2)
    27ec:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    27f0:	e0bffb17 	ldw	r2,-20(fp)
    27f4:	10800d17 	ldw	r2,52(r2)
    27f8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    27fc:	e0fffa17 	ldw	r3,-24(fp)
    2800:	e0bff917 	ldw	r2,-28(fp)
    2804:	1880062e 	bgeu	r3,r2,2820 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2808:	e0fff917 	ldw	r3,-28(fp)
    280c:	e0bffa17 	ldw	r2,-24(fp)
    2810:	1885c83a 	sub	r2,r3,r2
    2814:	10bfffc4 	addi	r2,r2,-1
    2818:	e0bff815 	stw	r2,-32(fp)
    281c:	00000c06 	br	2850 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    2820:	e0bff917 	ldw	r2,-28(fp)
    2824:	1005003a 	cmpeq	r2,r2,zero
    2828:	1000051e 	bne	r2,zero,2840 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    282c:	00820004 	movi	r2,2048
    2830:	e0fffa17 	ldw	r3,-24(fp)
    2834:	10c5c83a 	sub	r2,r2,r3
    2838:	e0bff815 	stw	r2,-32(fp)
    283c:	00000406 	br	2850 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2840:	0081ffc4 	movi	r2,2047
    2844:	e0fffa17 	ldw	r3,-24(fp)
    2848:	10c5c83a 	sub	r2,r2,r3
    284c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    2850:	e0bff817 	ldw	r2,-32(fp)
    2854:	1005003a 	cmpeq	r2,r2,zero
    2858:	10001f1e 	bne	r2,zero,28d8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    285c:	e0fffd17 	ldw	r3,-12(fp)
    2860:	e0bff817 	ldw	r2,-32(fp)
    2864:	1880022e 	bgeu	r3,r2,2870 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    2868:	e0bffd17 	ldw	r2,-12(fp)
    286c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    2870:	e0bffb17 	ldw	r2,-20(fp)
    2874:	10c20e04 	addi	r3,r2,2104
    2878:	e0bffa17 	ldw	r2,-24(fp)
    287c:	1885883a 	add	r2,r3,r2
    2880:	e0fffc17 	ldw	r3,-16(fp)
    2884:	1009883a 	mov	r4,r2
    2888:	180b883a 	mov	r5,r3
    288c:	e1bff817 	ldw	r6,-32(fp)
    2890:	00039700 	call	3970 <memcpy>
      ptr   += n;
    2894:	e0fff817 	ldw	r3,-32(fp)
    2898:	e0bffc17 	ldw	r2,-16(fp)
    289c:	10c5883a 	add	r2,r2,r3
    28a0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    28a4:	e0fffd17 	ldw	r3,-12(fp)
    28a8:	e0bff817 	ldw	r2,-32(fp)
    28ac:	1885c83a 	sub	r2,r3,r2
    28b0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    28b4:	e0fffa17 	ldw	r3,-24(fp)
    28b8:	e0bff817 	ldw	r2,-32(fp)
    28bc:	1885883a 	add	r2,r3,r2
    28c0:	10c1ffcc 	andi	r3,r2,2047
    28c4:	e0bffb17 	ldw	r2,-20(fp)
    28c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    28cc:	e0bffd17 	ldw	r2,-12(fp)
    28d0:	10800048 	cmpgei	r2,r2,1
    28d4:	103fc31e 	bne	r2,zero,27e4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28d8:	0005303a 	rdctl	r2,status
    28dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28e0:	e0fff517 	ldw	r3,-44(fp)
    28e4:	00bfff84 	movi	r2,-2
    28e8:	1884703a 	and	r2,r3,r2
    28ec:	1001703a 	wrctl	status,r2
  
  return context;
    28f0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    28f4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    28f8:	e0bffb17 	ldw	r2,-20(fp)
    28fc:	10800817 	ldw	r2,32(r2)
    2900:	10c00094 	ori	r3,r2,2
    2904:	e0bffb17 	ldw	r2,-20(fp)
    2908:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    290c:	e0bffb17 	ldw	r2,-20(fp)
    2910:	10800017 	ldw	r2,0(r2)
    2914:	11000104 	addi	r4,r2,4
    2918:	e0bffb17 	ldw	r2,-20(fp)
    291c:	10800817 	ldw	r2,32(r2)
    2920:	1007883a 	mov	r3,r2
    2924:	2005883a 	mov	r2,r4
    2928:	10c00035 	stwio	r3,0(r2)
    292c:	e0bff717 	ldw	r2,-36(fp)
    2930:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2934:	e0bff417 	ldw	r2,-48(fp)
    2938:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    293c:	e0bffd17 	ldw	r2,-12(fp)
    2940:	10800050 	cmplti	r2,r2,1
    2944:	1000111e 	bne	r2,zero,298c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    2948:	e0bffe17 	ldw	r2,-8(fp)
    294c:	1090000c 	andi	r2,r2,16384
    2950:	1004c03a 	cmpne	r2,r2,zero
    2954:	1000101e 	bne	r2,zero,2998 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2958:	e0bffb17 	ldw	r2,-20(fp)
    295c:	10c00d17 	ldw	r3,52(r2)
    2960:	e0bff917 	ldw	r2,-28(fp)
    2964:	1880051e 	bne	r3,r2,297c <altera_avalon_jtag_uart_write+0x1c8>
    2968:	e0bffb17 	ldw	r2,-20(fp)
    296c:	10c00917 	ldw	r3,36(r2)
    2970:	e0bffb17 	ldw	r2,-20(fp)
    2974:	10800117 	ldw	r2,4(r2)
    2978:	18bff736 	bltu	r3,r2,2958 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    297c:	e0bffb17 	ldw	r2,-20(fp)
    2980:	10c00d17 	ldw	r3,52(r2)
    2984:	e0bff917 	ldw	r2,-28(fp)
    2988:	18800326 	beq	r3,r2,2998 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    298c:	e0bffd17 	ldw	r2,-12(fp)
    2990:	10800048 	cmpgei	r2,r2,1
    2994:	103fcd1e 	bne	r2,zero,28cc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    2998:	e0fffc17 	ldw	r3,-16(fp)
    299c:	e0bff617 	ldw	r2,-40(fp)
    29a0:	18800526 	beq	r3,r2,29b8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    29a4:	e0fffc17 	ldw	r3,-16(fp)
    29a8:	e0bff617 	ldw	r2,-40(fp)
    29ac:	1887c83a 	sub	r3,r3,r2
    29b0:	e0ffff15 	stw	r3,-4(fp)
    29b4:	00000906 	br	29dc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    29b8:	e0bffe17 	ldw	r2,-8(fp)
    29bc:	1090000c 	andi	r2,r2,16384
    29c0:	1005003a 	cmpeq	r2,r2,zero
    29c4:	1000031e 	bne	r2,zero,29d4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    29c8:	00bffd44 	movi	r2,-11
    29cc:	e0bfff15 	stw	r2,-4(fp)
    29d0:	00000206 	br	29dc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    29d4:	00bffec4 	movi	r2,-5
    29d8:	e0bfff15 	stw	r2,-4(fp)
    29dc:	e0bfff17 	ldw	r2,-4(fp)
}
    29e0:	e037883a 	mov	sp,fp
    29e4:	dfc00117 	ldw	ra,4(sp)
    29e8:	df000017 	ldw	fp,0(sp)
    29ec:	dec00204 	addi	sp,sp,8
    29f0:	f800283a 	ret

000029f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    29f4:	defffa04 	addi	sp,sp,-24
    29f8:	dfc00515 	stw	ra,20(sp)
    29fc:	df000415 	stw	fp,16(sp)
    2a00:	df000404 	addi	fp,sp,16
    2a04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2a08:	e0bfff17 	ldw	r2,-4(fp)
    2a0c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2a10:	e0bfff17 	ldw	r2,-4(fp)
    2a14:	10800104 	addi	r2,r2,4
    2a18:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a1c:	0005303a 	rdctl	r2,status
    2a20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a24:	e0fffd17 	ldw	r3,-12(fp)
    2a28:	00bfff84 	movi	r2,-2
    2a2c:	1884703a 	and	r2,r3,r2
    2a30:	1001703a 	wrctl	status,r2
  
  return context;
    2a34:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    2a38:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    2a3c:	0001d740 	call	1d74 <alt_tick>
    2a40:	e0bffe17 	ldw	r2,-8(fp)
    2a44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2a48:	e0bffc17 	ldw	r2,-16(fp)
    2a4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    2a50:	e037883a 	mov	sp,fp
    2a54:	dfc00117 	ldw	ra,4(sp)
    2a58:	df000017 	ldw	fp,0(sp)
    2a5c:	dec00204 	addi	sp,sp,8
    2a60:	f800283a 	ret

00002a64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    2a64:	defff804 	addi	sp,sp,-32
    2a68:	dfc00715 	stw	ra,28(sp)
    2a6c:	df000615 	stw	fp,24(sp)
    2a70:	df000604 	addi	fp,sp,24
    2a74:	e13ffc15 	stw	r4,-16(fp)
    2a78:	e17ffd15 	stw	r5,-12(fp)
    2a7c:	e1bffe15 	stw	r6,-8(fp)
    2a80:	e1ffff15 	stw	r7,-4(fp)
    2a84:	e0bfff17 	ldw	r2,-4(fp)
    2a88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    2a8c:	00800074 	movhi	r2,1
    2a90:	10a33104 	addi	r2,r2,-29500
    2a94:	10800017 	ldw	r2,0(r2)
    2a98:	1004c03a 	cmpne	r2,r2,zero
    2a9c:	1000041e 	bne	r2,zero,2ab0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    2aa0:	00c00074 	movhi	r3,1
    2aa4:	18e33104 	addi	r3,r3,-29500
    2aa8:	e0bffb17 	ldw	r2,-20(fp)
    2aac:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    2ab0:	e0bffc17 	ldw	r2,-16(fp)
    2ab4:	10800104 	addi	r2,r2,4
    2ab8:	1007883a 	mov	r3,r2
    2abc:	008001c4 	movi	r2,7
    2ac0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    2ac4:	d8000015 	stw	zero,0(sp)
    2ac8:	e13ffd17 	ldw	r4,-12(fp)
    2acc:	e17ffe17 	ldw	r5,-8(fp)
    2ad0:	01800034 	movhi	r6,0
    2ad4:	318a7d04 	addi	r6,r6,10740
    2ad8:	e1fffc17 	ldw	r7,-16(fp)
    2adc:	0002e940 	call	2e94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    2ae0:	e037883a 	mov	sp,fp
    2ae4:	dfc00117 	ldw	ra,4(sp)
    2ae8:	df000017 	ldw	fp,0(sp)
    2aec:	dec00204 	addi	sp,sp,8
    2af0:	f800283a 	ret

00002af4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2af4:	defff804 	addi	sp,sp,-32
    2af8:	dfc00715 	stw	ra,28(sp)
    2afc:	df000615 	stw	fp,24(sp)
    2b00:	df000604 	addi	fp,sp,24
    2b04:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2b08:	e0bffc17 	ldw	r2,-16(fp)
    2b0c:	1004803a 	cmplt	r2,r2,zero
    2b10:	1000091e 	bne	r2,zero,2b38 <close+0x44>
    2b14:	e13ffc17 	ldw	r4,-16(fp)
    2b18:	01400304 	movi	r5,12
    2b1c:	0000a4c0 	call	a4c <__mulsi3>
    2b20:	1007883a 	mov	r3,r2
    2b24:	00800034 	movhi	r2,0
    2b28:	109c2704 	addi	r2,r2,28828
    2b2c:	1887883a 	add	r3,r3,r2
    2b30:	e0ffff15 	stw	r3,-4(fp)
    2b34:	00000106 	br	2b3c <close+0x48>
    2b38:	e03fff15 	stw	zero,-4(fp)
    2b3c:	e0bfff17 	ldw	r2,-4(fp)
    2b40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2b44:	e0bffb17 	ldw	r2,-20(fp)
    2b48:	1005003a 	cmpeq	r2,r2,zero
    2b4c:	10001d1e 	bne	r2,zero,2bc4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2b50:	e0bffb17 	ldw	r2,-20(fp)
    2b54:	10800017 	ldw	r2,0(r2)
    2b58:	10800417 	ldw	r2,16(r2)
    2b5c:	1005003a 	cmpeq	r2,r2,zero
    2b60:	1000071e 	bne	r2,zero,2b80 <close+0x8c>
    2b64:	e0bffb17 	ldw	r2,-20(fp)
    2b68:	10800017 	ldw	r2,0(r2)
    2b6c:	10800417 	ldw	r2,16(r2)
    2b70:	e13ffb17 	ldw	r4,-20(fp)
    2b74:	103ee83a 	callr	r2
    2b78:	e0bffe15 	stw	r2,-8(fp)
    2b7c:	00000106 	br	2b84 <close+0x90>
    2b80:	e03ffe15 	stw	zero,-8(fp)
    2b84:	e0bffe17 	ldw	r2,-8(fp)
    2b88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2b8c:	e13ffc17 	ldw	r4,-16(fp)
    2b90:	00035940 	call	3594 <alt_release_fd>
    if (rval < 0)
    2b94:	e0bffa17 	ldw	r2,-24(fp)
    2b98:	1004403a 	cmpge	r2,r2,zero
    2b9c:	1000071e 	bne	r2,zero,2bbc <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2ba0:	0002bf40 	call	2bf4 <alt_get_errno>
    2ba4:	e0fffa17 	ldw	r3,-24(fp)
    2ba8:	00c7c83a 	sub	r3,zero,r3
    2bac:	10c00015 	stw	r3,0(r2)
      return -1;
    2bb0:	00bfffc4 	movi	r2,-1
    2bb4:	e0bffd15 	stw	r2,-12(fp)
    2bb8:	00000806 	br	2bdc <close+0xe8>
    }
    return 0;
    2bbc:	e03ffd15 	stw	zero,-12(fp)
    2bc0:	00000606 	br	2bdc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2bc4:	0002bf40 	call	2bf4 <alt_get_errno>
    2bc8:	1007883a 	mov	r3,r2
    2bcc:	00801444 	movi	r2,81
    2bd0:	18800015 	stw	r2,0(r3)
    return -1;
    2bd4:	00bfffc4 	movi	r2,-1
    2bd8:	e0bffd15 	stw	r2,-12(fp)
    2bdc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2be0:	e037883a 	mov	sp,fp
    2be4:	dfc00117 	ldw	ra,4(sp)
    2be8:	df000017 	ldw	fp,0(sp)
    2bec:	dec00204 	addi	sp,sp,8
    2bf0:	f800283a 	ret

00002bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2bf4:	defffd04 	addi	sp,sp,-12
    2bf8:	dfc00215 	stw	ra,8(sp)
    2bfc:	df000115 	stw	fp,4(sp)
    2c00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2c04:	00800034 	movhi	r2,0
    2c08:	109c9304 	addi	r2,r2,29260
    2c0c:	10800017 	ldw	r2,0(r2)
    2c10:	1005003a 	cmpeq	r2,r2,zero
    2c14:	1000061e 	bne	r2,zero,2c30 <alt_get_errno+0x3c>
    2c18:	00800034 	movhi	r2,0
    2c1c:	109c9304 	addi	r2,r2,29260
    2c20:	10800017 	ldw	r2,0(r2)
    2c24:	103ee83a 	callr	r2
    2c28:	e0bfff15 	stw	r2,-4(fp)
    2c2c:	00000306 	br	2c3c <alt_get_errno+0x48>
    2c30:	00800074 	movhi	r2,1
    2c34:	10a32d04 	addi	r2,r2,-29516
    2c38:	e0bfff15 	stw	r2,-4(fp)
    2c3c:	e0bfff17 	ldw	r2,-4(fp)
}
    2c40:	e037883a 	mov	sp,fp
    2c44:	dfc00117 	ldw	ra,4(sp)
    2c48:	df000017 	ldw	fp,0(sp)
    2c4c:	dec00204 	addi	sp,sp,8
    2c50:	f800283a 	ret

00002c54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2c54:	deffff04 	addi	sp,sp,-4
    2c58:	df000015 	stw	fp,0(sp)
    2c5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2c70:	defffc04 	addi	sp,sp,-16
    2c74:	df000315 	stw	fp,12(sp)
    2c78:	df000304 	addi	fp,sp,12
    2c7c:	e13ffd15 	stw	r4,-12(fp)
    2c80:	e17ffe15 	stw	r5,-8(fp)
    2c84:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2c88:	e0bfff17 	ldw	r2,-4(fp)
}
    2c8c:	e037883a 	mov	sp,fp
    2c90:	df000017 	ldw	fp,0(sp)
    2c94:	dec00104 	addi	sp,sp,4
    2c98:	f800283a 	ret

00002c9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2c9c:	defff904 	addi	sp,sp,-28
    2ca0:	dfc00615 	stw	ra,24(sp)
    2ca4:	df000515 	stw	fp,20(sp)
    2ca8:	df000504 	addi	fp,sp,20
    2cac:	e13ffd15 	stw	r4,-12(fp)
    2cb0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2cb4:	e0bffd17 	ldw	r2,-12(fp)
    2cb8:	1005003a 	cmpeq	r2,r2,zero
    2cbc:	1000041e 	bne	r2,zero,2cd0 <alt_dev_llist_insert+0x34>
    2cc0:	e0bffd17 	ldw	r2,-12(fp)
    2cc4:	10800217 	ldw	r2,8(r2)
    2cc8:	1004c03a 	cmpne	r2,r2,zero
    2ccc:	1000071e 	bne	r2,zero,2cec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2cd0:	0002d500 	call	2d50 <alt_get_errno>
    2cd4:	1007883a 	mov	r3,r2
    2cd8:	00800584 	movi	r2,22
    2cdc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2ce0:	00bffa84 	movi	r2,-22
    2ce4:	e0bfff15 	stw	r2,-4(fp)
    2ce8:	00001306 	br	2d38 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2cec:	e0fffd17 	ldw	r3,-12(fp)
    2cf0:	e0bffe17 	ldw	r2,-8(fp)
    2cf4:	e0bffb15 	stw	r2,-20(fp)
    2cf8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2cfc:	e0fffc17 	ldw	r3,-16(fp)
    2d00:	e0bffb17 	ldw	r2,-20(fp)
    2d04:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2d08:	e0bffb17 	ldw	r2,-20(fp)
    2d0c:	10c00017 	ldw	r3,0(r2)
    2d10:	e0bffc17 	ldw	r2,-16(fp)
    2d14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2d18:	e0bffb17 	ldw	r2,-20(fp)
    2d1c:	10c00017 	ldw	r3,0(r2)
    2d20:	e0bffc17 	ldw	r2,-16(fp)
    2d24:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2d28:	e0fffb17 	ldw	r3,-20(fp)
    2d2c:	e0bffc17 	ldw	r2,-16(fp)
    2d30:	18800015 	stw	r2,0(r3)

  return 0;  
    2d34:	e03fff15 	stw	zero,-4(fp)
    2d38:	e0bfff17 	ldw	r2,-4(fp)
}
    2d3c:	e037883a 	mov	sp,fp
    2d40:	dfc00117 	ldw	ra,4(sp)
    2d44:	df000017 	ldw	fp,0(sp)
    2d48:	dec00204 	addi	sp,sp,8
    2d4c:	f800283a 	ret

00002d50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2d50:	defffd04 	addi	sp,sp,-12
    2d54:	dfc00215 	stw	ra,8(sp)
    2d58:	df000115 	stw	fp,4(sp)
    2d5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2d60:	00800034 	movhi	r2,0
    2d64:	109c9304 	addi	r2,r2,29260
    2d68:	10800017 	ldw	r2,0(r2)
    2d6c:	1005003a 	cmpeq	r2,r2,zero
    2d70:	1000061e 	bne	r2,zero,2d8c <alt_get_errno+0x3c>
    2d74:	00800034 	movhi	r2,0
    2d78:	109c9304 	addi	r2,r2,29260
    2d7c:	10800017 	ldw	r2,0(r2)
    2d80:	103ee83a 	callr	r2
    2d84:	e0bfff15 	stw	r2,-4(fp)
    2d88:	00000306 	br	2d98 <alt_get_errno+0x48>
    2d8c:	00800074 	movhi	r2,1
    2d90:	10a32d04 	addi	r2,r2,-29516
    2d94:	e0bfff15 	stw	r2,-4(fp)
    2d98:	e0bfff17 	ldw	r2,-4(fp)
}
    2d9c:	e037883a 	mov	sp,fp
    2da0:	dfc00117 	ldw	ra,4(sp)
    2da4:	df000017 	ldw	fp,0(sp)
    2da8:	dec00204 	addi	sp,sp,8
    2dac:	f800283a 	ret

00002db0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2db0:	defffd04 	addi	sp,sp,-12
    2db4:	dfc00215 	stw	ra,8(sp)
    2db8:	df000115 	stw	fp,4(sp)
    2dbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2dc0:	00bfff04 	movi	r2,-4
    2dc4:	00c00034 	movhi	r3,0
    2dc8:	18d5be04 	addi	r3,r3,22264
    2dcc:	1885883a 	add	r2,r3,r2
    2dd0:	e0bfff15 	stw	r2,-4(fp)
    2dd4:	00000606 	br	2df0 <_do_ctors+0x40>
        (*ctor) (); 
    2dd8:	e0bfff17 	ldw	r2,-4(fp)
    2ddc:	10800017 	ldw	r2,0(r2)
    2de0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2de4:	e0bfff17 	ldw	r2,-4(fp)
    2de8:	10bfff04 	addi	r2,r2,-4
    2dec:	e0bfff15 	stw	r2,-4(fp)
    2df0:	e0ffff17 	ldw	r3,-4(fp)
    2df4:	00800034 	movhi	r2,0
    2df8:	1095bd04 	addi	r2,r2,22260
    2dfc:	18bff62e 	bgeu	r3,r2,2dd8 <_do_ctors+0x28>
        (*ctor) (); 
}
    2e00:	e037883a 	mov	sp,fp
    2e04:	dfc00117 	ldw	ra,4(sp)
    2e08:	df000017 	ldw	fp,0(sp)
    2e0c:	dec00204 	addi	sp,sp,8
    2e10:	f800283a 	ret

00002e14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2e14:	defffd04 	addi	sp,sp,-12
    2e18:	dfc00215 	stw	ra,8(sp)
    2e1c:	df000115 	stw	fp,4(sp)
    2e20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2e24:	00bfff04 	movi	r2,-4
    2e28:	00c00034 	movhi	r3,0
    2e2c:	18d5be04 	addi	r3,r3,22264
    2e30:	1885883a 	add	r2,r3,r2
    2e34:	e0bfff15 	stw	r2,-4(fp)
    2e38:	00000606 	br	2e54 <_do_dtors+0x40>
        (*dtor) (); 
    2e3c:	e0bfff17 	ldw	r2,-4(fp)
    2e40:	10800017 	ldw	r2,0(r2)
    2e44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2e48:	e0bfff17 	ldw	r2,-4(fp)
    2e4c:	10bfff04 	addi	r2,r2,-4
    2e50:	e0bfff15 	stw	r2,-4(fp)
    2e54:	e0ffff17 	ldw	r3,-4(fp)
    2e58:	00800034 	movhi	r2,0
    2e5c:	1095be04 	addi	r2,r2,22264
    2e60:	18bff62e 	bgeu	r3,r2,2e3c <_do_dtors+0x28>
        (*dtor) (); 
}
    2e64:	e037883a 	mov	sp,fp
    2e68:	dfc00117 	ldw	ra,4(sp)
    2e6c:	df000017 	ldw	fp,0(sp)
    2e70:	dec00204 	addi	sp,sp,8
    2e74:	f800283a 	ret

00002e78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2e78:	deffff04 	addi	sp,sp,-4
    2e7c:	df000015 	stw	fp,0(sp)
    2e80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2e84:	e037883a 	mov	sp,fp
    2e88:	df000017 	ldw	fp,0(sp)
    2e8c:	dec00104 	addi	sp,sp,4
    2e90:	f800283a 	ret

00002e94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2e94:	defff904 	addi	sp,sp,-28
    2e98:	dfc00615 	stw	ra,24(sp)
    2e9c:	df000515 	stw	fp,20(sp)
    2ea0:	df000504 	addi	fp,sp,20
    2ea4:	e13ffc15 	stw	r4,-16(fp)
    2ea8:	e17ffd15 	stw	r5,-12(fp)
    2eac:	e1bffe15 	stw	r6,-8(fp)
    2eb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2eb4:	e0800217 	ldw	r2,8(fp)
    2eb8:	d8800015 	stw	r2,0(sp)
    2ebc:	e13ffc17 	ldw	r4,-16(fp)
    2ec0:	e17ffd17 	ldw	r5,-12(fp)
    2ec4:	e1bffe17 	ldw	r6,-8(fp)
    2ec8:	e1ffff17 	ldw	r7,-4(fp)
    2ecc:	00030680 	call	3068 <alt_iic_isr_register>
}  
    2ed0:	e037883a 	mov	sp,fp
    2ed4:	dfc00117 	ldw	ra,4(sp)
    2ed8:	df000017 	ldw	fp,0(sp)
    2edc:	dec00204 	addi	sp,sp,8
    2ee0:	f800283a 	ret

00002ee4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2ee4:	defff904 	addi	sp,sp,-28
    2ee8:	df000615 	stw	fp,24(sp)
    2eec:	df000604 	addi	fp,sp,24
    2ef0:	e13ffe15 	stw	r4,-8(fp)
    2ef4:	e17fff15 	stw	r5,-4(fp)
    2ef8:	e0bfff17 	ldw	r2,-4(fp)
    2efc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f00:	0005303a 	rdctl	r2,status
    2f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f08:	e0fffb17 	ldw	r3,-20(fp)
    2f0c:	00bfff84 	movi	r2,-2
    2f10:	1884703a 	and	r2,r3,r2
    2f14:	1001703a 	wrctl	status,r2
  
  return context;
    2f18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2f1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    2f20:	e0fffc17 	ldw	r3,-16(fp)
    2f24:	00800044 	movi	r2,1
    2f28:	10c4983a 	sll	r2,r2,r3
    2f2c:	1007883a 	mov	r3,r2
    2f30:	00800074 	movhi	r2,1
    2f34:	10a33304 	addi	r2,r2,-29492
    2f38:	10800017 	ldw	r2,0(r2)
    2f3c:	1886b03a 	or	r3,r3,r2
    2f40:	00800074 	movhi	r2,1
    2f44:	10a33304 	addi	r2,r2,-29492
    2f48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2f4c:	00800074 	movhi	r2,1
    2f50:	10a33304 	addi	r2,r2,-29492
    2f54:	10800017 	ldw	r2,0(r2)
    2f58:	100170fa 	wrctl	ienable,r2
    2f5c:	e0bffd17 	ldw	r2,-12(fp)
    2f60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2f64:	e0bffa17 	ldw	r2,-24(fp)
    2f68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2f6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    2f70:	e037883a 	mov	sp,fp
    2f74:	df000017 	ldw	fp,0(sp)
    2f78:	dec00104 	addi	sp,sp,4
    2f7c:	f800283a 	ret

00002f80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2f80:	defff904 	addi	sp,sp,-28
    2f84:	df000615 	stw	fp,24(sp)
    2f88:	df000604 	addi	fp,sp,24
    2f8c:	e13ffe15 	stw	r4,-8(fp)
    2f90:	e17fff15 	stw	r5,-4(fp)
    2f94:	e0bfff17 	ldw	r2,-4(fp)
    2f98:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f9c:	0005303a 	rdctl	r2,status
    2fa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fa4:	e0fffb17 	ldw	r3,-20(fp)
    2fa8:	00bfff84 	movi	r2,-2
    2fac:	1884703a 	and	r2,r3,r2
    2fb0:	1001703a 	wrctl	status,r2
  
  return context;
    2fb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2fb8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    2fbc:	e0fffc17 	ldw	r3,-16(fp)
    2fc0:	00800044 	movi	r2,1
    2fc4:	10c4983a 	sll	r2,r2,r3
    2fc8:	0084303a 	nor	r2,zero,r2
    2fcc:	1007883a 	mov	r3,r2
    2fd0:	00800074 	movhi	r2,1
    2fd4:	10a33304 	addi	r2,r2,-29492
    2fd8:	10800017 	ldw	r2,0(r2)
    2fdc:	1886703a 	and	r3,r3,r2
    2fe0:	00800074 	movhi	r2,1
    2fe4:	10a33304 	addi	r2,r2,-29492
    2fe8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2fec:	00800074 	movhi	r2,1
    2ff0:	10a33304 	addi	r2,r2,-29492
    2ff4:	10800017 	ldw	r2,0(r2)
    2ff8:	100170fa 	wrctl	ienable,r2
    2ffc:	e0bffd17 	ldw	r2,-12(fp)
    3000:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3004:	e0bffa17 	ldw	r2,-24(fp)
    3008:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    300c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    3010:	e037883a 	mov	sp,fp
    3014:	df000017 	ldw	fp,0(sp)
    3018:	dec00104 	addi	sp,sp,4
    301c:	f800283a 	ret

00003020 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    3020:	defffc04 	addi	sp,sp,-16
    3024:	df000315 	stw	fp,12(sp)
    3028:	df000304 	addi	fp,sp,12
    302c:	e13ffe15 	stw	r4,-8(fp)
    3030:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    3034:	000530fa 	rdctl	r2,ienable
    3038:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    303c:	e0ffff17 	ldw	r3,-4(fp)
    3040:	00800044 	movi	r2,1
    3044:	10c4983a 	sll	r2,r2,r3
    3048:	1007883a 	mov	r3,r2
    304c:	e0bffd17 	ldw	r2,-12(fp)
    3050:	1884703a 	and	r2,r3,r2
    3054:	1004c03a 	cmpne	r2,r2,zero
}
    3058:	e037883a 	mov	sp,fp
    305c:	df000017 	ldw	fp,0(sp)
    3060:	dec00104 	addi	sp,sp,4
    3064:	f800283a 	ret

00003068 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3068:	defff404 	addi	sp,sp,-48
    306c:	dfc00b15 	stw	ra,44(sp)
    3070:	df000a15 	stw	fp,40(sp)
    3074:	df000a04 	addi	fp,sp,40
    3078:	e13ffb15 	stw	r4,-20(fp)
    307c:	e17ffc15 	stw	r5,-16(fp)
    3080:	e1bffd15 	stw	r6,-12(fp)
    3084:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    3088:	00bffa84 	movi	r2,-22
    308c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    3090:	e0bffc17 	ldw	r2,-16(fp)
    3094:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3098:	e0bff917 	ldw	r2,-28(fp)
    309c:	10800808 	cmpgei	r2,r2,32
    30a0:	1000291e 	bne	r2,zero,3148 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    30a4:	0005303a 	rdctl	r2,status
    30a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    30ac:	e0fff717 	ldw	r3,-36(fp)
    30b0:	00bfff84 	movi	r2,-2
    30b4:	1884703a 	and	r2,r3,r2
    30b8:	1001703a 	wrctl	status,r2
  
  return context;
    30bc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    30c0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    30c4:	e0bff917 	ldw	r2,-28(fp)
    30c8:	00c00074 	movhi	r3,1
    30cc:	18e35004 	addi	r3,r3,-29376
    30d0:	100490fa 	slli	r2,r2,3
    30d4:	10c7883a 	add	r3,r2,r3
    30d8:	e0bffd17 	ldw	r2,-12(fp)
    30dc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    30e0:	e0bff917 	ldw	r2,-28(fp)
    30e4:	00c00074 	movhi	r3,1
    30e8:	18e35004 	addi	r3,r3,-29376
    30ec:	100490fa 	slli	r2,r2,3
    30f0:	10c5883a 	add	r2,r2,r3
    30f4:	10c00104 	addi	r3,r2,4
    30f8:	e0bffe17 	ldw	r2,-8(fp)
    30fc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    3100:	e0bffd17 	ldw	r2,-12(fp)
    3104:	1005003a 	cmpeq	r2,r2,zero
    3108:	1000051e 	bne	r2,zero,3120 <alt_iic_isr_register+0xb8>
    310c:	e17ff917 	ldw	r5,-28(fp)
    3110:	e13ffb17 	ldw	r4,-20(fp)
    3114:	0002ee40 	call	2ee4 <alt_ic_irq_enable>
    3118:	e0bfff15 	stw	r2,-4(fp)
    311c:	00000406 	br	3130 <alt_iic_isr_register+0xc8>
    3120:	e17ff917 	ldw	r5,-28(fp)
    3124:	e13ffb17 	ldw	r4,-20(fp)
    3128:	0002f800 	call	2f80 <alt_ic_irq_disable>
    312c:	e0bfff15 	stw	r2,-4(fp)
    3130:	e0bfff17 	ldw	r2,-4(fp)
    3134:	e0bffa15 	stw	r2,-24(fp)
    3138:	e0bff817 	ldw	r2,-32(fp)
    313c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3140:	e0bff617 	ldw	r2,-40(fp)
    3144:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    3148:	e0bffa17 	ldw	r2,-24(fp)
}
    314c:	e037883a 	mov	sp,fp
    3150:	dfc00117 	ldw	ra,4(sp)
    3154:	df000017 	ldw	fp,0(sp)
    3158:	dec00204 	addi	sp,sp,8
    315c:	f800283a 	ret

00003160 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    3160:	defff804 	addi	sp,sp,-32
    3164:	dfc00715 	stw	ra,28(sp)
    3168:	df000615 	stw	fp,24(sp)
    316c:	dc000515 	stw	r16,20(sp)
    3170:	df000504 	addi	fp,sp,20
    3174:	e13ffc15 	stw	r4,-16(fp)
    3178:	e17ffd15 	stw	r5,-12(fp)
    317c:	e1bffe15 	stw	r6,-8(fp)
    3180:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    3184:	e13ffd17 	ldw	r4,-12(fp)
    3188:	e17ffe17 	ldw	r5,-8(fp)
    318c:	e1bfff17 	ldw	r6,-4(fp)
    3190:	00033a80 	call	33a8 <open>
    3194:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    3198:	e0bffb17 	ldw	r2,-20(fp)
    319c:	1004803a 	cmplt	r2,r2,zero
    31a0:	10001f1e 	bne	r2,zero,3220 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    31a4:	e13ffb17 	ldw	r4,-20(fp)
    31a8:	04000034 	movhi	r16,0
    31ac:	841c2704 	addi	r16,r16,28828
    31b0:	01400304 	movi	r5,12
    31b4:	0000a4c0 	call	a4c <__mulsi3>
    31b8:	1405883a 	add	r2,r2,r16
    31bc:	10c00017 	ldw	r3,0(r2)
    31c0:	e0bffc17 	ldw	r2,-16(fp)
    31c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    31c8:	e13ffb17 	ldw	r4,-20(fp)
    31cc:	04000034 	movhi	r16,0
    31d0:	841c2704 	addi	r16,r16,28828
    31d4:	01400304 	movi	r5,12
    31d8:	0000a4c0 	call	a4c <__mulsi3>
    31dc:	1405883a 	add	r2,r2,r16
    31e0:	10800104 	addi	r2,r2,4
    31e4:	10c00017 	ldw	r3,0(r2)
    31e8:	e0bffc17 	ldw	r2,-16(fp)
    31ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    31f0:	e13ffb17 	ldw	r4,-20(fp)
    31f4:	04000034 	movhi	r16,0
    31f8:	841c2704 	addi	r16,r16,28828
    31fc:	01400304 	movi	r5,12
    3200:	0000a4c0 	call	a4c <__mulsi3>
    3204:	1405883a 	add	r2,r2,r16
    3208:	10800204 	addi	r2,r2,8
    320c:	10c00017 	ldw	r3,0(r2)
    3210:	e0bffc17 	ldw	r2,-16(fp)
    3214:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3218:	e13ffb17 	ldw	r4,-20(fp)
    321c:	00035940 	call	3594 <alt_release_fd>
  }
} 
    3220:	e037883a 	mov	sp,fp
    3224:	dfc00217 	ldw	ra,8(sp)
    3228:	df000117 	ldw	fp,4(sp)
    322c:	dc000017 	ldw	r16,0(sp)
    3230:	dec00304 	addi	sp,sp,12
    3234:	f800283a 	ret

00003238 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3238:	defffb04 	addi	sp,sp,-20
    323c:	dfc00415 	stw	ra,16(sp)
    3240:	df000315 	stw	fp,12(sp)
    3244:	df000304 	addi	fp,sp,12
    3248:	e13ffd15 	stw	r4,-12(fp)
    324c:	e17ffe15 	stw	r5,-8(fp)
    3250:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    3254:	01000034 	movhi	r4,0
    3258:	211c2a04 	addi	r4,r4,28840
    325c:	e17ffd17 	ldw	r5,-12(fp)
    3260:	01800044 	movi	r6,1
    3264:	01c07fc4 	movi	r7,511
    3268:	00031600 	call	3160 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    326c:	01000034 	movhi	r4,0
    3270:	211c2704 	addi	r4,r4,28828
    3274:	e17ffe17 	ldw	r5,-8(fp)
    3278:	000d883a 	mov	r6,zero
    327c:	01c07fc4 	movi	r7,511
    3280:	00031600 	call	3160 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    3284:	01000034 	movhi	r4,0
    3288:	211c2d04 	addi	r4,r4,28852
    328c:	e17fff17 	ldw	r5,-4(fp)
    3290:	01800044 	movi	r6,1
    3294:	01c07fc4 	movi	r7,511
    3298:	00031600 	call	3160 <alt_open_fd>
}  
    329c:	e037883a 	mov	sp,fp
    32a0:	dfc00117 	ldw	ra,4(sp)
    32a4:	df000017 	ldw	fp,0(sp)
    32a8:	dec00204 	addi	sp,sp,8
    32ac:	f800283a 	ret

000032b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    32b0:	defffa04 	addi	sp,sp,-24
    32b4:	dfc00515 	stw	ra,20(sp)
    32b8:	df000415 	stw	fp,16(sp)
    32bc:	dc000315 	stw	r16,12(sp)
    32c0:	df000304 	addi	fp,sp,12
    32c4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    32c8:	e0bffe17 	ldw	r2,-8(fp)
    32cc:	10800217 	ldw	r2,8(r2)
    32d0:	10d00034 	orhi	r3,r2,16384
    32d4:	e0bffe17 	ldw	r2,-8(fp)
    32d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    32dc:	e03ffd15 	stw	zero,-12(fp)
    32e0:	00002306 	br	3370 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    32e4:	e13ffd17 	ldw	r4,-12(fp)
    32e8:	04000034 	movhi	r16,0
    32ec:	841c2704 	addi	r16,r16,28828
    32f0:	01400304 	movi	r5,12
    32f4:	0000a4c0 	call	a4c <__mulsi3>
    32f8:	1405883a 	add	r2,r2,r16
    32fc:	10c00017 	ldw	r3,0(r2)
    3300:	e0bffe17 	ldw	r2,-8(fp)
    3304:	10800017 	ldw	r2,0(r2)
    3308:	1880161e 	bne	r3,r2,3364 <alt_file_locked+0xb4>
    330c:	e13ffd17 	ldw	r4,-12(fp)
    3310:	04000034 	movhi	r16,0
    3314:	841c2704 	addi	r16,r16,28828
    3318:	01400304 	movi	r5,12
    331c:	0000a4c0 	call	a4c <__mulsi3>
    3320:	1405883a 	add	r2,r2,r16
    3324:	10800204 	addi	r2,r2,8
    3328:	10800017 	ldw	r2,0(r2)
    332c:	1004403a 	cmpge	r2,r2,zero
    3330:	10000c1e 	bne	r2,zero,3364 <alt_file_locked+0xb4>
    3334:	e13ffd17 	ldw	r4,-12(fp)
    3338:	01400304 	movi	r5,12
    333c:	0000a4c0 	call	a4c <__mulsi3>
    3340:	1007883a 	mov	r3,r2
    3344:	00800034 	movhi	r2,0
    3348:	109c2704 	addi	r2,r2,28828
    334c:	1887883a 	add	r3,r3,r2
    3350:	e0bffe17 	ldw	r2,-8(fp)
    3354:	18800326 	beq	r3,r2,3364 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3358:	00bffcc4 	movi	r2,-13
    335c:	e0bfff15 	stw	r2,-4(fp)
    3360:	00000a06 	br	338c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3364:	e0bffd17 	ldw	r2,-12(fp)
    3368:	10800044 	addi	r2,r2,1
    336c:	e0bffd15 	stw	r2,-12(fp)
    3370:	00800034 	movhi	r2,0
    3374:	109c9204 	addi	r2,r2,29256
    3378:	10800017 	ldw	r2,0(r2)
    337c:	1007883a 	mov	r3,r2
    3380:	e0bffd17 	ldw	r2,-12(fp)
    3384:	18bfd72e 	bgeu	r3,r2,32e4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3388:	e03fff15 	stw	zero,-4(fp)
    338c:	e0bfff17 	ldw	r2,-4(fp)
}
    3390:	e037883a 	mov	sp,fp
    3394:	dfc00217 	ldw	ra,8(sp)
    3398:	df000117 	ldw	fp,4(sp)
    339c:	dc000017 	ldw	r16,0(sp)
    33a0:	dec00304 	addi	sp,sp,12
    33a4:	f800283a 	ret

000033a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    33a8:	defff404 	addi	sp,sp,-48
    33ac:	dfc00b15 	stw	ra,44(sp)
    33b0:	df000a15 	stw	fp,40(sp)
    33b4:	df000a04 	addi	fp,sp,40
    33b8:	e13ffb15 	stw	r4,-20(fp)
    33bc:	e17ffc15 	stw	r5,-16(fp)
    33c0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    33c4:	00bfffc4 	movi	r2,-1
    33c8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    33cc:	00bffb44 	movi	r2,-19
    33d0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    33d4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    33d8:	e13ffb17 	ldw	r4,-20(fp)
    33dc:	01400034 	movhi	r5,0
    33e0:	295c9004 	addi	r5,r5,29248
    33e4:	000362c0 	call	362c <alt_find_dev>
    33e8:	e0bffa15 	stw	r2,-24(fp)
    33ec:	e0bffa17 	ldw	r2,-24(fp)
    33f0:	1004c03a 	cmpne	r2,r2,zero
    33f4:	1000051e 	bne	r2,zero,340c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    33f8:	e13ffb17 	ldw	r4,-20(fp)
    33fc:	00036c00 	call	36c0 <alt_find_file>
    3400:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    3404:	00800044 	movi	r2,1
    3408:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    340c:	e0bffa17 	ldw	r2,-24(fp)
    3410:	1005003a 	cmpeq	r2,r2,zero
    3414:	1000311e 	bne	r2,zero,34dc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    3418:	e13ffa17 	ldw	r4,-24(fp)
    341c:	00037e00 	call	37e0 <alt_get_fd>
    3420:	e0bff815 	stw	r2,-32(fp)
    3424:	e0bff817 	ldw	r2,-32(fp)
    3428:	1004403a 	cmpge	r2,r2,zero
    342c:	1000031e 	bne	r2,zero,343c <open+0x94>
    {
      status = index;
    3430:	e0bff817 	ldw	r2,-32(fp)
    3434:	e0bff715 	stw	r2,-36(fp)
    3438:	00002a06 	br	34e4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    343c:	e13ff817 	ldw	r4,-32(fp)
    3440:	01400304 	movi	r5,12
    3444:	0000a4c0 	call	a4c <__mulsi3>
    3448:	1007883a 	mov	r3,r2
    344c:	00800034 	movhi	r2,0
    3450:	109c2704 	addi	r2,r2,28828
    3454:	1885883a 	add	r2,r3,r2
    3458:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    345c:	e0fffc17 	ldw	r3,-16(fp)
    3460:	00900034 	movhi	r2,16384
    3464:	10bfffc4 	addi	r2,r2,-1
    3468:	1886703a 	and	r3,r3,r2
    346c:	e0bff917 	ldw	r2,-28(fp)
    3470:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3474:	e0bff617 	ldw	r2,-40(fp)
    3478:	1004c03a 	cmpne	r2,r2,zero
    347c:	1000061e 	bne	r2,zero,3498 <open+0xf0>
    3480:	e13ff917 	ldw	r4,-28(fp)
    3484:	00032b00 	call	32b0 <alt_file_locked>
    3488:	e0bff715 	stw	r2,-36(fp)
    348c:	e0bff717 	ldw	r2,-36(fp)
    3490:	1004803a 	cmplt	r2,r2,zero
    3494:	1000131e 	bne	r2,zero,34e4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3498:	e0bffa17 	ldw	r2,-24(fp)
    349c:	10800317 	ldw	r2,12(r2)
    34a0:	1005003a 	cmpeq	r2,r2,zero
    34a4:	1000091e 	bne	r2,zero,34cc <open+0x124>
    34a8:	e0bffa17 	ldw	r2,-24(fp)
    34ac:	10800317 	ldw	r2,12(r2)
    34b0:	e13ff917 	ldw	r4,-28(fp)
    34b4:	e17ffb17 	ldw	r5,-20(fp)
    34b8:	e1bffc17 	ldw	r6,-16(fp)
    34bc:	e1fffd17 	ldw	r7,-12(fp)
    34c0:	103ee83a 	callr	r2
    34c4:	e0bfff15 	stw	r2,-4(fp)
    34c8:	00000106 	br	34d0 <open+0x128>
    34cc:	e03fff15 	stw	zero,-4(fp)
    34d0:	e0bfff17 	ldw	r2,-4(fp)
    34d4:	e0bff715 	stw	r2,-36(fp)
    34d8:	00000206 	br	34e4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    34dc:	00bffb44 	movi	r2,-19
    34e0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    34e4:	e0bff717 	ldw	r2,-36(fp)
    34e8:	1004403a 	cmpge	r2,r2,zero
    34ec:	1000091e 	bne	r2,zero,3514 <open+0x16c>
  {
    alt_release_fd (index);  
    34f0:	e13ff817 	ldw	r4,-32(fp)
    34f4:	00035940 	call	3594 <alt_release_fd>
    ALT_ERRNO = -status;
    34f8:	00035340 	call	3534 <alt_get_errno>
    34fc:	e0fff717 	ldw	r3,-36(fp)
    3500:	00c7c83a 	sub	r3,zero,r3
    3504:	10c00015 	stw	r3,0(r2)
    return -1;
    3508:	00bfffc4 	movi	r2,-1
    350c:	e0bffe15 	stw	r2,-8(fp)
    3510:	00000206 	br	351c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    3514:	e0bff817 	ldw	r2,-32(fp)
    3518:	e0bffe15 	stw	r2,-8(fp)
    351c:	e0bffe17 	ldw	r2,-8(fp)
}
    3520:	e037883a 	mov	sp,fp
    3524:	dfc00117 	ldw	ra,4(sp)
    3528:	df000017 	ldw	fp,0(sp)
    352c:	dec00204 	addi	sp,sp,8
    3530:	f800283a 	ret

00003534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3534:	defffd04 	addi	sp,sp,-12
    3538:	dfc00215 	stw	ra,8(sp)
    353c:	df000115 	stw	fp,4(sp)
    3540:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3544:	00800034 	movhi	r2,0
    3548:	109c9304 	addi	r2,r2,29260
    354c:	10800017 	ldw	r2,0(r2)
    3550:	1005003a 	cmpeq	r2,r2,zero
    3554:	1000061e 	bne	r2,zero,3570 <alt_get_errno+0x3c>
    3558:	00800034 	movhi	r2,0
    355c:	109c9304 	addi	r2,r2,29260
    3560:	10800017 	ldw	r2,0(r2)
    3564:	103ee83a 	callr	r2
    3568:	e0bfff15 	stw	r2,-4(fp)
    356c:	00000306 	br	357c <alt_get_errno+0x48>
    3570:	00800074 	movhi	r2,1
    3574:	10a32d04 	addi	r2,r2,-29516
    3578:	e0bfff15 	stw	r2,-4(fp)
    357c:	e0bfff17 	ldw	r2,-4(fp)
}
    3580:	e037883a 	mov	sp,fp
    3584:	dfc00117 	ldw	ra,4(sp)
    3588:	df000017 	ldw	fp,0(sp)
    358c:	dec00204 	addi	sp,sp,8
    3590:	f800283a 	ret

00003594 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3594:	defffc04 	addi	sp,sp,-16
    3598:	dfc00315 	stw	ra,12(sp)
    359c:	df000215 	stw	fp,8(sp)
    35a0:	dc000115 	stw	r16,4(sp)
    35a4:	df000104 	addi	fp,sp,4
    35a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    35ac:	e0bfff17 	ldw	r2,-4(fp)
    35b0:	108000d0 	cmplti	r2,r2,3
    35b4:	10000f1e 	bne	r2,zero,35f4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    35b8:	e13fff17 	ldw	r4,-4(fp)
    35bc:	04000034 	movhi	r16,0
    35c0:	841c2704 	addi	r16,r16,28828
    35c4:	01400304 	movi	r5,12
    35c8:	0000a4c0 	call	a4c <__mulsi3>
    35cc:	1405883a 	add	r2,r2,r16
    35d0:	10800204 	addi	r2,r2,8
    35d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    35d8:	e13fff17 	ldw	r4,-4(fp)
    35dc:	04000034 	movhi	r16,0
    35e0:	841c2704 	addi	r16,r16,28828
    35e4:	01400304 	movi	r5,12
    35e8:	0000a4c0 	call	a4c <__mulsi3>
    35ec:	1405883a 	add	r2,r2,r16
    35f0:	10000015 	stw	zero,0(r2)
  }
}
    35f4:	e037883a 	mov	sp,fp
    35f8:	dfc00217 	ldw	ra,8(sp)
    35fc:	df000117 	ldw	fp,4(sp)
    3600:	dc000017 	ldw	r16,0(sp)
    3604:	dec00304 	addi	sp,sp,12
    3608:	f800283a 	ret

0000360c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    360c:	deffff04 	addi	sp,sp,-4
    3610:	df000015 	stw	fp,0(sp)
    3614:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3618:	000170fa 	wrctl	ienable,zero
}
    361c:	e037883a 	mov	sp,fp
    3620:	df000017 	ldw	fp,0(sp)
    3624:	dec00104 	addi	sp,sp,4
    3628:	f800283a 	ret

0000362c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    362c:	defff904 	addi	sp,sp,-28
    3630:	dfc00615 	stw	ra,24(sp)
    3634:	df000515 	stw	fp,20(sp)
    3638:	df000504 	addi	fp,sp,20
    363c:	e13ffd15 	stw	r4,-12(fp)
    3640:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3644:	e0bffe17 	ldw	r2,-8(fp)
    3648:	10800017 	ldw	r2,0(r2)
    364c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    3650:	e13ffd17 	ldw	r4,-12(fp)
    3654:	0003bfc0 	call	3bfc <strlen>
    3658:	10800044 	addi	r2,r2,1
    365c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3660:	00000d06 	br	3698 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3664:	e0bffc17 	ldw	r2,-16(fp)
    3668:	11000217 	ldw	r4,8(r2)
    366c:	e1bffb17 	ldw	r6,-20(fp)
    3670:	e17ffd17 	ldw	r5,-12(fp)
    3674:	00038fc0 	call	38fc <memcmp>
    3678:	1004c03a 	cmpne	r2,r2,zero
    367c:	1000031e 	bne	r2,zero,368c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	e0bfff15 	stw	r2,-4(fp)
    3688:	00000706 	br	36a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    368c:	e0bffc17 	ldw	r2,-16(fp)
    3690:	10800017 	ldw	r2,0(r2)
    3694:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3698:	e0fffe17 	ldw	r3,-8(fp)
    369c:	e0bffc17 	ldw	r2,-16(fp)
    36a0:	10fff01e 	bne	r2,r3,3664 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    36a4:	e03fff15 	stw	zero,-4(fp)
    36a8:	e0bfff17 	ldw	r2,-4(fp)
}
    36ac:	e037883a 	mov	sp,fp
    36b0:	dfc00117 	ldw	ra,4(sp)
    36b4:	df000017 	ldw	fp,0(sp)
    36b8:	dec00204 	addi	sp,sp,8
    36bc:	f800283a 	ret

000036c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    36c0:	defffa04 	addi	sp,sp,-24
    36c4:	dfc00515 	stw	ra,20(sp)
    36c8:	df000415 	stw	fp,16(sp)
    36cc:	df000404 	addi	fp,sp,16
    36d0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    36d4:	00800034 	movhi	r2,0
    36d8:	109c8e04 	addi	r2,r2,29240
    36dc:	10800017 	ldw	r2,0(r2)
    36e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    36e4:	00003306 	br	37b4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    36e8:	e0bffd17 	ldw	r2,-12(fp)
    36ec:	11000217 	ldw	r4,8(r2)
    36f0:	0003bfc0 	call	3bfc <strlen>
    36f4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    36f8:	e0bffd17 	ldw	r2,-12(fp)
    36fc:	10c00217 	ldw	r3,8(r2)
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	1885883a 	add	r2,r3,r2
    3708:	10bfffc4 	addi	r2,r2,-1
    370c:	10800003 	ldbu	r2,0(r2)
    3710:	10803fcc 	andi	r2,r2,255
    3714:	1080201c 	xori	r2,r2,128
    3718:	10bfe004 	addi	r2,r2,-128
    371c:	10800bd8 	cmpnei	r2,r2,47
    3720:	1000031e 	bne	r2,zero,3730 <alt_find_file+0x70>
    {
      len -= 1;
    3724:	e0bffc17 	ldw	r2,-16(fp)
    3728:	10bfffc4 	addi	r2,r2,-1
    372c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3730:	e0bffc17 	ldw	r2,-16(fp)
    3734:	1007883a 	mov	r3,r2
    3738:	e0bffe17 	ldw	r2,-8(fp)
    373c:	1885883a 	add	r2,r3,r2
    3740:	10800003 	ldbu	r2,0(r2)
    3744:	10803fcc 	andi	r2,r2,255
    3748:	1080201c 	xori	r2,r2,128
    374c:	10bfe004 	addi	r2,r2,-128
    3750:	10800be0 	cmpeqi	r2,r2,47
    3754:	10000a1e 	bne	r2,zero,3780 <alt_find_file+0xc0>
    3758:	e0bffc17 	ldw	r2,-16(fp)
    375c:	1007883a 	mov	r3,r2
    3760:	e0bffe17 	ldw	r2,-8(fp)
    3764:	1885883a 	add	r2,r3,r2
    3768:	10800003 	ldbu	r2,0(r2)
    376c:	10803fcc 	andi	r2,r2,255
    3770:	1080201c 	xori	r2,r2,128
    3774:	10bfe004 	addi	r2,r2,-128
    3778:	1004c03a 	cmpne	r2,r2,zero
    377c:	10000a1e 	bne	r2,zero,37a8 <alt_find_file+0xe8>
    3780:	e0bffd17 	ldw	r2,-12(fp)
    3784:	11000217 	ldw	r4,8(r2)
    3788:	e1bffc17 	ldw	r6,-16(fp)
    378c:	e17ffe17 	ldw	r5,-8(fp)
    3790:	00038fc0 	call	38fc <memcmp>
    3794:	1004c03a 	cmpne	r2,r2,zero
    3798:	1000031e 	bne	r2,zero,37a8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    379c:	e0bffd17 	ldw	r2,-12(fp)
    37a0:	e0bfff15 	stw	r2,-4(fp)
    37a4:	00000806 	br	37c8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	10800017 	ldw	r2,0(r2)
    37b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    37b4:	00c00034 	movhi	r3,0
    37b8:	18dc8e04 	addi	r3,r3,29240
    37bc:	e0bffd17 	ldw	r2,-12(fp)
    37c0:	10ffc91e 	bne	r2,r3,36e8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    37c4:	e03fff15 	stw	zero,-4(fp)
    37c8:	e0bfff17 	ldw	r2,-4(fp)
}
    37cc:	e037883a 	mov	sp,fp
    37d0:	dfc00117 	ldw	ra,4(sp)
    37d4:	df000017 	ldw	fp,0(sp)
    37d8:	dec00204 	addi	sp,sp,8
    37dc:	f800283a 	ret

000037e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    37e0:	defffa04 	addi	sp,sp,-24
    37e4:	dfc00515 	stw	ra,20(sp)
    37e8:	df000415 	stw	fp,16(sp)
    37ec:	dc000315 	stw	r16,12(sp)
    37f0:	df000304 	addi	fp,sp,12
    37f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    37f8:	00bffa04 	movi	r2,-24
    37fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3800:	e03ffe15 	stw	zero,-8(fp)
    3804:	00002006 	br	3888 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    3808:	e13ffe17 	ldw	r4,-8(fp)
    380c:	04000034 	movhi	r16,0
    3810:	841c2704 	addi	r16,r16,28828
    3814:	01400304 	movi	r5,12
    3818:	0000a4c0 	call	a4c <__mulsi3>
    381c:	1405883a 	add	r2,r2,r16
    3820:	10800017 	ldw	r2,0(r2)
    3824:	1004c03a 	cmpne	r2,r2,zero
    3828:	1000141e 	bne	r2,zero,387c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    382c:	e13ffe17 	ldw	r4,-8(fp)
    3830:	04000034 	movhi	r16,0
    3834:	841c2704 	addi	r16,r16,28828
    3838:	01400304 	movi	r5,12
    383c:	0000a4c0 	call	a4c <__mulsi3>
    3840:	1407883a 	add	r3,r2,r16
    3844:	e0bfff17 	ldw	r2,-4(fp)
    3848:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    384c:	00800034 	movhi	r2,0
    3850:	109c9204 	addi	r2,r2,29256
    3854:	10c00017 	ldw	r3,0(r2)
    3858:	e0bffe17 	ldw	r2,-8(fp)
    385c:	1880040e 	bge	r3,r2,3870 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    3860:	00c00034 	movhi	r3,0
    3864:	18dc9204 	addi	r3,r3,29256
    3868:	e0bffe17 	ldw	r2,-8(fp)
    386c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    3870:	e0bffe17 	ldw	r2,-8(fp)
    3874:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3878:	00000606 	br	3894 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    387c:	e0bffe17 	ldw	r2,-8(fp)
    3880:	10800044 	addi	r2,r2,1
    3884:	e0bffe15 	stw	r2,-8(fp)
    3888:	e0bffe17 	ldw	r2,-8(fp)
    388c:	10800810 	cmplti	r2,r2,32
    3890:	103fdd1e 	bne	r2,zero,3808 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3894:	e0bffd17 	ldw	r2,-12(fp)
}
    3898:	e037883a 	mov	sp,fp
    389c:	dfc00217 	ldw	ra,8(sp)
    38a0:	df000117 	ldw	fp,4(sp)
    38a4:	dc000017 	ldw	r16,0(sp)
    38a8:	dec00304 	addi	sp,sp,12
    38ac:	f800283a 	ret

000038b0 <atexit>:
    38b0:	200b883a 	mov	r5,r4
    38b4:	000d883a 	mov	r6,zero
    38b8:	0009883a 	mov	r4,zero
    38bc:	000f883a 	mov	r7,zero
    38c0:	0003ef81 	jmpi	3ef8 <__register_exitproc>

000038c4 <exit>:
    38c4:	defffe04 	addi	sp,sp,-8
    38c8:	000b883a 	mov	r5,zero
    38cc:	dc000015 	stw	r16,0(sp)
    38d0:	dfc00115 	stw	ra,4(sp)
    38d4:	2021883a 	mov	r16,r4
    38d8:	00040300 	call	4030 <__call_exitprocs>
    38dc:	00800034 	movhi	r2,0
    38e0:	109c8a04 	addi	r2,r2,29224
    38e4:	11000017 	ldw	r4,0(r2)
    38e8:	20800f17 	ldw	r2,60(r4)
    38ec:	10000126 	beq	r2,zero,38f4 <exit+0x30>
    38f0:	103ee83a 	callr	r2
    38f4:	8009883a 	mov	r4,r16
    38f8:	000501c0 	call	501c <_exit>

000038fc <memcmp>:
    38fc:	00c000c4 	movi	r3,3
    3900:	1980032e 	bgeu	r3,r6,3910 <memcmp+0x14>
    3904:	2144b03a 	or	r2,r4,r5
    3908:	10c4703a 	and	r2,r2,r3
    390c:	10000f26 	beq	r2,zero,394c <memcmp+0x50>
    3910:	31ffffc4 	addi	r7,r6,-1
    3914:	3000061e 	bne	r6,zero,3930 <memcmp+0x34>
    3918:	00000a06 	br	3944 <memcmp+0x48>
    391c:	39ffffc4 	addi	r7,r7,-1
    3920:	00bfffc4 	movi	r2,-1
    3924:	21000044 	addi	r4,r4,1
    3928:	29400044 	addi	r5,r5,1
    392c:	38800526 	beq	r7,r2,3944 <memcmp+0x48>
    3930:	20c00003 	ldbu	r3,0(r4)
    3934:	28800003 	ldbu	r2,0(r5)
    3938:	18bff826 	beq	r3,r2,391c <memcmp+0x20>
    393c:	1885c83a 	sub	r2,r3,r2
    3940:	f800283a 	ret
    3944:	0005883a 	mov	r2,zero
    3948:	f800283a 	ret
    394c:	180f883a 	mov	r7,r3
    3950:	20c00017 	ldw	r3,0(r4)
    3954:	28800017 	ldw	r2,0(r5)
    3958:	18bfed1e 	bne	r3,r2,3910 <memcmp+0x14>
    395c:	31bfff04 	addi	r6,r6,-4
    3960:	21000104 	addi	r4,r4,4
    3964:	29400104 	addi	r5,r5,4
    3968:	39bff936 	bltu	r7,r6,3950 <memcmp+0x54>
    396c:	003fe806 	br	3910 <memcmp+0x14>

00003970 <memcpy>:
    3970:	01c003c4 	movi	r7,15
    3974:	2007883a 	mov	r3,r4
    3978:	3980032e 	bgeu	r7,r6,3988 <memcpy+0x18>
    397c:	2904b03a 	or	r2,r5,r4
    3980:	108000cc 	andi	r2,r2,3
    3984:	10000926 	beq	r2,zero,39ac <memcpy+0x3c>
    3988:	30000626 	beq	r6,zero,39a4 <memcpy+0x34>
    398c:	30cd883a 	add	r6,r6,r3
    3990:	28800003 	ldbu	r2,0(r5)
    3994:	29400044 	addi	r5,r5,1
    3998:	18800005 	stb	r2,0(r3)
    399c:	18c00044 	addi	r3,r3,1
    39a0:	30fffb1e 	bne	r6,r3,3990 <memcpy+0x20>
    39a4:	2005883a 	mov	r2,r4
    39a8:	f800283a 	ret
    39ac:	3811883a 	mov	r8,r7
    39b0:	200f883a 	mov	r7,r4
    39b4:	28c00017 	ldw	r3,0(r5)
    39b8:	31bffc04 	addi	r6,r6,-16
    39bc:	38c00015 	stw	r3,0(r7)
    39c0:	28800117 	ldw	r2,4(r5)
    39c4:	38800115 	stw	r2,4(r7)
    39c8:	28c00217 	ldw	r3,8(r5)
    39cc:	38c00215 	stw	r3,8(r7)
    39d0:	28800317 	ldw	r2,12(r5)
    39d4:	29400404 	addi	r5,r5,16
    39d8:	38800315 	stw	r2,12(r7)
    39dc:	39c00404 	addi	r7,r7,16
    39e0:	41bff436 	bltu	r8,r6,39b4 <memcpy+0x44>
    39e4:	008000c4 	movi	r2,3
    39e8:	1180072e 	bgeu	r2,r6,3a08 <memcpy+0x98>
    39ec:	1007883a 	mov	r3,r2
    39f0:	28800017 	ldw	r2,0(r5)
    39f4:	31bfff04 	addi	r6,r6,-4
    39f8:	29400104 	addi	r5,r5,4
    39fc:	38800015 	stw	r2,0(r7)
    3a00:	39c00104 	addi	r7,r7,4
    3a04:	19bffa36 	bltu	r3,r6,39f0 <memcpy+0x80>
    3a08:	3807883a 	mov	r3,r7
    3a0c:	003fde06 	br	3988 <memcpy+0x18>

00003a10 <putc>:
    3a10:	defffc04 	addi	sp,sp,-16
    3a14:	dc800215 	stw	r18,8(sp)
    3a18:	04800034 	movhi	r18,0
    3a1c:	949c8904 	addi	r18,r18,29220
    3a20:	90c00017 	ldw	r3,0(r18)
    3a24:	dc400115 	stw	r17,4(sp)
    3a28:	dc000015 	stw	r16,0(sp)
    3a2c:	dfc00315 	stw	ra,12(sp)
    3a30:	2023883a 	mov	r17,r4
    3a34:	2821883a 	mov	r16,r5
    3a38:	18000226 	beq	r3,zero,3a44 <putc+0x34>
    3a3c:	18800e17 	ldw	r2,56(r3)
    3a40:	10001126 	beq	r2,zero,3a88 <putc+0x78>
    3a44:	80800217 	ldw	r2,8(r16)
    3a48:	10ffffc4 	addi	r3,r2,-1
    3a4c:	80c00215 	stw	r3,8(r16)
    3a50:	18001316 	blt	r3,zero,3aa0 <putc+0x90>
    3a54:	80800017 	ldw	r2,0(r16)
    3a58:	14400005 	stb	r17,0(r2)
    3a5c:	80c00017 	ldw	r3,0(r16)
    3a60:	18800044 	addi	r2,r3,1
    3a64:	18c00003 	ldbu	r3,0(r3)
    3a68:	80800015 	stw	r2,0(r16)
    3a6c:	1805883a 	mov	r2,r3
    3a70:	dfc00317 	ldw	ra,12(sp)
    3a74:	dc800217 	ldw	r18,8(sp)
    3a78:	dc400117 	ldw	r17,4(sp)
    3a7c:	dc000017 	ldw	r16,0(sp)
    3a80:	dec00404 	addi	sp,sp,16
    3a84:	f800283a 	ret
    3a88:	1809883a 	mov	r4,r3
    3a8c:	00044780 	call	4478 <__sinit>
    3a90:	80800217 	ldw	r2,8(r16)
    3a94:	10ffffc4 	addi	r3,r2,-1
    3a98:	80c00215 	stw	r3,8(r16)
    3a9c:	183fed0e 	bge	r3,zero,3a54 <putc+0x44>
    3aa0:	80800617 	ldw	r2,24(r16)
    3aa4:	18800f16 	blt	r3,r2,3ae4 <putc+0xd4>
    3aa8:	80800017 	ldw	r2,0(r16)
    3aac:	14400005 	stb	r17,0(r2)
    3ab0:	81000017 	ldw	r4,0(r16)
    3ab4:	00800284 	movi	r2,10
    3ab8:	20c00003 	ldbu	r3,0(r4)
    3abc:	18801226 	beq	r3,r2,3b08 <putc+0xf8>
    3ac0:	20800044 	addi	r2,r4,1
    3ac4:	80800015 	stw	r2,0(r16)
    3ac8:	1805883a 	mov	r2,r3
    3acc:	dfc00317 	ldw	ra,12(sp)
    3ad0:	dc800217 	ldw	r18,8(sp)
    3ad4:	dc400117 	ldw	r17,4(sp)
    3ad8:	dc000017 	ldw	r16,0(sp)
    3adc:	dec00404 	addi	sp,sp,16
    3ae0:	f800283a 	ret
    3ae4:	91000017 	ldw	r4,0(r18)
    3ae8:	880b883a 	mov	r5,r17
    3aec:	800d883a 	mov	r6,r16
    3af0:	dfc00317 	ldw	ra,12(sp)
    3af4:	dc800217 	ldw	r18,8(sp)
    3af8:	dc400117 	ldw	r17,4(sp)
    3afc:	dc000017 	ldw	r16,0(sp)
    3b00:	dec00404 	addi	sp,sp,16
    3b04:	0003c701 	jmpi	3c70 <__swbuf_r>
    3b08:	91000017 	ldw	r4,0(r18)
    3b0c:	180b883a 	mov	r5,r3
    3b10:	003ff606 	br	3aec <putc+0xdc>

00003b14 <_putc_r>:
    3b14:	defffc04 	addi	sp,sp,-16
    3b18:	dc400215 	stw	r17,8(sp)
    3b1c:	dc000115 	stw	r16,4(sp)
    3b20:	dfc00315 	stw	ra,12(sp)
    3b24:	2021883a 	mov	r16,r4
    3b28:	2823883a 	mov	r17,r5
    3b2c:	20000226 	beq	r4,zero,3b38 <_putc_r+0x24>
    3b30:	20800e17 	ldw	r2,56(r4)
    3b34:	10001026 	beq	r2,zero,3b78 <_putc_r+0x64>
    3b38:	30800217 	ldw	r2,8(r6)
    3b3c:	10ffffc4 	addi	r3,r2,-1
    3b40:	30c00215 	stw	r3,8(r6)
    3b44:	18001316 	blt	r3,zero,3b94 <_putc_r+0x80>
    3b48:	30800017 	ldw	r2,0(r6)
    3b4c:	14400005 	stb	r17,0(r2)
    3b50:	30c00017 	ldw	r3,0(r6)
    3b54:	18800044 	addi	r2,r3,1
    3b58:	18c00003 	ldbu	r3,0(r3)
    3b5c:	30800015 	stw	r2,0(r6)
    3b60:	1805883a 	mov	r2,r3
    3b64:	dfc00317 	ldw	ra,12(sp)
    3b68:	dc400217 	ldw	r17,8(sp)
    3b6c:	dc000117 	ldw	r16,4(sp)
    3b70:	dec00404 	addi	sp,sp,16
    3b74:	f800283a 	ret
    3b78:	d9800015 	stw	r6,0(sp)
    3b7c:	00044780 	call	4478 <__sinit>
    3b80:	d9800017 	ldw	r6,0(sp)
    3b84:	30800217 	ldw	r2,8(r6)
    3b88:	10ffffc4 	addi	r3,r2,-1
    3b8c:	30c00215 	stw	r3,8(r6)
    3b90:	183fed0e 	bge	r3,zero,3b48 <_putc_r+0x34>
    3b94:	30800617 	ldw	r2,24(r6)
    3b98:	18800e16 	blt	r3,r2,3bd4 <_putc_r+0xc0>
    3b9c:	30800017 	ldw	r2,0(r6)
    3ba0:	14400005 	stb	r17,0(r2)
    3ba4:	31000017 	ldw	r4,0(r6)
    3ba8:	00800284 	movi	r2,10
    3bac:	20c00003 	ldbu	r3,0(r4)
    3bb0:	18800f26 	beq	r3,r2,3bf0 <_putc_r+0xdc>
    3bb4:	20800044 	addi	r2,r4,1
    3bb8:	30800015 	stw	r2,0(r6)
    3bbc:	1805883a 	mov	r2,r3
    3bc0:	dfc00317 	ldw	ra,12(sp)
    3bc4:	dc400217 	ldw	r17,8(sp)
    3bc8:	dc000117 	ldw	r16,4(sp)
    3bcc:	dec00404 	addi	sp,sp,16
    3bd0:	f800283a 	ret
    3bd4:	8009883a 	mov	r4,r16
    3bd8:	880b883a 	mov	r5,r17
    3bdc:	dfc00317 	ldw	ra,12(sp)
    3be0:	dc400217 	ldw	r17,8(sp)
    3be4:	dc000117 	ldw	r16,4(sp)
    3be8:	dec00404 	addi	sp,sp,16
    3bec:	0003c701 	jmpi	3c70 <__swbuf_r>
    3bf0:	8009883a 	mov	r4,r16
    3bf4:	180b883a 	mov	r5,r3
    3bf8:	003ff806 	br	3bdc <_putc_r+0xc8>

00003bfc <strlen>:
    3bfc:	208000cc 	andi	r2,r4,3
    3c00:	2011883a 	mov	r8,r4
    3c04:	1000161e 	bne	r2,zero,3c60 <strlen+0x64>
    3c08:	20c00017 	ldw	r3,0(r4)
    3c0c:	017fbff4 	movhi	r5,65279
    3c10:	297fbfc4 	addi	r5,r5,-257
    3c14:	01e02074 	movhi	r7,32897
    3c18:	39e02004 	addi	r7,r7,-32640
    3c1c:	1945883a 	add	r2,r3,r5
    3c20:	11c4703a 	and	r2,r2,r7
    3c24:	00c6303a 	nor	r3,zero,r3
    3c28:	1886703a 	and	r3,r3,r2
    3c2c:	18000c1e 	bne	r3,zero,3c60 <strlen+0x64>
    3c30:	280d883a 	mov	r6,r5
    3c34:	380b883a 	mov	r5,r7
    3c38:	21000104 	addi	r4,r4,4
    3c3c:	20800017 	ldw	r2,0(r4)
    3c40:	1187883a 	add	r3,r2,r6
    3c44:	1946703a 	and	r3,r3,r5
    3c48:	0084303a 	nor	r2,zero,r2
    3c4c:	10c4703a 	and	r2,r2,r3
    3c50:	103ff926 	beq	r2,zero,3c38 <strlen+0x3c>
    3c54:	20800007 	ldb	r2,0(r4)
    3c58:	10000326 	beq	r2,zero,3c68 <strlen+0x6c>
    3c5c:	21000044 	addi	r4,r4,1
    3c60:	20800007 	ldb	r2,0(r4)
    3c64:	103ffd1e 	bne	r2,zero,3c5c <strlen+0x60>
    3c68:	2205c83a 	sub	r2,r4,r8
    3c6c:	f800283a 	ret

00003c70 <__swbuf_r>:
    3c70:	defffc04 	addi	sp,sp,-16
    3c74:	dc400215 	stw	r17,8(sp)
    3c78:	dc000115 	stw	r16,4(sp)
    3c7c:	dfc00315 	stw	ra,12(sp)
    3c80:	2023883a 	mov	r17,r4
    3c84:	2821883a 	mov	r16,r5
    3c88:	20000226 	beq	r4,zero,3c94 <__swbuf_r+0x24>
    3c8c:	20800e17 	ldw	r2,56(r4)
    3c90:	10002f26 	beq	r2,zero,3d50 <__swbuf_r+0xe0>
    3c94:	3080030b 	ldhu	r2,12(r6)
    3c98:	30c00617 	ldw	r3,24(r6)
    3c9c:	1080020c 	andi	r2,r2,8
    3ca0:	30c00215 	stw	r3,8(r6)
    3ca4:	10002226 	beq	r2,zero,3d30 <__swbuf_r+0xc0>
    3ca8:	30c00417 	ldw	r3,16(r6)
    3cac:	18002026 	beq	r3,zero,3d30 <__swbuf_r+0xc0>
    3cb0:	31000017 	ldw	r4,0(r6)
    3cb4:	30800517 	ldw	r2,20(r6)
    3cb8:	20c7c83a 	sub	r3,r4,r3
    3cbc:	18802f0e 	bge	r3,r2,3d7c <__swbuf_r+0x10c>
    3cc0:	19400044 	addi	r5,r3,1
    3cc4:	30800217 	ldw	r2,8(r6)
    3cc8:	84003fcc 	andi	r16,r16,255
    3ccc:	20c00044 	addi	r3,r4,1
    3cd0:	10bfffc4 	addi	r2,r2,-1
    3cd4:	30800215 	stw	r2,8(r6)
    3cd8:	24000005 	stb	r16,0(r4)
    3cdc:	30800517 	ldw	r2,20(r6)
    3ce0:	30c00015 	stw	r3,0(r6)
    3ce4:	11400c26 	beq	r2,r5,3d18 <__swbuf_r+0xa8>
    3ce8:	3080030b 	ldhu	r2,12(r6)
    3cec:	1080004c 	andi	r2,r2,1
    3cf0:	1005003a 	cmpeq	r2,r2,zero
    3cf4:	10000626 	beq	r2,zero,3d10 <__swbuf_r+0xa0>
    3cf8:	8005883a 	mov	r2,r16
    3cfc:	dfc00317 	ldw	ra,12(sp)
    3d00:	dc400217 	ldw	r17,8(sp)
    3d04:	dc000117 	ldw	r16,4(sp)
    3d08:	dec00404 	addi	sp,sp,16
    3d0c:	f800283a 	ret
    3d10:	00800284 	movi	r2,10
    3d14:	80bff81e 	bne	r16,r2,3cf8 <__swbuf_r+0x88>
    3d18:	8809883a 	mov	r4,r17
    3d1c:	300b883a 	mov	r5,r6
    3d20:	00041e00 	call	41e0 <_fflush_r>
    3d24:	103ff426 	beq	r2,zero,3cf8 <__swbuf_r+0x88>
    3d28:	043fffc4 	movi	r16,-1
    3d2c:	003ff206 	br	3cf8 <__swbuf_r+0x88>
    3d30:	300b883a 	mov	r5,r6
    3d34:	8809883a 	mov	r4,r17
    3d38:	d9800015 	stw	r6,0(sp)
    3d3c:	0003dbc0 	call	3dbc <__swsetup_r>
    3d40:	d9800017 	ldw	r6,0(sp)
    3d44:	1000061e 	bne	r2,zero,3d60 <__swbuf_r+0xf0>
    3d48:	30c00417 	ldw	r3,16(r6)
    3d4c:	003fd806 	br	3cb0 <__swbuf_r+0x40>
    3d50:	d9800015 	stw	r6,0(sp)
    3d54:	00044780 	call	4478 <__sinit>
    3d58:	d9800017 	ldw	r6,0(sp)
    3d5c:	003fcd06 	br	3c94 <__swbuf_r+0x24>
    3d60:	3080030b 	ldhu	r2,12(r6)
    3d64:	00c00244 	movi	r3,9
    3d68:	043fffc4 	movi	r16,-1
    3d6c:	10801014 	ori	r2,r2,64
    3d70:	3080030d 	sth	r2,12(r6)
    3d74:	88c00015 	stw	r3,0(r17)
    3d78:	003fdf06 	br	3cf8 <__swbuf_r+0x88>
    3d7c:	300b883a 	mov	r5,r6
    3d80:	8809883a 	mov	r4,r17
    3d84:	d9800015 	stw	r6,0(sp)
    3d88:	00041e00 	call	41e0 <_fflush_r>
    3d8c:	d9800017 	ldw	r6,0(sp)
    3d90:	103fe51e 	bne	r2,zero,3d28 <__swbuf_r+0xb8>
    3d94:	31000017 	ldw	r4,0(r6)
    3d98:	01400044 	movi	r5,1
    3d9c:	003fc906 	br	3cc4 <__swbuf_r+0x54>

00003da0 <__swbuf>:
    3da0:	01800034 	movhi	r6,0
    3da4:	319c8904 	addi	r6,r6,29220
    3da8:	2007883a 	mov	r3,r4
    3dac:	31000017 	ldw	r4,0(r6)
    3db0:	280d883a 	mov	r6,r5
    3db4:	180b883a 	mov	r5,r3
    3db8:	0003c701 	jmpi	3c70 <__swbuf_r>

00003dbc <__swsetup_r>:
    3dbc:	00800034 	movhi	r2,0
    3dc0:	109c8904 	addi	r2,r2,29220
    3dc4:	10c00017 	ldw	r3,0(r2)
    3dc8:	defffd04 	addi	sp,sp,-12
    3dcc:	dc400115 	stw	r17,4(sp)
    3dd0:	dc000015 	stw	r16,0(sp)
    3dd4:	dfc00215 	stw	ra,8(sp)
    3dd8:	2023883a 	mov	r17,r4
    3ddc:	2821883a 	mov	r16,r5
    3de0:	18000226 	beq	r3,zero,3dec <__swsetup_r+0x30>
    3de4:	18800e17 	ldw	r2,56(r3)
    3de8:	10001f26 	beq	r2,zero,3e68 <__swsetup_r+0xac>
    3dec:	8100030b 	ldhu	r4,12(r16)
    3df0:	2080020c 	andi	r2,r4,8
    3df4:	10002826 	beq	r2,zero,3e98 <__swsetup_r+0xdc>
    3df8:	81400417 	ldw	r5,16(r16)
    3dfc:	28001d26 	beq	r5,zero,3e74 <__swsetup_r+0xb8>
    3e00:	2080004c 	andi	r2,r4,1
    3e04:	1005003a 	cmpeq	r2,r2,zero
    3e08:	10000b26 	beq	r2,zero,3e38 <__swsetup_r+0x7c>
    3e0c:	2080008c 	andi	r2,r4,2
    3e10:	10001226 	beq	r2,zero,3e5c <__swsetup_r+0xa0>
    3e14:	0005883a 	mov	r2,zero
    3e18:	80800215 	stw	r2,8(r16)
    3e1c:	28000b26 	beq	r5,zero,3e4c <__swsetup_r+0x90>
    3e20:	0005883a 	mov	r2,zero
    3e24:	dfc00217 	ldw	ra,8(sp)
    3e28:	dc400117 	ldw	r17,4(sp)
    3e2c:	dc000017 	ldw	r16,0(sp)
    3e30:	dec00304 	addi	sp,sp,12
    3e34:	f800283a 	ret
    3e38:	80800517 	ldw	r2,20(r16)
    3e3c:	80000215 	stw	zero,8(r16)
    3e40:	0085c83a 	sub	r2,zero,r2
    3e44:	80800615 	stw	r2,24(r16)
    3e48:	283ff51e 	bne	r5,zero,3e20 <__swsetup_r+0x64>
    3e4c:	2080200c 	andi	r2,r4,128
    3e50:	103ff326 	beq	r2,zero,3e20 <__swsetup_r+0x64>
    3e54:	00bfffc4 	movi	r2,-1
    3e58:	003ff206 	br	3e24 <__swsetup_r+0x68>
    3e5c:	80800517 	ldw	r2,20(r16)
    3e60:	80800215 	stw	r2,8(r16)
    3e64:	003fed06 	br	3e1c <__swsetup_r+0x60>
    3e68:	1809883a 	mov	r4,r3
    3e6c:	00044780 	call	4478 <__sinit>
    3e70:	003fde06 	br	3dec <__swsetup_r+0x30>
    3e74:	20c0a00c 	andi	r3,r4,640
    3e78:	00808004 	movi	r2,512
    3e7c:	18bfe026 	beq	r3,r2,3e00 <__swsetup_r+0x44>
    3e80:	8809883a 	mov	r4,r17
    3e84:	800b883a 	mov	r5,r16
    3e88:	00048840 	call	4884 <__smakebuf_r>
    3e8c:	8100030b 	ldhu	r4,12(r16)
    3e90:	81400417 	ldw	r5,16(r16)
    3e94:	003fda06 	br	3e00 <__swsetup_r+0x44>
    3e98:	2080040c 	andi	r2,r4,16
    3e9c:	103fed26 	beq	r2,zero,3e54 <__swsetup_r+0x98>
    3ea0:	2080010c 	andi	r2,r4,4
    3ea4:	10001226 	beq	r2,zero,3ef0 <__swsetup_r+0x134>
    3ea8:	81400c17 	ldw	r5,48(r16)
    3eac:	28000526 	beq	r5,zero,3ec4 <__swsetup_r+0x108>
    3eb0:	80801004 	addi	r2,r16,64
    3eb4:	28800226 	beq	r5,r2,3ec0 <__swsetup_r+0x104>
    3eb8:	8809883a 	mov	r4,r17
    3ebc:	00013880 	call	1388 <_free_r>
    3ec0:	80000c15 	stw	zero,48(r16)
    3ec4:	8080030b 	ldhu	r2,12(r16)
    3ec8:	81400417 	ldw	r5,16(r16)
    3ecc:	80000115 	stw	zero,4(r16)
    3ed0:	10bff6cc 	andi	r2,r2,65499
    3ed4:	8080030d 	sth	r2,12(r16)
    3ed8:	81400015 	stw	r5,0(r16)
    3edc:	8080030b 	ldhu	r2,12(r16)
    3ee0:	10800214 	ori	r2,r2,8
    3ee4:	113fffcc 	andi	r4,r2,65535
    3ee8:	8080030d 	sth	r2,12(r16)
    3eec:	003fc306 	br	3dfc <__swsetup_r+0x40>
    3ef0:	81400417 	ldw	r5,16(r16)
    3ef4:	003ff906 	br	3edc <__swsetup_r+0x120>

00003ef8 <__register_exitproc>:
    3ef8:	defffa04 	addi	sp,sp,-24
    3efc:	00800034 	movhi	r2,0
    3f00:	109c8a04 	addi	r2,r2,29224
    3f04:	dc000015 	stw	r16,0(sp)
    3f08:	14000017 	ldw	r16,0(r2)
    3f0c:	dd000415 	stw	r20,16(sp)
    3f10:	2829883a 	mov	r20,r5
    3f14:	81405217 	ldw	r5,328(r16)
    3f18:	dcc00315 	stw	r19,12(sp)
    3f1c:	dc800215 	stw	r18,8(sp)
    3f20:	dc400115 	stw	r17,4(sp)
    3f24:	dfc00515 	stw	ra,20(sp)
    3f28:	2023883a 	mov	r17,r4
    3f2c:	3027883a 	mov	r19,r6
    3f30:	3825883a 	mov	r18,r7
    3f34:	28002526 	beq	r5,zero,3fcc <__register_exitproc+0xd4>
    3f38:	29000117 	ldw	r4,4(r5)
    3f3c:	008007c4 	movi	r2,31
    3f40:	11002716 	blt	r2,r4,3fe0 <__register_exitproc+0xe8>
    3f44:	8800101e 	bne	r17,zero,3f88 <__register_exitproc+0x90>
    3f48:	2105883a 	add	r2,r4,r4
    3f4c:	1085883a 	add	r2,r2,r2
    3f50:	20c00044 	addi	r3,r4,1
    3f54:	1145883a 	add	r2,r2,r5
    3f58:	0009883a 	mov	r4,zero
    3f5c:	15000215 	stw	r20,8(r2)
    3f60:	28c00115 	stw	r3,4(r5)
    3f64:	2005883a 	mov	r2,r4
    3f68:	dfc00517 	ldw	ra,20(sp)
    3f6c:	dd000417 	ldw	r20,16(sp)
    3f70:	dcc00317 	ldw	r19,12(sp)
    3f74:	dc800217 	ldw	r18,8(sp)
    3f78:	dc400117 	ldw	r17,4(sp)
    3f7c:	dc000017 	ldw	r16,0(sp)
    3f80:	dec00604 	addi	sp,sp,24
    3f84:	f800283a 	ret
    3f88:	29802204 	addi	r6,r5,136
    3f8c:	00800044 	movi	r2,1
    3f90:	110e983a 	sll	r7,r2,r4
    3f94:	30c04017 	ldw	r3,256(r6)
    3f98:	2105883a 	add	r2,r4,r4
    3f9c:	1085883a 	add	r2,r2,r2
    3fa0:	1185883a 	add	r2,r2,r6
    3fa4:	19c6b03a 	or	r3,r3,r7
    3fa8:	14802015 	stw	r18,128(r2)
    3fac:	14c00015 	stw	r19,0(r2)
    3fb0:	00800084 	movi	r2,2
    3fb4:	30c04015 	stw	r3,256(r6)
    3fb8:	88bfe31e 	bne	r17,r2,3f48 <__register_exitproc+0x50>
    3fbc:	30804117 	ldw	r2,260(r6)
    3fc0:	11c4b03a 	or	r2,r2,r7
    3fc4:	30804115 	stw	r2,260(r6)
    3fc8:	003fdf06 	br	3f48 <__register_exitproc+0x50>
    3fcc:	00800074 	movhi	r2,1
    3fd0:	10a39004 	addi	r2,r2,-29120
    3fd4:	100b883a 	mov	r5,r2
    3fd8:	80805215 	stw	r2,328(r16)
    3fdc:	003fd606 	br	3f38 <__register_exitproc+0x40>
    3fe0:	00800034 	movhi	r2,0
    3fe4:	1082a604 	addi	r2,r2,2712
    3fe8:	1000021e 	bne	r2,zero,3ff4 <__register_exitproc+0xfc>
    3fec:	013fffc4 	movi	r4,-1
    3ff0:	003fdc06 	br	3f64 <__register_exitproc+0x6c>
    3ff4:	01006404 	movi	r4,400
    3ff8:	103ee83a 	callr	r2
    3ffc:	1007883a 	mov	r3,r2
    4000:	103ffa26 	beq	r2,zero,3fec <__register_exitproc+0xf4>
    4004:	80805217 	ldw	r2,328(r16)
    4008:	180b883a 	mov	r5,r3
    400c:	18000115 	stw	zero,4(r3)
    4010:	18800015 	stw	r2,0(r3)
    4014:	80c05215 	stw	r3,328(r16)
    4018:	18006215 	stw	zero,392(r3)
    401c:	18006315 	stw	zero,396(r3)
    4020:	0009883a 	mov	r4,zero
    4024:	883fc826 	beq	r17,zero,3f48 <__register_exitproc+0x50>
    4028:	003fd706 	br	3f88 <__register_exitproc+0x90>

0000402c <register_fini>:
    402c:	f800283a 	ret

00004030 <__call_exitprocs>:
    4030:	00800034 	movhi	r2,0
    4034:	109c8a04 	addi	r2,r2,29224
    4038:	10800017 	ldw	r2,0(r2)
    403c:	defff304 	addi	sp,sp,-52
    4040:	df000b15 	stw	fp,44(sp)
    4044:	d8800115 	stw	r2,4(sp)
    4048:	00800034 	movhi	r2,0
    404c:	1082a104 	addi	r2,r2,2692
    4050:	1005003a 	cmpeq	r2,r2,zero
    4054:	d8800215 	stw	r2,8(sp)
    4058:	d8800117 	ldw	r2,4(sp)
    405c:	dd400815 	stw	r21,32(sp)
    4060:	dd000715 	stw	r20,28(sp)
    4064:	10805204 	addi	r2,r2,328
    4068:	dfc00c15 	stw	ra,48(sp)
    406c:	ddc00a15 	stw	r23,40(sp)
    4070:	dd800915 	stw	r22,36(sp)
    4074:	dcc00615 	stw	r19,24(sp)
    4078:	dc800515 	stw	r18,20(sp)
    407c:	dc400415 	stw	r17,16(sp)
    4080:	dc000315 	stw	r16,12(sp)
    4084:	282b883a 	mov	r21,r5
    4088:	2039883a 	mov	fp,r4
    408c:	d8800015 	stw	r2,0(sp)
    4090:	2829003a 	cmpeq	r20,r5,zero
    4094:	d8800117 	ldw	r2,4(sp)
    4098:	14405217 	ldw	r17,328(r2)
    409c:	88001026 	beq	r17,zero,40e0 <__call_exitprocs+0xb0>
    40a0:	ddc00017 	ldw	r23,0(sp)
    40a4:	88800117 	ldw	r2,4(r17)
    40a8:	8c802204 	addi	r18,r17,136
    40ac:	143fffc4 	addi	r16,r2,-1
    40b0:	80000916 	blt	r16,zero,40d8 <__call_exitprocs+0xa8>
    40b4:	05bfffc4 	movi	r22,-1
    40b8:	a000151e 	bne	r20,zero,4110 <__call_exitprocs+0xe0>
    40bc:	8409883a 	add	r4,r16,r16
    40c0:	2105883a 	add	r2,r4,r4
    40c4:	1485883a 	add	r2,r2,r18
    40c8:	10c02017 	ldw	r3,128(r2)
    40cc:	a8c01126 	beq	r21,r3,4114 <__call_exitprocs+0xe4>
    40d0:	843fffc4 	addi	r16,r16,-1
    40d4:	85bff81e 	bne	r16,r22,40b8 <__call_exitprocs+0x88>
    40d8:	d8800217 	ldw	r2,8(sp)
    40dc:	10003126 	beq	r2,zero,41a4 <__call_exitprocs+0x174>
    40e0:	dfc00c17 	ldw	ra,48(sp)
    40e4:	df000b17 	ldw	fp,44(sp)
    40e8:	ddc00a17 	ldw	r23,40(sp)
    40ec:	dd800917 	ldw	r22,36(sp)
    40f0:	dd400817 	ldw	r21,32(sp)
    40f4:	dd000717 	ldw	r20,28(sp)
    40f8:	dcc00617 	ldw	r19,24(sp)
    40fc:	dc800517 	ldw	r18,20(sp)
    4100:	dc400417 	ldw	r17,16(sp)
    4104:	dc000317 	ldw	r16,12(sp)
    4108:	dec00d04 	addi	sp,sp,52
    410c:	f800283a 	ret
    4110:	8409883a 	add	r4,r16,r16
    4114:	88c00117 	ldw	r3,4(r17)
    4118:	2105883a 	add	r2,r4,r4
    411c:	1445883a 	add	r2,r2,r17
    4120:	18ffffc4 	addi	r3,r3,-1
    4124:	11800217 	ldw	r6,8(r2)
    4128:	1c001526 	beq	r3,r16,4180 <__call_exitprocs+0x150>
    412c:	10000215 	stw	zero,8(r2)
    4130:	303fe726 	beq	r6,zero,40d0 <__call_exitprocs+0xa0>
    4134:	00c00044 	movi	r3,1
    4138:	1c06983a 	sll	r3,r3,r16
    413c:	90804017 	ldw	r2,256(r18)
    4140:	8cc00117 	ldw	r19,4(r17)
    4144:	1884703a 	and	r2,r3,r2
    4148:	10001426 	beq	r2,zero,419c <__call_exitprocs+0x16c>
    414c:	90804117 	ldw	r2,260(r18)
    4150:	1884703a 	and	r2,r3,r2
    4154:	10000c1e 	bne	r2,zero,4188 <__call_exitprocs+0x158>
    4158:	2105883a 	add	r2,r4,r4
    415c:	1485883a 	add	r2,r2,r18
    4160:	11400017 	ldw	r5,0(r2)
    4164:	e009883a 	mov	r4,fp
    4168:	303ee83a 	callr	r6
    416c:	88800117 	ldw	r2,4(r17)
    4170:	98bfc81e 	bne	r19,r2,4094 <__call_exitprocs+0x64>
    4174:	b8800017 	ldw	r2,0(r23)
    4178:	147fd526 	beq	r2,r17,40d0 <__call_exitprocs+0xa0>
    417c:	003fc506 	br	4094 <__call_exitprocs+0x64>
    4180:	8c000115 	stw	r16,4(r17)
    4184:	003fea06 	br	4130 <__call_exitprocs+0x100>
    4188:	2105883a 	add	r2,r4,r4
    418c:	1485883a 	add	r2,r2,r18
    4190:	11000017 	ldw	r4,0(r2)
    4194:	303ee83a 	callr	r6
    4198:	003ff406 	br	416c <__call_exitprocs+0x13c>
    419c:	303ee83a 	callr	r6
    41a0:	003ff206 	br	416c <__call_exitprocs+0x13c>
    41a4:	88800117 	ldw	r2,4(r17)
    41a8:	1000081e 	bne	r2,zero,41cc <__call_exitprocs+0x19c>
    41ac:	89000017 	ldw	r4,0(r17)
    41b0:	20000726 	beq	r4,zero,41d0 <__call_exitprocs+0x1a0>
    41b4:	b9000015 	stw	r4,0(r23)
    41b8:	8809883a 	mov	r4,r17
    41bc:	0000a840 	call	a84 <free>
    41c0:	bc400017 	ldw	r17,0(r23)
    41c4:	883fb71e 	bne	r17,zero,40a4 <__call_exitprocs+0x74>
    41c8:	003fc506 	br	40e0 <__call_exitprocs+0xb0>
    41cc:	89000017 	ldw	r4,0(r17)
    41d0:	882f883a 	mov	r23,r17
    41d4:	2023883a 	mov	r17,r4
    41d8:	883fb21e 	bne	r17,zero,40a4 <__call_exitprocs+0x74>
    41dc:	003fc006 	br	40e0 <__call_exitprocs+0xb0>

000041e0 <_fflush_r>:
    41e0:	defffb04 	addi	sp,sp,-20
    41e4:	dcc00315 	stw	r19,12(sp)
    41e8:	dc800215 	stw	r18,8(sp)
    41ec:	dfc00415 	stw	ra,16(sp)
    41f0:	dc400115 	stw	r17,4(sp)
    41f4:	dc000015 	stw	r16,0(sp)
    41f8:	2027883a 	mov	r19,r4
    41fc:	2825883a 	mov	r18,r5
    4200:	20000226 	beq	r4,zero,420c <_fflush_r+0x2c>
    4204:	20800e17 	ldw	r2,56(r4)
    4208:	10005626 	beq	r2,zero,4364 <_fflush_r+0x184>
    420c:	9100030b 	ldhu	r4,12(r18)
    4210:	20ffffcc 	andi	r3,r4,65535
    4214:	18e0001c 	xori	r3,r3,32768
    4218:	18e00004 	addi	r3,r3,-32768
    421c:	1880020c 	andi	r2,r3,8
    4220:	1000261e 	bne	r2,zero,42bc <_fflush_r+0xdc>
    4224:	90c00117 	ldw	r3,4(r18)
    4228:	20820014 	ori	r2,r4,2048
    422c:	9080030d 	sth	r2,12(r18)
    4230:	1009883a 	mov	r4,r2
    4234:	00c0400e 	bge	zero,r3,4338 <_fflush_r+0x158>
    4238:	92000a17 	ldw	r8,40(r18)
    423c:	40004026 	beq	r8,zero,4340 <_fflush_r+0x160>
    4240:	2084000c 	andi	r2,r4,4096
    4244:	10005326 	beq	r2,zero,4394 <_fflush_r+0x1b4>
    4248:	94001417 	ldw	r16,80(r18)
    424c:	9080030b 	ldhu	r2,12(r18)
    4250:	1080010c 	andi	r2,r2,4
    4254:	1000481e 	bne	r2,zero,4378 <_fflush_r+0x198>
    4258:	91400717 	ldw	r5,28(r18)
    425c:	9809883a 	mov	r4,r19
    4260:	800d883a 	mov	r6,r16
    4264:	000f883a 	mov	r7,zero
    4268:	403ee83a 	callr	r8
    426c:	8080261e 	bne	r16,r2,4308 <_fflush_r+0x128>
    4270:	9080030b 	ldhu	r2,12(r18)
    4274:	91000417 	ldw	r4,16(r18)
    4278:	90000115 	stw	zero,4(r18)
    427c:	10bdffcc 	andi	r2,r2,63487
    4280:	10ffffcc 	andi	r3,r2,65535
    4284:	18c4000c 	andi	r3,r3,4096
    4288:	9080030d 	sth	r2,12(r18)
    428c:	91000015 	stw	r4,0(r18)
    4290:	18002b26 	beq	r3,zero,4340 <_fflush_r+0x160>
    4294:	0007883a 	mov	r3,zero
    4298:	1805883a 	mov	r2,r3
    429c:	94001415 	stw	r16,80(r18)
    42a0:	dfc00417 	ldw	ra,16(sp)
    42a4:	dcc00317 	ldw	r19,12(sp)
    42a8:	dc800217 	ldw	r18,8(sp)
    42ac:	dc400117 	ldw	r17,4(sp)
    42b0:	dc000017 	ldw	r16,0(sp)
    42b4:	dec00504 	addi	sp,sp,20
    42b8:	f800283a 	ret
    42bc:	94400417 	ldw	r17,16(r18)
    42c0:	88001f26 	beq	r17,zero,4340 <_fflush_r+0x160>
    42c4:	90800017 	ldw	r2,0(r18)
    42c8:	18c000cc 	andi	r3,r3,3
    42cc:	94400015 	stw	r17,0(r18)
    42d0:	1461c83a 	sub	r16,r2,r17
    42d4:	18002526 	beq	r3,zero,436c <_fflush_r+0x18c>
    42d8:	0005883a 	mov	r2,zero
    42dc:	90800215 	stw	r2,8(r18)
    42e0:	0400170e 	bge	zero,r16,4340 <_fflush_r+0x160>
    42e4:	90c00917 	ldw	r3,36(r18)
    42e8:	91400717 	ldw	r5,28(r18)
    42ec:	880d883a 	mov	r6,r17
    42f0:	800f883a 	mov	r7,r16
    42f4:	9809883a 	mov	r4,r19
    42f8:	183ee83a 	callr	r3
    42fc:	88a3883a 	add	r17,r17,r2
    4300:	80a1c83a 	sub	r16,r16,r2
    4304:	00bff616 	blt	zero,r2,42e0 <_fflush_r+0x100>
    4308:	9080030b 	ldhu	r2,12(r18)
    430c:	00ffffc4 	movi	r3,-1
    4310:	10801014 	ori	r2,r2,64
    4314:	9080030d 	sth	r2,12(r18)
    4318:	1805883a 	mov	r2,r3
    431c:	dfc00417 	ldw	ra,16(sp)
    4320:	dcc00317 	ldw	r19,12(sp)
    4324:	dc800217 	ldw	r18,8(sp)
    4328:	dc400117 	ldw	r17,4(sp)
    432c:	dc000017 	ldw	r16,0(sp)
    4330:	dec00504 	addi	sp,sp,20
    4334:	f800283a 	ret
    4338:	90800f17 	ldw	r2,60(r18)
    433c:	00bfbe16 	blt	zero,r2,4238 <_fflush_r+0x58>
    4340:	0007883a 	mov	r3,zero
    4344:	1805883a 	mov	r2,r3
    4348:	dfc00417 	ldw	ra,16(sp)
    434c:	dcc00317 	ldw	r19,12(sp)
    4350:	dc800217 	ldw	r18,8(sp)
    4354:	dc400117 	ldw	r17,4(sp)
    4358:	dc000017 	ldw	r16,0(sp)
    435c:	dec00504 	addi	sp,sp,20
    4360:	f800283a 	ret
    4364:	00044780 	call	4478 <__sinit>
    4368:	003fa806 	br	420c <_fflush_r+0x2c>
    436c:	90800517 	ldw	r2,20(r18)
    4370:	90800215 	stw	r2,8(r18)
    4374:	003fda06 	br	42e0 <_fflush_r+0x100>
    4378:	90800117 	ldw	r2,4(r18)
    437c:	90c00c17 	ldw	r3,48(r18)
    4380:	80a1c83a 	sub	r16,r16,r2
    4384:	183fb426 	beq	r3,zero,4258 <_fflush_r+0x78>
    4388:	90800f17 	ldw	r2,60(r18)
    438c:	80a1c83a 	sub	r16,r16,r2
    4390:	003fb106 	br	4258 <_fflush_r+0x78>
    4394:	91400717 	ldw	r5,28(r18)
    4398:	9809883a 	mov	r4,r19
    439c:	000d883a 	mov	r6,zero
    43a0:	01c00044 	movi	r7,1
    43a4:	403ee83a 	callr	r8
    43a8:	1021883a 	mov	r16,r2
    43ac:	00bfffc4 	movi	r2,-1
    43b0:	80800226 	beq	r16,r2,43bc <_fflush_r+0x1dc>
    43b4:	92000a17 	ldw	r8,40(r18)
    43b8:	003fa406 	br	424c <_fflush_r+0x6c>
    43bc:	98c00017 	ldw	r3,0(r19)
    43c0:	00800744 	movi	r2,29
    43c4:	18bfde26 	beq	r3,r2,4340 <_fflush_r+0x160>
    43c8:	9080030b 	ldhu	r2,12(r18)
    43cc:	8007883a 	mov	r3,r16
    43d0:	10801014 	ori	r2,r2,64
    43d4:	9080030d 	sth	r2,12(r18)
    43d8:	003fcf06 	br	4318 <_fflush_r+0x138>

000043dc <fflush>:
    43dc:	01400034 	movhi	r5,0
    43e0:	29507804 	addi	r5,r5,16864
    43e4:	2007883a 	mov	r3,r4
    43e8:	20000526 	beq	r4,zero,4400 <fflush+0x24>
    43ec:	00800034 	movhi	r2,0
    43f0:	109c8904 	addi	r2,r2,29220
    43f4:	11000017 	ldw	r4,0(r2)
    43f8:	180b883a 	mov	r5,r3
    43fc:	00041e01 	jmpi	41e0 <_fflush_r>
    4400:	00800034 	movhi	r2,0
    4404:	109c8a04 	addi	r2,r2,29224
    4408:	11000017 	ldw	r4,0(r2)
    440c:	00047041 	jmpi	4704 <_fwalk_reent>

00004410 <std>:
    4410:	00800034 	movhi	r2,0
    4414:	1092ac04 	addi	r2,r2,19120
    4418:	20800b15 	stw	r2,44(r4)
    441c:	00800034 	movhi	r2,0
    4420:	1092e704 	addi	r2,r2,19356
    4424:	20800815 	stw	r2,32(r4)
    4428:	00c00034 	movhi	r3,0
    442c:	18d2c804 	addi	r3,r3,19232
    4430:	00800034 	movhi	r2,0
    4434:	1092ae04 	addi	r2,r2,19128
    4438:	2140030d 	sth	r5,12(r4)
    443c:	2180038d 	sth	r6,14(r4)
    4440:	20c00915 	stw	r3,36(r4)
    4444:	20800a15 	stw	r2,40(r4)
    4448:	20000015 	stw	zero,0(r4)
    444c:	20000115 	stw	zero,4(r4)
    4450:	20000215 	stw	zero,8(r4)
    4454:	20000415 	stw	zero,16(r4)
    4458:	20000515 	stw	zero,20(r4)
    445c:	20000615 	stw	zero,24(r4)
    4460:	21000715 	stw	r4,28(r4)
    4464:	f800283a 	ret

00004468 <__sfp_lock_acquire>:
    4468:	f800283a 	ret

0000446c <__sfp_lock_release>:
    446c:	f800283a 	ret

00004470 <__sinit_lock_acquire>:
    4470:	f800283a 	ret

00004474 <__sinit_lock_release>:
    4474:	f800283a 	ret

00004478 <__sinit>:
    4478:	20800e17 	ldw	r2,56(r4)
    447c:	defffd04 	addi	sp,sp,-12
    4480:	dc400115 	stw	r17,4(sp)
    4484:	dc000015 	stw	r16,0(sp)
    4488:	dfc00215 	stw	ra,8(sp)
    448c:	04400044 	movi	r17,1
    4490:	01400104 	movi	r5,4
    4494:	000d883a 	mov	r6,zero
    4498:	2021883a 	mov	r16,r4
    449c:	2200bb04 	addi	r8,r4,748
    44a0:	200f883a 	mov	r7,r4
    44a4:	10000526 	beq	r2,zero,44bc <__sinit+0x44>
    44a8:	dfc00217 	ldw	ra,8(sp)
    44ac:	dc400117 	ldw	r17,4(sp)
    44b0:	dc000017 	ldw	r16,0(sp)
    44b4:	dec00304 	addi	sp,sp,12
    44b8:	f800283a 	ret
    44bc:	21000117 	ldw	r4,4(r4)
    44c0:	00800034 	movhi	r2,0
    44c4:	10915704 	addi	r2,r2,17756
    44c8:	00c000c4 	movi	r3,3
    44cc:	80800f15 	stw	r2,60(r16)
    44d0:	80c0b915 	stw	r3,740(r16)
    44d4:	8200ba15 	stw	r8,744(r16)
    44d8:	84400e15 	stw	r17,56(r16)
    44dc:	8000b815 	stw	zero,736(r16)
    44e0:	00044100 	call	4410 <std>
    44e4:	81000217 	ldw	r4,8(r16)
    44e8:	880d883a 	mov	r6,r17
    44ec:	800f883a 	mov	r7,r16
    44f0:	01400284 	movi	r5,10
    44f4:	00044100 	call	4410 <std>
    44f8:	81000317 	ldw	r4,12(r16)
    44fc:	800f883a 	mov	r7,r16
    4500:	01400484 	movi	r5,18
    4504:	01800084 	movi	r6,2
    4508:	dfc00217 	ldw	ra,8(sp)
    450c:	dc400117 	ldw	r17,4(sp)
    4510:	dc000017 	ldw	r16,0(sp)
    4514:	dec00304 	addi	sp,sp,12
    4518:	00044101 	jmpi	4410 <std>

0000451c <__fp_lock>:
    451c:	0005883a 	mov	r2,zero
    4520:	f800283a 	ret

00004524 <__fp_unlock>:
    4524:	0005883a 	mov	r2,zero
    4528:	f800283a 	ret

0000452c <__fp_unlock_all>:
    452c:	00800034 	movhi	r2,0
    4530:	109c8904 	addi	r2,r2,29220
    4534:	11000017 	ldw	r4,0(r2)
    4538:	01400034 	movhi	r5,0
    453c:	29514904 	addi	r5,r5,17700
    4540:	00047cc1 	jmpi	47cc <_fwalk>

00004544 <__fp_lock_all>:
    4544:	00800034 	movhi	r2,0
    4548:	109c8904 	addi	r2,r2,29220
    454c:	11000017 	ldw	r4,0(r2)
    4550:	01400034 	movhi	r5,0
    4554:	29514704 	addi	r5,r5,17692
    4558:	00047cc1 	jmpi	47cc <_fwalk>

0000455c <_cleanup_r>:
    455c:	01400034 	movhi	r5,0
    4560:	29537d04 	addi	r5,r5,19956
    4564:	00047cc1 	jmpi	47cc <_fwalk>

00004568 <_cleanup>:
    4568:	00800034 	movhi	r2,0
    456c:	109c8a04 	addi	r2,r2,29224
    4570:	11000017 	ldw	r4,0(r2)
    4574:	000455c1 	jmpi	455c <_cleanup_r>

00004578 <__sfmoreglue>:
    4578:	defffc04 	addi	sp,sp,-16
    457c:	dc000015 	stw	r16,0(sp)
    4580:	2821883a 	mov	r16,r5
    4584:	dc400115 	stw	r17,4(sp)
    4588:	01401704 	movi	r5,92
    458c:	2023883a 	mov	r17,r4
    4590:	8009883a 	mov	r4,r16
    4594:	dfc00315 	stw	ra,12(sp)
    4598:	dcc00215 	stw	r19,8(sp)
    459c:	0000a4c0 	call	a4c <__mulsi3>
    45a0:	11400304 	addi	r5,r2,12
    45a4:	8809883a 	mov	r4,r17
    45a8:	1027883a 	mov	r19,r2
    45ac:	0000aac0 	call	aac <_malloc_r>
    45b0:	10c00304 	addi	r3,r2,12
    45b4:	1023883a 	mov	r17,r2
    45b8:	1809883a 	mov	r4,r3
    45bc:	980d883a 	mov	r6,r19
    45c0:	000b883a 	mov	r5,zero
    45c4:	10000b26 	beq	r2,zero,45f4 <__sfmoreglue+0x7c>
    45c8:	14000115 	stw	r16,4(r2)
    45cc:	10c00215 	stw	r3,8(r2)
    45d0:	10000015 	stw	zero,0(r2)
    45d4:	0004a180 	call	4a18 <memset>
    45d8:	8805883a 	mov	r2,r17
    45dc:	dfc00317 	ldw	ra,12(sp)
    45e0:	dcc00217 	ldw	r19,8(sp)
    45e4:	dc400117 	ldw	r17,4(sp)
    45e8:	dc000017 	ldw	r16,0(sp)
    45ec:	dec00404 	addi	sp,sp,16
    45f0:	f800283a 	ret
    45f4:	0023883a 	mov	r17,zero
    45f8:	8805883a 	mov	r2,r17
    45fc:	dfc00317 	ldw	ra,12(sp)
    4600:	dcc00217 	ldw	r19,8(sp)
    4604:	dc400117 	ldw	r17,4(sp)
    4608:	dc000017 	ldw	r16,0(sp)
    460c:	dec00404 	addi	sp,sp,16
    4610:	f800283a 	ret

00004614 <__sfp>:
    4614:	defffd04 	addi	sp,sp,-12
    4618:	00800034 	movhi	r2,0
    461c:	109c8a04 	addi	r2,r2,29224
    4620:	dc000015 	stw	r16,0(sp)
    4624:	14000017 	ldw	r16,0(r2)
    4628:	dc400115 	stw	r17,4(sp)
    462c:	dfc00215 	stw	ra,8(sp)
    4630:	80800e17 	ldw	r2,56(r16)
    4634:	2023883a 	mov	r17,r4
    4638:	10002626 	beq	r2,zero,46d4 <__sfp+0xc0>
    463c:	8400b804 	addi	r16,r16,736
    4640:	80800117 	ldw	r2,4(r16)
    4644:	81000217 	ldw	r4,8(r16)
    4648:	10ffffc4 	addi	r3,r2,-1
    464c:	18000916 	blt	r3,zero,4674 <__sfp+0x60>
    4650:	2080030f 	ldh	r2,12(r4)
    4654:	10000b26 	beq	r2,zero,4684 <__sfp+0x70>
    4658:	017fffc4 	movi	r5,-1
    465c:	00000206 	br	4668 <__sfp+0x54>
    4660:	2080030f 	ldh	r2,12(r4)
    4664:	10000726 	beq	r2,zero,4684 <__sfp+0x70>
    4668:	18ffffc4 	addi	r3,r3,-1
    466c:	21001704 	addi	r4,r4,92
    4670:	197ffb1e 	bne	r3,r5,4660 <__sfp+0x4c>
    4674:	80800017 	ldw	r2,0(r16)
    4678:	10001926 	beq	r2,zero,46e0 <__sfp+0xcc>
    467c:	1021883a 	mov	r16,r2
    4680:	003fef06 	br	4640 <__sfp+0x2c>
    4684:	00bfffc4 	movi	r2,-1
    4688:	00c00044 	movi	r3,1
    468c:	2080038d 	sth	r2,14(r4)
    4690:	20c0030d 	sth	r3,12(r4)
    4694:	20000015 	stw	zero,0(r4)
    4698:	20000215 	stw	zero,8(r4)
    469c:	20000115 	stw	zero,4(r4)
    46a0:	20000415 	stw	zero,16(r4)
    46a4:	20000515 	stw	zero,20(r4)
    46a8:	20000615 	stw	zero,24(r4)
    46ac:	20000c15 	stw	zero,48(r4)
    46b0:	20000d15 	stw	zero,52(r4)
    46b4:	20001115 	stw	zero,68(r4)
    46b8:	20001215 	stw	zero,72(r4)
    46bc:	2005883a 	mov	r2,r4
    46c0:	dfc00217 	ldw	ra,8(sp)
    46c4:	dc400117 	ldw	r17,4(sp)
    46c8:	dc000017 	ldw	r16,0(sp)
    46cc:	dec00304 	addi	sp,sp,12
    46d0:	f800283a 	ret
    46d4:	8009883a 	mov	r4,r16
    46d8:	00044780 	call	4478 <__sinit>
    46dc:	003fd706 	br	463c <__sfp+0x28>
    46e0:	8809883a 	mov	r4,r17
    46e4:	01400104 	movi	r5,4
    46e8:	00045780 	call	4578 <__sfmoreglue>
    46ec:	80800015 	stw	r2,0(r16)
    46f0:	103fe21e 	bne	r2,zero,467c <__sfp+0x68>
    46f4:	00800304 	movi	r2,12
    46f8:	0009883a 	mov	r4,zero
    46fc:	88800015 	stw	r2,0(r17)
    4700:	003fee06 	br	46bc <__sfp+0xa8>

00004704 <_fwalk_reent>:
    4704:	defff704 	addi	sp,sp,-36
    4708:	dcc00315 	stw	r19,12(sp)
    470c:	24c0b804 	addi	r19,r4,736
    4710:	dd800615 	stw	r22,24(sp)
    4714:	dd400515 	stw	r21,20(sp)
    4718:	dfc00815 	stw	ra,32(sp)
    471c:	ddc00715 	stw	r23,28(sp)
    4720:	dd000415 	stw	r20,16(sp)
    4724:	dc800215 	stw	r18,8(sp)
    4728:	dc400115 	stw	r17,4(sp)
    472c:	dc000015 	stw	r16,0(sp)
    4730:	202b883a 	mov	r21,r4
    4734:	282d883a 	mov	r22,r5
    4738:	00044680 	call	4468 <__sfp_lock_acquire>
    473c:	98002126 	beq	r19,zero,47c4 <_fwalk_reent+0xc0>
    4740:	002f883a 	mov	r23,zero
    4744:	9c800117 	ldw	r18,4(r19)
    4748:	9c000217 	ldw	r16,8(r19)
    474c:	90bfffc4 	addi	r2,r18,-1
    4750:	10000d16 	blt	r2,zero,4788 <_fwalk_reent+0x84>
    4754:	0023883a 	mov	r17,zero
    4758:	053fffc4 	movi	r20,-1
    475c:	8080030f 	ldh	r2,12(r16)
    4760:	8c400044 	addi	r17,r17,1
    4764:	10000626 	beq	r2,zero,4780 <_fwalk_reent+0x7c>
    4768:	8080038f 	ldh	r2,14(r16)
    476c:	800b883a 	mov	r5,r16
    4770:	a809883a 	mov	r4,r21
    4774:	15000226 	beq	r2,r20,4780 <_fwalk_reent+0x7c>
    4778:	b03ee83a 	callr	r22
    477c:	b8aeb03a 	or	r23,r23,r2
    4780:	84001704 	addi	r16,r16,92
    4784:	947ff51e 	bne	r18,r17,475c <_fwalk_reent+0x58>
    4788:	9cc00017 	ldw	r19,0(r19)
    478c:	983fed1e 	bne	r19,zero,4744 <_fwalk_reent+0x40>
    4790:	000446c0 	call	446c <__sfp_lock_release>
    4794:	b805883a 	mov	r2,r23
    4798:	dfc00817 	ldw	ra,32(sp)
    479c:	ddc00717 	ldw	r23,28(sp)
    47a0:	dd800617 	ldw	r22,24(sp)
    47a4:	dd400517 	ldw	r21,20(sp)
    47a8:	dd000417 	ldw	r20,16(sp)
    47ac:	dcc00317 	ldw	r19,12(sp)
    47b0:	dc800217 	ldw	r18,8(sp)
    47b4:	dc400117 	ldw	r17,4(sp)
    47b8:	dc000017 	ldw	r16,0(sp)
    47bc:	dec00904 	addi	sp,sp,36
    47c0:	f800283a 	ret
    47c4:	002f883a 	mov	r23,zero
    47c8:	003ff106 	br	4790 <_fwalk_reent+0x8c>

000047cc <_fwalk>:
    47cc:	defff804 	addi	sp,sp,-32
    47d0:	dcc00315 	stw	r19,12(sp)
    47d4:	24c0b804 	addi	r19,r4,736
    47d8:	dd400515 	stw	r21,20(sp)
    47dc:	dfc00715 	stw	ra,28(sp)
    47e0:	dd800615 	stw	r22,24(sp)
    47e4:	dd000415 	stw	r20,16(sp)
    47e8:	dc800215 	stw	r18,8(sp)
    47ec:	dc400115 	stw	r17,4(sp)
    47f0:	dc000015 	stw	r16,0(sp)
    47f4:	282b883a 	mov	r21,r5
    47f8:	00044680 	call	4468 <__sfp_lock_acquire>
    47fc:	98001f26 	beq	r19,zero,487c <_fwalk+0xb0>
    4800:	002d883a 	mov	r22,zero
    4804:	9c800117 	ldw	r18,4(r19)
    4808:	9c000217 	ldw	r16,8(r19)
    480c:	90bfffc4 	addi	r2,r18,-1
    4810:	10000c16 	blt	r2,zero,4844 <_fwalk+0x78>
    4814:	0023883a 	mov	r17,zero
    4818:	053fffc4 	movi	r20,-1
    481c:	8080030f 	ldh	r2,12(r16)
    4820:	8c400044 	addi	r17,r17,1
    4824:	10000526 	beq	r2,zero,483c <_fwalk+0x70>
    4828:	8080038f 	ldh	r2,14(r16)
    482c:	8009883a 	mov	r4,r16
    4830:	15000226 	beq	r2,r20,483c <_fwalk+0x70>
    4834:	a83ee83a 	callr	r21
    4838:	b0acb03a 	or	r22,r22,r2
    483c:	84001704 	addi	r16,r16,92
    4840:	947ff61e 	bne	r18,r17,481c <_fwalk+0x50>
    4844:	9cc00017 	ldw	r19,0(r19)
    4848:	983fee1e 	bne	r19,zero,4804 <_fwalk+0x38>
    484c:	000446c0 	call	446c <__sfp_lock_release>
    4850:	b005883a 	mov	r2,r22
    4854:	dfc00717 	ldw	ra,28(sp)
    4858:	dd800617 	ldw	r22,24(sp)
    485c:	dd400517 	ldw	r21,20(sp)
    4860:	dd000417 	ldw	r20,16(sp)
    4864:	dcc00317 	ldw	r19,12(sp)
    4868:	dc800217 	ldw	r18,8(sp)
    486c:	dc400117 	ldw	r17,4(sp)
    4870:	dc000017 	ldw	r16,0(sp)
    4874:	dec00804 	addi	sp,sp,32
    4878:	f800283a 	ret
    487c:	002d883a 	mov	r22,zero
    4880:	003ff206 	br	484c <_fwalk+0x80>

00004884 <__smakebuf_r>:
    4884:	2880030b 	ldhu	r2,12(r5)
    4888:	deffed04 	addi	sp,sp,-76
    488c:	dc401015 	stw	r17,64(sp)
    4890:	1080008c 	andi	r2,r2,2
    4894:	dc000f15 	stw	r16,60(sp)
    4898:	dfc01215 	stw	ra,72(sp)
    489c:	dc801115 	stw	r18,68(sp)
    48a0:	2821883a 	mov	r16,r5
    48a4:	2023883a 	mov	r17,r4
    48a8:	10000b26 	beq	r2,zero,48d8 <__smakebuf_r+0x54>
    48ac:	28c010c4 	addi	r3,r5,67
    48b0:	00800044 	movi	r2,1
    48b4:	28800515 	stw	r2,20(r5)
    48b8:	28c00415 	stw	r3,16(r5)
    48bc:	28c00015 	stw	r3,0(r5)
    48c0:	dfc01217 	ldw	ra,72(sp)
    48c4:	dc801117 	ldw	r18,68(sp)
    48c8:	dc401017 	ldw	r17,64(sp)
    48cc:	dc000f17 	ldw	r16,60(sp)
    48d0:	dec01304 	addi	sp,sp,76
    48d4:	f800283a 	ret
    48d8:	2940038f 	ldh	r5,14(r5)
    48dc:	28002116 	blt	r5,zero,4964 <__smakebuf_r+0xe0>
    48e0:	d80d883a 	mov	r6,sp
    48e4:	0004e080 	call	4e08 <_fstat_r>
    48e8:	10001e16 	blt	r2,zero,4964 <__smakebuf_r+0xe0>
    48ec:	d8800117 	ldw	r2,4(sp)
    48f0:	00e00014 	movui	r3,32768
    48f4:	113c000c 	andi	r4,r2,61440
    48f8:	20c03126 	beq	r4,r3,49c0 <__smakebuf_r+0x13c>
    48fc:	8080030b 	ldhu	r2,12(r16)
    4900:	00c80004 	movi	r3,8192
    4904:	10820014 	ori	r2,r2,2048
    4908:	8080030d 	sth	r2,12(r16)
    490c:	20c01e26 	beq	r4,r3,4988 <__smakebuf_r+0x104>
    4910:	04810004 	movi	r18,1024
    4914:	8809883a 	mov	r4,r17
    4918:	900b883a 	mov	r5,r18
    491c:	0000aac0 	call	aac <_malloc_r>
    4920:	1009883a 	mov	r4,r2
    4924:	10003126 	beq	r2,zero,49ec <__smakebuf_r+0x168>
    4928:	80c0030b 	ldhu	r3,12(r16)
    492c:	00800034 	movhi	r2,0
    4930:	10915704 	addi	r2,r2,17756
    4934:	88800f15 	stw	r2,60(r17)
    4938:	18c02014 	ori	r3,r3,128
    493c:	84800515 	stw	r18,20(r16)
    4940:	80c0030d 	sth	r3,12(r16)
    4944:	81000415 	stw	r4,16(r16)
    4948:	81000015 	stw	r4,0(r16)
    494c:	dfc01217 	ldw	ra,72(sp)
    4950:	dc801117 	ldw	r18,68(sp)
    4954:	dc401017 	ldw	r17,64(sp)
    4958:	dc000f17 	ldw	r16,60(sp)
    495c:	dec01304 	addi	sp,sp,76
    4960:	f800283a 	ret
    4964:	80c0030b 	ldhu	r3,12(r16)
    4968:	1880200c 	andi	r2,r3,128
    496c:	10000426 	beq	r2,zero,4980 <__smakebuf_r+0xfc>
    4970:	04801004 	movi	r18,64
    4974:	18820014 	ori	r2,r3,2048
    4978:	8080030d 	sth	r2,12(r16)
    497c:	003fe506 	br	4914 <__smakebuf_r+0x90>
    4980:	04810004 	movi	r18,1024
    4984:	003ffb06 	br	4974 <__smakebuf_r+0xf0>
    4988:	8140038f 	ldh	r5,14(r16)
    498c:	8809883a 	mov	r4,r17
    4990:	0004e7c0 	call	4e7c <_isatty_r>
    4994:	103fde26 	beq	r2,zero,4910 <__smakebuf_r+0x8c>
    4998:	8080030b 	ldhu	r2,12(r16)
    499c:	80c010c4 	addi	r3,r16,67
    49a0:	04810004 	movi	r18,1024
    49a4:	10800054 	ori	r2,r2,1
    49a8:	8080030d 	sth	r2,12(r16)
    49ac:	00800044 	movi	r2,1
    49b0:	80c00415 	stw	r3,16(r16)
    49b4:	80800515 	stw	r2,20(r16)
    49b8:	80c00015 	stw	r3,0(r16)
    49bc:	003fd506 	br	4914 <__smakebuf_r+0x90>
    49c0:	80c00a17 	ldw	r3,40(r16)
    49c4:	00800034 	movhi	r2,0
    49c8:	1092ae04 	addi	r2,r2,19128
    49cc:	18bfcb1e 	bne	r3,r2,48fc <__smakebuf_r+0x78>
    49d0:	8080030b 	ldhu	r2,12(r16)
    49d4:	00c10004 	movi	r3,1024
    49d8:	1825883a 	mov	r18,r3
    49dc:	10c4b03a 	or	r2,r2,r3
    49e0:	8080030d 	sth	r2,12(r16)
    49e4:	80c01315 	stw	r3,76(r16)
    49e8:	003fca06 	br	4914 <__smakebuf_r+0x90>
    49ec:	8100030b 	ldhu	r4,12(r16)
    49f0:	2080800c 	andi	r2,r4,512
    49f4:	103fb21e 	bne	r2,zero,48c0 <__smakebuf_r+0x3c>
    49f8:	80c010c4 	addi	r3,r16,67
    49fc:	21000094 	ori	r4,r4,2
    4a00:	00800044 	movi	r2,1
    4a04:	80800515 	stw	r2,20(r16)
    4a08:	8100030d 	sth	r4,12(r16)
    4a0c:	80c00415 	stw	r3,16(r16)
    4a10:	80c00015 	stw	r3,0(r16)
    4a14:	003faa06 	br	48c0 <__smakebuf_r+0x3c>

00004a18 <memset>:
    4a18:	008000c4 	movi	r2,3
    4a1c:	29403fcc 	andi	r5,r5,255
    4a20:	2007883a 	mov	r3,r4
    4a24:	1180022e 	bgeu	r2,r6,4a30 <memset+0x18>
    4a28:	2084703a 	and	r2,r4,r2
    4a2c:	10000826 	beq	r2,zero,4a50 <memset+0x38>
    4a30:	30000526 	beq	r6,zero,4a48 <memset+0x30>
    4a34:	2805883a 	mov	r2,r5
    4a38:	30cd883a 	add	r6,r6,r3
    4a3c:	18800005 	stb	r2,0(r3)
    4a40:	18c00044 	addi	r3,r3,1
    4a44:	19bffd1e 	bne	r3,r6,4a3c <memset+0x24>
    4a48:	2005883a 	mov	r2,r4
    4a4c:	f800283a 	ret
    4a50:	2804923a 	slli	r2,r5,8
    4a54:	020003c4 	movi	r8,15
    4a58:	200f883a 	mov	r7,r4
    4a5c:	2884b03a 	or	r2,r5,r2
    4a60:	1006943a 	slli	r3,r2,16
    4a64:	10c6b03a 	or	r3,r2,r3
    4a68:	41800a2e 	bgeu	r8,r6,4a94 <memset+0x7c>
    4a6c:	4005883a 	mov	r2,r8
    4a70:	31bffc04 	addi	r6,r6,-16
    4a74:	38c00015 	stw	r3,0(r7)
    4a78:	38c00115 	stw	r3,4(r7)
    4a7c:	38c00215 	stw	r3,8(r7)
    4a80:	38c00315 	stw	r3,12(r7)
    4a84:	39c00404 	addi	r7,r7,16
    4a88:	11bff936 	bltu	r2,r6,4a70 <memset+0x58>
    4a8c:	008000c4 	movi	r2,3
    4a90:	1180052e 	bgeu	r2,r6,4aa8 <memset+0x90>
    4a94:	31bfff04 	addi	r6,r6,-4
    4a98:	008000c4 	movi	r2,3
    4a9c:	38c00015 	stw	r3,0(r7)
    4aa0:	39c00104 	addi	r7,r7,4
    4aa4:	11bffb36 	bltu	r2,r6,4a94 <memset+0x7c>
    4aa8:	3807883a 	mov	r3,r7
    4aac:	003fe006 	br	4a30 <memset+0x18>

00004ab0 <__sclose>:
    4ab0:	2940038f 	ldh	r5,14(r5)
    4ab4:	0004c741 	jmpi	4c74 <_close_r>

00004ab8 <__sseek>:
    4ab8:	defffe04 	addi	sp,sp,-8
    4abc:	dc000015 	stw	r16,0(sp)
    4ac0:	2821883a 	mov	r16,r5
    4ac4:	2940038f 	ldh	r5,14(r5)
    4ac8:	dfc00115 	stw	ra,4(sp)
    4acc:	0004eec0 	call	4eec <_lseek_r>
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	00bfffc4 	movi	r2,-1
    4ad8:	18800926 	beq	r3,r2,4b00 <__sseek+0x48>
    4adc:	8080030b 	ldhu	r2,12(r16)
    4ae0:	80c01415 	stw	r3,80(r16)
    4ae4:	10840014 	ori	r2,r2,4096
    4ae8:	8080030d 	sth	r2,12(r16)
    4aec:	1805883a 	mov	r2,r3
    4af0:	dfc00117 	ldw	ra,4(sp)
    4af4:	dc000017 	ldw	r16,0(sp)
    4af8:	dec00204 	addi	sp,sp,8
    4afc:	f800283a 	ret
    4b00:	8080030b 	ldhu	r2,12(r16)
    4b04:	10bbffcc 	andi	r2,r2,61439
    4b08:	8080030d 	sth	r2,12(r16)
    4b0c:	1805883a 	mov	r2,r3
    4b10:	dfc00117 	ldw	ra,4(sp)
    4b14:	dc000017 	ldw	r16,0(sp)
    4b18:	dec00204 	addi	sp,sp,8
    4b1c:	f800283a 	ret

00004b20 <__swrite>:
    4b20:	2880030b 	ldhu	r2,12(r5)
    4b24:	defffb04 	addi	sp,sp,-20
    4b28:	dcc00315 	stw	r19,12(sp)
    4b2c:	1080400c 	andi	r2,r2,256
    4b30:	dc800215 	stw	r18,8(sp)
    4b34:	dc400115 	stw	r17,4(sp)
    4b38:	dc000015 	stw	r16,0(sp)
    4b3c:	3027883a 	mov	r19,r6
    4b40:	3825883a 	mov	r18,r7
    4b44:	dfc00415 	stw	ra,16(sp)
    4b48:	2821883a 	mov	r16,r5
    4b4c:	000d883a 	mov	r6,zero
    4b50:	01c00084 	movi	r7,2
    4b54:	2023883a 	mov	r17,r4
    4b58:	10000226 	beq	r2,zero,4b64 <__swrite+0x44>
    4b5c:	2940038f 	ldh	r5,14(r5)
    4b60:	0004eec0 	call	4eec <_lseek_r>
    4b64:	8080030b 	ldhu	r2,12(r16)
    4b68:	8140038f 	ldh	r5,14(r16)
    4b6c:	8809883a 	mov	r4,r17
    4b70:	10bbffcc 	andi	r2,r2,61439
    4b74:	980d883a 	mov	r6,r19
    4b78:	900f883a 	mov	r7,r18
    4b7c:	8080030d 	sth	r2,12(r16)
    4b80:	dfc00417 	ldw	ra,16(sp)
    4b84:	dcc00317 	ldw	r19,12(sp)
    4b88:	dc800217 	ldw	r18,8(sp)
    4b8c:	dc400117 	ldw	r17,4(sp)
    4b90:	dc000017 	ldw	r16,0(sp)
    4b94:	dec00504 	addi	sp,sp,20
    4b98:	0004bfc1 	jmpi	4bfc <_write_r>

00004b9c <__sread>:
    4b9c:	defffe04 	addi	sp,sp,-8
    4ba0:	dc000015 	stw	r16,0(sp)
    4ba4:	2821883a 	mov	r16,r5
    4ba8:	2940038f 	ldh	r5,14(r5)
    4bac:	dfc00115 	stw	ra,4(sp)
    4bb0:	0004f640 	call	4f64 <_read_r>
    4bb4:	1007883a 	mov	r3,r2
    4bb8:	10000816 	blt	r2,zero,4bdc <__sread+0x40>
    4bbc:	80801417 	ldw	r2,80(r16)
    4bc0:	10c5883a 	add	r2,r2,r3
    4bc4:	80801415 	stw	r2,80(r16)
    4bc8:	1805883a 	mov	r2,r3
    4bcc:	dfc00117 	ldw	ra,4(sp)
    4bd0:	dc000017 	ldw	r16,0(sp)
    4bd4:	dec00204 	addi	sp,sp,8
    4bd8:	f800283a 	ret
    4bdc:	8080030b 	ldhu	r2,12(r16)
    4be0:	10bbffcc 	andi	r2,r2,61439
    4be4:	8080030d 	sth	r2,12(r16)
    4be8:	1805883a 	mov	r2,r3
    4bec:	dfc00117 	ldw	ra,4(sp)
    4bf0:	dc000017 	ldw	r16,0(sp)
    4bf4:	dec00204 	addi	sp,sp,8
    4bf8:	f800283a 	ret

00004bfc <_write_r>:
    4bfc:	defffd04 	addi	sp,sp,-12
    4c00:	dc000015 	stw	r16,0(sp)
    4c04:	04000074 	movhi	r16,1
    4c08:	84232d04 	addi	r16,r16,-29516
    4c0c:	dc400115 	stw	r17,4(sp)
    4c10:	80000015 	stw	zero,0(r16)
    4c14:	2023883a 	mov	r17,r4
    4c18:	2809883a 	mov	r4,r5
    4c1c:	300b883a 	mov	r5,r6
    4c20:	380d883a 	mov	r6,r7
    4c24:	dfc00215 	stw	ra,8(sp)
    4c28:	00055700 	call	5570 <write>
    4c2c:	1007883a 	mov	r3,r2
    4c30:	00bfffc4 	movi	r2,-1
    4c34:	18800626 	beq	r3,r2,4c50 <_write_r+0x54>
    4c38:	1805883a 	mov	r2,r3
    4c3c:	dfc00217 	ldw	ra,8(sp)
    4c40:	dc400117 	ldw	r17,4(sp)
    4c44:	dc000017 	ldw	r16,0(sp)
    4c48:	dec00304 	addi	sp,sp,12
    4c4c:	f800283a 	ret
    4c50:	80800017 	ldw	r2,0(r16)
    4c54:	103ff826 	beq	r2,zero,4c38 <_write_r+0x3c>
    4c58:	88800015 	stw	r2,0(r17)
    4c5c:	1805883a 	mov	r2,r3
    4c60:	dfc00217 	ldw	ra,8(sp)
    4c64:	dc400117 	ldw	r17,4(sp)
    4c68:	dc000017 	ldw	r16,0(sp)
    4c6c:	dec00304 	addi	sp,sp,12
    4c70:	f800283a 	ret

00004c74 <_close_r>:
    4c74:	defffd04 	addi	sp,sp,-12
    4c78:	dc000015 	stw	r16,0(sp)
    4c7c:	04000074 	movhi	r16,1
    4c80:	84232d04 	addi	r16,r16,-29516
    4c84:	dc400115 	stw	r17,4(sp)
    4c88:	80000015 	stw	zero,0(r16)
    4c8c:	2023883a 	mov	r17,r4
    4c90:	2809883a 	mov	r4,r5
    4c94:	dfc00215 	stw	ra,8(sp)
    4c98:	0002af40 	call	2af4 <close>
    4c9c:	1007883a 	mov	r3,r2
    4ca0:	00bfffc4 	movi	r2,-1
    4ca4:	18800626 	beq	r3,r2,4cc0 <_close_r+0x4c>
    4ca8:	1805883a 	mov	r2,r3
    4cac:	dfc00217 	ldw	ra,8(sp)
    4cb0:	dc400117 	ldw	r17,4(sp)
    4cb4:	dc000017 	ldw	r16,0(sp)
    4cb8:	dec00304 	addi	sp,sp,12
    4cbc:	f800283a 	ret
    4cc0:	80800017 	ldw	r2,0(r16)
    4cc4:	103ff826 	beq	r2,zero,4ca8 <_close_r+0x34>
    4cc8:	88800015 	stw	r2,0(r17)
    4ccc:	1805883a 	mov	r2,r3
    4cd0:	dfc00217 	ldw	ra,8(sp)
    4cd4:	dc400117 	ldw	r17,4(sp)
    4cd8:	dc000017 	ldw	r16,0(sp)
    4cdc:	dec00304 	addi	sp,sp,12
    4ce0:	f800283a 	ret

00004ce4 <_fclose_r>:
    4ce4:	defffc04 	addi	sp,sp,-16
    4ce8:	dc400115 	stw	r17,4(sp)
    4cec:	dc000015 	stw	r16,0(sp)
    4cf0:	dfc00315 	stw	ra,12(sp)
    4cf4:	dc800215 	stw	r18,8(sp)
    4cf8:	2821883a 	mov	r16,r5
    4cfc:	2023883a 	mov	r17,r4
    4d00:	28002926 	beq	r5,zero,4da8 <_fclose_r+0xc4>
    4d04:	00044680 	call	4468 <__sfp_lock_acquire>
    4d08:	88000226 	beq	r17,zero,4d14 <_fclose_r+0x30>
    4d0c:	88800e17 	ldw	r2,56(r17)
    4d10:	10002d26 	beq	r2,zero,4dc8 <_fclose_r+0xe4>
    4d14:	8080030f 	ldh	r2,12(r16)
    4d18:	10002226 	beq	r2,zero,4da4 <_fclose_r+0xc0>
    4d1c:	8809883a 	mov	r4,r17
    4d20:	800b883a 	mov	r5,r16
    4d24:	00041e00 	call	41e0 <_fflush_r>
    4d28:	1025883a 	mov	r18,r2
    4d2c:	80800b17 	ldw	r2,44(r16)
    4d30:	10000426 	beq	r2,zero,4d44 <_fclose_r+0x60>
    4d34:	81400717 	ldw	r5,28(r16)
    4d38:	8809883a 	mov	r4,r17
    4d3c:	103ee83a 	callr	r2
    4d40:	10002a16 	blt	r2,zero,4dec <_fclose_r+0x108>
    4d44:	8080030b 	ldhu	r2,12(r16)
    4d48:	1080200c 	andi	r2,r2,128
    4d4c:	1000231e 	bne	r2,zero,4ddc <_fclose_r+0xf8>
    4d50:	81400c17 	ldw	r5,48(r16)
    4d54:	28000526 	beq	r5,zero,4d6c <_fclose_r+0x88>
    4d58:	80801004 	addi	r2,r16,64
    4d5c:	28800226 	beq	r5,r2,4d68 <_fclose_r+0x84>
    4d60:	8809883a 	mov	r4,r17
    4d64:	00013880 	call	1388 <_free_r>
    4d68:	80000c15 	stw	zero,48(r16)
    4d6c:	81401117 	ldw	r5,68(r16)
    4d70:	28000326 	beq	r5,zero,4d80 <_fclose_r+0x9c>
    4d74:	8809883a 	mov	r4,r17
    4d78:	00013880 	call	1388 <_free_r>
    4d7c:	80001115 	stw	zero,68(r16)
    4d80:	8000030d 	sth	zero,12(r16)
    4d84:	000446c0 	call	446c <__sfp_lock_release>
    4d88:	9005883a 	mov	r2,r18
    4d8c:	dfc00317 	ldw	ra,12(sp)
    4d90:	dc800217 	ldw	r18,8(sp)
    4d94:	dc400117 	ldw	r17,4(sp)
    4d98:	dc000017 	ldw	r16,0(sp)
    4d9c:	dec00404 	addi	sp,sp,16
    4da0:	f800283a 	ret
    4da4:	000446c0 	call	446c <__sfp_lock_release>
    4da8:	0025883a 	mov	r18,zero
    4dac:	9005883a 	mov	r2,r18
    4db0:	dfc00317 	ldw	ra,12(sp)
    4db4:	dc800217 	ldw	r18,8(sp)
    4db8:	dc400117 	ldw	r17,4(sp)
    4dbc:	dc000017 	ldw	r16,0(sp)
    4dc0:	dec00404 	addi	sp,sp,16
    4dc4:	f800283a 	ret
    4dc8:	8809883a 	mov	r4,r17
    4dcc:	00044780 	call	4478 <__sinit>
    4dd0:	8080030f 	ldh	r2,12(r16)
    4dd4:	103fd11e 	bne	r2,zero,4d1c <_fclose_r+0x38>
    4dd8:	003ff206 	br	4da4 <_fclose_r+0xc0>
    4ddc:	81400417 	ldw	r5,16(r16)
    4de0:	8809883a 	mov	r4,r17
    4de4:	00013880 	call	1388 <_free_r>
    4de8:	003fd906 	br	4d50 <_fclose_r+0x6c>
    4dec:	04bfffc4 	movi	r18,-1
    4df0:	003fd406 	br	4d44 <_fclose_r+0x60>

00004df4 <fclose>:
    4df4:	00800034 	movhi	r2,0
    4df8:	109c8904 	addi	r2,r2,29220
    4dfc:	200b883a 	mov	r5,r4
    4e00:	11000017 	ldw	r4,0(r2)
    4e04:	0004ce41 	jmpi	4ce4 <_fclose_r>

00004e08 <_fstat_r>:
    4e08:	defffd04 	addi	sp,sp,-12
    4e0c:	dc000015 	stw	r16,0(sp)
    4e10:	04000074 	movhi	r16,1
    4e14:	84232d04 	addi	r16,r16,-29516
    4e18:	dc400115 	stw	r17,4(sp)
    4e1c:	80000015 	stw	zero,0(r16)
    4e20:	2023883a 	mov	r17,r4
    4e24:	2809883a 	mov	r4,r5
    4e28:	300b883a 	mov	r5,r6
    4e2c:	dfc00215 	stw	ra,8(sp)
    4e30:	000503c0 	call	503c <fstat>
    4e34:	1007883a 	mov	r3,r2
    4e38:	00bfffc4 	movi	r2,-1
    4e3c:	18800626 	beq	r3,r2,4e58 <_fstat_r+0x50>
    4e40:	1805883a 	mov	r2,r3
    4e44:	dfc00217 	ldw	ra,8(sp)
    4e48:	dc400117 	ldw	r17,4(sp)
    4e4c:	dc000017 	ldw	r16,0(sp)
    4e50:	dec00304 	addi	sp,sp,12
    4e54:	f800283a 	ret
    4e58:	80800017 	ldw	r2,0(r16)
    4e5c:	103ff826 	beq	r2,zero,4e40 <_fstat_r+0x38>
    4e60:	88800015 	stw	r2,0(r17)
    4e64:	1805883a 	mov	r2,r3
    4e68:	dfc00217 	ldw	ra,8(sp)
    4e6c:	dc400117 	ldw	r17,4(sp)
    4e70:	dc000017 	ldw	r16,0(sp)
    4e74:	dec00304 	addi	sp,sp,12
    4e78:	f800283a 	ret

00004e7c <_isatty_r>:
    4e7c:	defffd04 	addi	sp,sp,-12
    4e80:	dc000015 	stw	r16,0(sp)
    4e84:	04000074 	movhi	r16,1
    4e88:	84232d04 	addi	r16,r16,-29516
    4e8c:	dc400115 	stw	r17,4(sp)
    4e90:	80000015 	stw	zero,0(r16)
    4e94:	2023883a 	mov	r17,r4
    4e98:	2809883a 	mov	r4,r5
    4e9c:	dfc00215 	stw	ra,8(sp)
    4ea0:	00051740 	call	5174 <isatty>
    4ea4:	1007883a 	mov	r3,r2
    4ea8:	00bfffc4 	movi	r2,-1
    4eac:	18800626 	beq	r3,r2,4ec8 <_isatty_r+0x4c>
    4eb0:	1805883a 	mov	r2,r3
    4eb4:	dfc00217 	ldw	ra,8(sp)
    4eb8:	dc400117 	ldw	r17,4(sp)
    4ebc:	dc000017 	ldw	r16,0(sp)
    4ec0:	dec00304 	addi	sp,sp,12
    4ec4:	f800283a 	ret
    4ec8:	80800017 	ldw	r2,0(r16)
    4ecc:	103ff826 	beq	r2,zero,4eb0 <_isatty_r+0x34>
    4ed0:	88800015 	stw	r2,0(r17)
    4ed4:	1805883a 	mov	r2,r3
    4ed8:	dfc00217 	ldw	ra,8(sp)
    4edc:	dc400117 	ldw	r17,4(sp)
    4ee0:	dc000017 	ldw	r16,0(sp)
    4ee4:	dec00304 	addi	sp,sp,12
    4ee8:	f800283a 	ret

00004eec <_lseek_r>:
    4eec:	defffd04 	addi	sp,sp,-12
    4ef0:	dc000015 	stw	r16,0(sp)
    4ef4:	04000074 	movhi	r16,1
    4ef8:	84232d04 	addi	r16,r16,-29516
    4efc:	dc400115 	stw	r17,4(sp)
    4f00:	80000015 	stw	zero,0(r16)
    4f04:	2023883a 	mov	r17,r4
    4f08:	2809883a 	mov	r4,r5
    4f0c:	300b883a 	mov	r5,r6
    4f10:	380d883a 	mov	r6,r7
    4f14:	dfc00215 	stw	ra,8(sp)
    4f18:	00052980 	call	5298 <lseek>
    4f1c:	1007883a 	mov	r3,r2
    4f20:	00bfffc4 	movi	r2,-1
    4f24:	18800626 	beq	r3,r2,4f40 <_lseek_r+0x54>
    4f28:	1805883a 	mov	r2,r3
    4f2c:	dfc00217 	ldw	ra,8(sp)
    4f30:	dc400117 	ldw	r17,4(sp)
    4f34:	dc000017 	ldw	r16,0(sp)
    4f38:	dec00304 	addi	sp,sp,12
    4f3c:	f800283a 	ret
    4f40:	80800017 	ldw	r2,0(r16)
    4f44:	103ff826 	beq	r2,zero,4f28 <_lseek_r+0x3c>
    4f48:	88800015 	stw	r2,0(r17)
    4f4c:	1805883a 	mov	r2,r3
    4f50:	dfc00217 	ldw	ra,8(sp)
    4f54:	dc400117 	ldw	r17,4(sp)
    4f58:	dc000017 	ldw	r16,0(sp)
    4f5c:	dec00304 	addi	sp,sp,12
    4f60:	f800283a 	ret

00004f64 <_read_r>:
    4f64:	defffd04 	addi	sp,sp,-12
    4f68:	dc000015 	stw	r16,0(sp)
    4f6c:	04000074 	movhi	r16,1
    4f70:	84232d04 	addi	r16,r16,-29516
    4f74:	dc400115 	stw	r17,4(sp)
    4f78:	80000015 	stw	zero,0(r16)
    4f7c:	2023883a 	mov	r17,r4
    4f80:	2809883a 	mov	r4,r5
    4f84:	300b883a 	mov	r5,r6
    4f88:	380d883a 	mov	r6,r7
    4f8c:	dfc00215 	stw	ra,8(sp)
    4f90:	00053ec0 	call	53ec <read>
    4f94:	1007883a 	mov	r3,r2
    4f98:	00bfffc4 	movi	r2,-1
    4f9c:	18800626 	beq	r3,r2,4fb8 <_read_r+0x54>
    4fa0:	1805883a 	mov	r2,r3
    4fa4:	dfc00217 	ldw	ra,8(sp)
    4fa8:	dc400117 	ldw	r17,4(sp)
    4fac:	dc000017 	ldw	r16,0(sp)
    4fb0:	dec00304 	addi	sp,sp,12
    4fb4:	f800283a 	ret
    4fb8:	80800017 	ldw	r2,0(r16)
    4fbc:	103ff826 	beq	r2,zero,4fa0 <_read_r+0x3c>
    4fc0:	88800015 	stw	r2,0(r17)
    4fc4:	1805883a 	mov	r2,r3
    4fc8:	dfc00217 	ldw	ra,8(sp)
    4fcc:	dc400117 	ldw	r17,4(sp)
    4fd0:	dc000017 	ldw	r16,0(sp)
    4fd4:	dec00304 	addi	sp,sp,12
    4fd8:	f800283a 	ret

00004fdc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    4fdc:	defffd04 	addi	sp,sp,-12
    4fe0:	df000215 	stw	fp,8(sp)
    4fe4:	df000204 	addi	fp,sp,8
    4fe8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    4fec:	e0bfff17 	ldw	r2,-4(fp)
    4ff0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4ff4:	e0bffe17 	ldw	r2,-8(fp)
    4ff8:	1005003a 	cmpeq	r2,r2,zero
    4ffc:	1000021e 	bne	r2,zero,5008 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    5000:	002af070 	cmpltui	zero,zero,43969
    5004:	00000106 	br	500c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    5008:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    500c:	e037883a 	mov	sp,fp
    5010:	df000017 	ldw	fp,0(sp)
    5014:	dec00104 	addi	sp,sp,4
    5018:	f800283a 	ret

0000501c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    501c:	defffd04 	addi	sp,sp,-12
    5020:	dfc00215 	stw	ra,8(sp)
    5024:	df000115 	stw	fp,4(sp)
    5028:	df000104 	addi	fp,sp,4
    502c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    5030:	e13fff17 	ldw	r4,-4(fp)
    5034:	0004fdc0 	call	4fdc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5038:	003fff06 	br	5038 <_exit+0x1c>

0000503c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    503c:	defff904 	addi	sp,sp,-28
    5040:	dfc00615 	stw	ra,24(sp)
    5044:	df000515 	stw	fp,20(sp)
    5048:	df000504 	addi	fp,sp,20
    504c:	e13ffc15 	stw	r4,-16(fp)
    5050:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5054:	e0bffc17 	ldw	r2,-16(fp)
    5058:	1004803a 	cmplt	r2,r2,zero
    505c:	1000091e 	bne	r2,zero,5084 <fstat+0x48>
    5060:	e13ffc17 	ldw	r4,-16(fp)
    5064:	01400304 	movi	r5,12
    5068:	0000a4c0 	call	a4c <__mulsi3>
    506c:	1007883a 	mov	r3,r2
    5070:	00800034 	movhi	r2,0
    5074:	109c2704 	addi	r2,r2,28828
    5078:	1887883a 	add	r3,r3,r2
    507c:	e0ffff15 	stw	r3,-4(fp)
    5080:	00000106 	br	5088 <fstat+0x4c>
    5084:	e03fff15 	stw	zero,-4(fp)
    5088:	e0bfff17 	ldw	r2,-4(fp)
    508c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5090:	e0bffb17 	ldw	r2,-20(fp)
    5094:	1005003a 	cmpeq	r2,r2,zero
    5098:	1000121e 	bne	r2,zero,50e4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    509c:	e0bffb17 	ldw	r2,-20(fp)
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	10800817 	ldw	r2,32(r2)
    50a8:	1005003a 	cmpeq	r2,r2,zero
    50ac:	1000081e 	bne	r2,zero,50d0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    50b0:	e0bffb17 	ldw	r2,-20(fp)
    50b4:	10800017 	ldw	r2,0(r2)
    50b8:	10800817 	ldw	r2,32(r2)
    50bc:	e13ffb17 	ldw	r4,-20(fp)
    50c0:	e17ffd17 	ldw	r5,-12(fp)
    50c4:	103ee83a 	callr	r2
    50c8:	e0bffe15 	stw	r2,-8(fp)
    50cc:	00000b06 	br	50fc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    50d0:	e0fffd17 	ldw	r3,-12(fp)
    50d4:	00880004 	movi	r2,8192
    50d8:	18800115 	stw	r2,4(r3)
      return 0;
    50dc:	e03ffe15 	stw	zero,-8(fp)
    50e0:	00000606 	br	50fc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    50e4:	00051140 	call	5114 <alt_get_errno>
    50e8:	1007883a 	mov	r3,r2
    50ec:	00801444 	movi	r2,81
    50f0:	18800015 	stw	r2,0(r3)
    return -1;
    50f4:	00bfffc4 	movi	r2,-1
    50f8:	e0bffe15 	stw	r2,-8(fp)
    50fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    5100:	e037883a 	mov	sp,fp
    5104:	dfc00117 	ldw	ra,4(sp)
    5108:	df000017 	ldw	fp,0(sp)
    510c:	dec00204 	addi	sp,sp,8
    5110:	f800283a 	ret

00005114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5114:	defffd04 	addi	sp,sp,-12
    5118:	dfc00215 	stw	ra,8(sp)
    511c:	df000115 	stw	fp,4(sp)
    5120:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5124:	00800034 	movhi	r2,0
    5128:	109c9304 	addi	r2,r2,29260
    512c:	10800017 	ldw	r2,0(r2)
    5130:	1005003a 	cmpeq	r2,r2,zero
    5134:	1000061e 	bne	r2,zero,5150 <alt_get_errno+0x3c>
    5138:	00800034 	movhi	r2,0
    513c:	109c9304 	addi	r2,r2,29260
    5140:	10800017 	ldw	r2,0(r2)
    5144:	103ee83a 	callr	r2
    5148:	e0bfff15 	stw	r2,-4(fp)
    514c:	00000306 	br	515c <alt_get_errno+0x48>
    5150:	00800074 	movhi	r2,1
    5154:	10a32d04 	addi	r2,r2,-29516
    5158:	e0bfff15 	stw	r2,-4(fp)
    515c:	e0bfff17 	ldw	r2,-4(fp)
}
    5160:	e037883a 	mov	sp,fp
    5164:	dfc00117 	ldw	ra,4(sp)
    5168:	df000017 	ldw	fp,0(sp)
    516c:	dec00204 	addi	sp,sp,8
    5170:	f800283a 	ret

00005174 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5174:	deffeb04 	addi	sp,sp,-84
    5178:	dfc01415 	stw	ra,80(sp)
    517c:	df001315 	stw	fp,76(sp)
    5180:	df001304 	addi	fp,sp,76
    5184:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5188:	e0bffd17 	ldw	r2,-12(fp)
    518c:	1004803a 	cmplt	r2,r2,zero
    5190:	1000091e 	bne	r2,zero,51b8 <isatty+0x44>
    5194:	e13ffd17 	ldw	r4,-12(fp)
    5198:	01400304 	movi	r5,12
    519c:	0000a4c0 	call	a4c <__mulsi3>
    51a0:	1007883a 	mov	r3,r2
    51a4:	00800034 	movhi	r2,0
    51a8:	109c2704 	addi	r2,r2,28828
    51ac:	1887883a 	add	r3,r3,r2
    51b0:	e0ffff15 	stw	r3,-4(fp)
    51b4:	00000106 	br	51bc <isatty+0x48>
    51b8:	e03fff15 	stw	zero,-4(fp)
    51bc:	e0bfff17 	ldw	r2,-4(fp)
    51c0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    51c4:	e0bfed17 	ldw	r2,-76(fp)
    51c8:	1005003a 	cmpeq	r2,r2,zero
    51cc:	10000f1e 	bne	r2,zero,520c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    51d0:	e0bfed17 	ldw	r2,-76(fp)
    51d4:	10800017 	ldw	r2,0(r2)
    51d8:	10800817 	ldw	r2,32(r2)
    51dc:	1004c03a 	cmpne	r2,r2,zero
    51e0:	1000031e 	bne	r2,zero,51f0 <isatty+0x7c>
    {
      return 1;
    51e4:	00800044 	movi	r2,1
    51e8:	e0bffe15 	stw	r2,-8(fp)
    51ec:	00000c06 	br	5220 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    51f0:	e17fee04 	addi	r5,fp,-72
    51f4:	e13ffd17 	ldw	r4,-12(fp)
    51f8:	000503c0 	call	503c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    51fc:	e0bfef17 	ldw	r2,-68(fp)
    5200:	10880020 	cmpeqi	r2,r2,8192
    5204:	e0bffe15 	stw	r2,-8(fp)
    5208:	00000506 	br	5220 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    520c:	00052380 	call	5238 <alt_get_errno>
    5210:	1007883a 	mov	r3,r2
    5214:	00801444 	movi	r2,81
    5218:	18800015 	stw	r2,0(r3)
    return 0;
    521c:	e03ffe15 	stw	zero,-8(fp)
    5220:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    5224:	e037883a 	mov	sp,fp
    5228:	dfc00117 	ldw	ra,4(sp)
    522c:	df000017 	ldw	fp,0(sp)
    5230:	dec00204 	addi	sp,sp,8
    5234:	f800283a 	ret

00005238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5238:	defffd04 	addi	sp,sp,-12
    523c:	dfc00215 	stw	ra,8(sp)
    5240:	df000115 	stw	fp,4(sp)
    5244:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5248:	00800034 	movhi	r2,0
    524c:	109c9304 	addi	r2,r2,29260
    5250:	10800017 	ldw	r2,0(r2)
    5254:	1005003a 	cmpeq	r2,r2,zero
    5258:	1000061e 	bne	r2,zero,5274 <alt_get_errno+0x3c>
    525c:	00800034 	movhi	r2,0
    5260:	109c9304 	addi	r2,r2,29260
    5264:	10800017 	ldw	r2,0(r2)
    5268:	103ee83a 	callr	r2
    526c:	e0bfff15 	stw	r2,-4(fp)
    5270:	00000306 	br	5280 <alt_get_errno+0x48>
    5274:	00800074 	movhi	r2,1
    5278:	10a32d04 	addi	r2,r2,-29516
    527c:	e0bfff15 	stw	r2,-4(fp)
    5280:	e0bfff17 	ldw	r2,-4(fp)
}
    5284:	e037883a 	mov	sp,fp
    5288:	dfc00117 	ldw	ra,4(sp)
    528c:	df000017 	ldw	fp,0(sp)
    5290:	dec00204 	addi	sp,sp,8
    5294:	f800283a 	ret

00005298 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5298:	defff804 	addi	sp,sp,-32
    529c:	dfc00715 	stw	ra,28(sp)
    52a0:	df000615 	stw	fp,24(sp)
    52a4:	df000604 	addi	fp,sp,24
    52a8:	e13ffc15 	stw	r4,-16(fp)
    52ac:	e17ffd15 	stw	r5,-12(fp)
    52b0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    52b4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    52b8:	e0bffc17 	ldw	r2,-16(fp)
    52bc:	1004803a 	cmplt	r2,r2,zero
    52c0:	1000091e 	bne	r2,zero,52e8 <lseek+0x50>
    52c4:	e13ffc17 	ldw	r4,-16(fp)
    52c8:	01400304 	movi	r5,12
    52cc:	0000a4c0 	call	a4c <__mulsi3>
    52d0:	1007883a 	mov	r3,r2
    52d4:	00800034 	movhi	r2,0
    52d8:	109c2704 	addi	r2,r2,28828
    52dc:	1887883a 	add	r3,r3,r2
    52e0:	e0ffff15 	stw	r3,-4(fp)
    52e4:	00000106 	br	52ec <lseek+0x54>
    52e8:	e03fff15 	stw	zero,-4(fp)
    52ec:	e0bfff17 	ldw	r2,-4(fp)
    52f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    52f4:	e0bffb17 	ldw	r2,-20(fp)
    52f8:	1005003a 	cmpeq	r2,r2,zero
    52fc:	1000111e 	bne	r2,zero,5344 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5300:	e0bffb17 	ldw	r2,-20(fp)
    5304:	10800017 	ldw	r2,0(r2)
    5308:	10800717 	ldw	r2,28(r2)
    530c:	1005003a 	cmpeq	r2,r2,zero
    5310:	1000091e 	bne	r2,zero,5338 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5314:	e0bffb17 	ldw	r2,-20(fp)
    5318:	10800017 	ldw	r2,0(r2)
    531c:	10800717 	ldw	r2,28(r2)
    5320:	e13ffb17 	ldw	r4,-20(fp)
    5324:	e17ffd17 	ldw	r5,-12(fp)
    5328:	e1bffe17 	ldw	r6,-8(fp)
    532c:	103ee83a 	callr	r2
    5330:	e0bffa15 	stw	r2,-24(fp)
    5334:	00000506 	br	534c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    5338:	00bfde84 	movi	r2,-134
    533c:	e0bffa15 	stw	r2,-24(fp)
    5340:	00000206 	br	534c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    5344:	00bfebc4 	movi	r2,-81
    5348:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    534c:	e0bffa17 	ldw	r2,-24(fp)
    5350:	1004403a 	cmpge	r2,r2,zero
    5354:	1000071e 	bne	r2,zero,5374 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    5358:	000538c0 	call	538c <alt_get_errno>
    535c:	1007883a 	mov	r3,r2
    5360:	e0bffa17 	ldw	r2,-24(fp)
    5364:	0085c83a 	sub	r2,zero,r2
    5368:	18800015 	stw	r2,0(r3)
    rc = -1;
    536c:	00bfffc4 	movi	r2,-1
    5370:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    5374:	e0bffa17 	ldw	r2,-24(fp)
}
    5378:	e037883a 	mov	sp,fp
    537c:	dfc00117 	ldw	ra,4(sp)
    5380:	df000017 	ldw	fp,0(sp)
    5384:	dec00204 	addi	sp,sp,8
    5388:	f800283a 	ret

0000538c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    538c:	defffd04 	addi	sp,sp,-12
    5390:	dfc00215 	stw	ra,8(sp)
    5394:	df000115 	stw	fp,4(sp)
    5398:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    539c:	00800034 	movhi	r2,0
    53a0:	109c9304 	addi	r2,r2,29260
    53a4:	10800017 	ldw	r2,0(r2)
    53a8:	1005003a 	cmpeq	r2,r2,zero
    53ac:	1000061e 	bne	r2,zero,53c8 <alt_get_errno+0x3c>
    53b0:	00800034 	movhi	r2,0
    53b4:	109c9304 	addi	r2,r2,29260
    53b8:	10800017 	ldw	r2,0(r2)
    53bc:	103ee83a 	callr	r2
    53c0:	e0bfff15 	stw	r2,-4(fp)
    53c4:	00000306 	br	53d4 <alt_get_errno+0x48>
    53c8:	00800074 	movhi	r2,1
    53cc:	10a32d04 	addi	r2,r2,-29516
    53d0:	e0bfff15 	stw	r2,-4(fp)
    53d4:	e0bfff17 	ldw	r2,-4(fp)
}
    53d8:	e037883a 	mov	sp,fp
    53dc:	dfc00117 	ldw	ra,4(sp)
    53e0:	df000017 	ldw	fp,0(sp)
    53e4:	dec00204 	addi	sp,sp,8
    53e8:	f800283a 	ret

000053ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    53ec:	defff704 	addi	sp,sp,-36
    53f0:	dfc00815 	stw	ra,32(sp)
    53f4:	df000715 	stw	fp,28(sp)
    53f8:	df000704 	addi	fp,sp,28
    53fc:	e13ffb15 	stw	r4,-20(fp)
    5400:	e17ffc15 	stw	r5,-16(fp)
    5404:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5408:	e0bffb17 	ldw	r2,-20(fp)
    540c:	1004803a 	cmplt	r2,r2,zero
    5410:	1000091e 	bne	r2,zero,5438 <read+0x4c>
    5414:	e13ffb17 	ldw	r4,-20(fp)
    5418:	01400304 	movi	r5,12
    541c:	0000a4c0 	call	a4c <__mulsi3>
    5420:	1007883a 	mov	r3,r2
    5424:	00800034 	movhi	r2,0
    5428:	109c2704 	addi	r2,r2,28828
    542c:	1887883a 	add	r3,r3,r2
    5430:	e0ffff15 	stw	r3,-4(fp)
    5434:	00000106 	br	543c <read+0x50>
    5438:	e03fff15 	stw	zero,-4(fp)
    543c:	e0bfff17 	ldw	r2,-4(fp)
    5440:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    5444:	e0bffa17 	ldw	r2,-24(fp)
    5448:	1005003a 	cmpeq	r2,r2,zero
    544c:	1000241e 	bne	r2,zero,54e0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5450:	e0bffa17 	ldw	r2,-24(fp)
    5454:	10800217 	ldw	r2,8(r2)
    5458:	108000cc 	andi	r2,r2,3
    545c:	10800060 	cmpeqi	r2,r2,1
    5460:	10001a1e 	bne	r2,zero,54cc <read+0xe0>
    5464:	e0bffa17 	ldw	r2,-24(fp)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	10800517 	ldw	r2,20(r2)
    5470:	1005003a 	cmpeq	r2,r2,zero
    5474:	1000151e 	bne	r2,zero,54cc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5478:	e0bffa17 	ldw	r2,-24(fp)
    547c:	10800017 	ldw	r2,0(r2)
    5480:	10800517 	ldw	r2,20(r2)
    5484:	e17ffc17 	ldw	r5,-16(fp)
    5488:	e1bffd17 	ldw	r6,-12(fp)
    548c:	e13ffa17 	ldw	r4,-24(fp)
    5490:	103ee83a 	callr	r2
    5494:	e0bff915 	stw	r2,-28(fp)
    5498:	e0bff917 	ldw	r2,-28(fp)
    549c:	1004403a 	cmpge	r2,r2,zero
    54a0:	1000071e 	bne	r2,zero,54c0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    54a4:	00055100 	call	5510 <alt_get_errno>
    54a8:	e0fff917 	ldw	r3,-28(fp)
    54ac:	00c7c83a 	sub	r3,zero,r3
    54b0:	10c00015 	stw	r3,0(r2)
          return -1;
    54b4:	00bfffc4 	movi	r2,-1
    54b8:	e0bffe15 	stw	r2,-8(fp)
    54bc:	00000e06 	br	54f8 <read+0x10c>
        }
        return rval;
    54c0:	e0bff917 	ldw	r2,-28(fp)
    54c4:	e0bffe15 	stw	r2,-8(fp)
    54c8:	00000b06 	br	54f8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    54cc:	00055100 	call	5510 <alt_get_errno>
    54d0:	1007883a 	mov	r3,r2
    54d4:	00800344 	movi	r2,13
    54d8:	18800015 	stw	r2,0(r3)
    54dc:	00000406 	br	54f0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    54e0:	00055100 	call	5510 <alt_get_errno>
    54e4:	1007883a 	mov	r3,r2
    54e8:	00801444 	movi	r2,81
    54ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    54f0:	00bfffc4 	movi	r2,-1
    54f4:	e0bffe15 	stw	r2,-8(fp)
    54f8:	e0bffe17 	ldw	r2,-8(fp)
}
    54fc:	e037883a 	mov	sp,fp
    5500:	dfc00117 	ldw	ra,4(sp)
    5504:	df000017 	ldw	fp,0(sp)
    5508:	dec00204 	addi	sp,sp,8
    550c:	f800283a 	ret

00005510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5510:	defffd04 	addi	sp,sp,-12
    5514:	dfc00215 	stw	ra,8(sp)
    5518:	df000115 	stw	fp,4(sp)
    551c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5520:	00800034 	movhi	r2,0
    5524:	109c9304 	addi	r2,r2,29260
    5528:	10800017 	ldw	r2,0(r2)
    552c:	1005003a 	cmpeq	r2,r2,zero
    5530:	1000061e 	bne	r2,zero,554c <alt_get_errno+0x3c>
    5534:	00800034 	movhi	r2,0
    5538:	109c9304 	addi	r2,r2,29260
    553c:	10800017 	ldw	r2,0(r2)
    5540:	103ee83a 	callr	r2
    5544:	e0bfff15 	stw	r2,-4(fp)
    5548:	00000306 	br	5558 <alt_get_errno+0x48>
    554c:	00800074 	movhi	r2,1
    5550:	10a32d04 	addi	r2,r2,-29516
    5554:	e0bfff15 	stw	r2,-4(fp)
    5558:	e0bfff17 	ldw	r2,-4(fp)
}
    555c:	e037883a 	mov	sp,fp
    5560:	dfc00117 	ldw	ra,4(sp)
    5564:	df000017 	ldw	fp,0(sp)
    5568:	dec00204 	addi	sp,sp,8
    556c:	f800283a 	ret

00005570 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5570:	defff704 	addi	sp,sp,-36
    5574:	dfc00815 	stw	ra,32(sp)
    5578:	df000715 	stw	fp,28(sp)
    557c:	df000704 	addi	fp,sp,28
    5580:	e13ffb15 	stw	r4,-20(fp)
    5584:	e17ffc15 	stw	r5,-16(fp)
    5588:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    558c:	e0bffb17 	ldw	r2,-20(fp)
    5590:	1004803a 	cmplt	r2,r2,zero
    5594:	1000091e 	bne	r2,zero,55bc <write+0x4c>
    5598:	e13ffb17 	ldw	r4,-20(fp)
    559c:	01400304 	movi	r5,12
    55a0:	0000a4c0 	call	a4c <__mulsi3>
    55a4:	1007883a 	mov	r3,r2
    55a8:	00800034 	movhi	r2,0
    55ac:	109c2704 	addi	r2,r2,28828
    55b0:	1887883a 	add	r3,r3,r2
    55b4:	e0ffff15 	stw	r3,-4(fp)
    55b8:	00000106 	br	55c0 <write+0x50>
    55bc:	e03fff15 	stw	zero,-4(fp)
    55c0:	e0bfff17 	ldw	r2,-4(fp)
    55c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    55c8:	e0bffa17 	ldw	r2,-24(fp)
    55cc:	1005003a 	cmpeq	r2,r2,zero
    55d0:	1000241e 	bne	r2,zero,5664 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    55d4:	e0bffa17 	ldw	r2,-24(fp)
    55d8:	10800217 	ldw	r2,8(r2)
    55dc:	108000cc 	andi	r2,r2,3
    55e0:	1005003a 	cmpeq	r2,r2,zero
    55e4:	10001a1e 	bne	r2,zero,5650 <write+0xe0>
    55e8:	e0bffa17 	ldw	r2,-24(fp)
    55ec:	10800017 	ldw	r2,0(r2)
    55f0:	10800617 	ldw	r2,24(r2)
    55f4:	1005003a 	cmpeq	r2,r2,zero
    55f8:	1000151e 	bne	r2,zero,5650 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    55fc:	e0bffa17 	ldw	r2,-24(fp)
    5600:	10800017 	ldw	r2,0(r2)
    5604:	10800617 	ldw	r2,24(r2)
    5608:	e17ffc17 	ldw	r5,-16(fp)
    560c:	e1bffd17 	ldw	r6,-12(fp)
    5610:	e13ffa17 	ldw	r4,-24(fp)
    5614:	103ee83a 	callr	r2
    5618:	e0bff915 	stw	r2,-28(fp)
    561c:	e0bff917 	ldw	r2,-28(fp)
    5620:	1004403a 	cmpge	r2,r2,zero
    5624:	1000071e 	bne	r2,zero,5644 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    5628:	00056940 	call	5694 <alt_get_errno>
    562c:	e0fff917 	ldw	r3,-28(fp)
    5630:	00c7c83a 	sub	r3,zero,r3
    5634:	10c00015 	stw	r3,0(r2)
        return -1;
    5638:	00bfffc4 	movi	r2,-1
    563c:	e0bffe15 	stw	r2,-8(fp)
    5640:	00000e06 	br	567c <write+0x10c>
      }
      return rval;
    5644:	e0bff917 	ldw	r2,-28(fp)
    5648:	e0bffe15 	stw	r2,-8(fp)
    564c:	00000b06 	br	567c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5650:	00056940 	call	5694 <alt_get_errno>
    5654:	1007883a 	mov	r3,r2
    5658:	00800344 	movi	r2,13
    565c:	18800015 	stw	r2,0(r3)
    5660:	00000406 	br	5674 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5664:	00056940 	call	5694 <alt_get_errno>
    5668:	1007883a 	mov	r3,r2
    566c:	00801444 	movi	r2,81
    5670:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5674:	00bfffc4 	movi	r2,-1
    5678:	e0bffe15 	stw	r2,-8(fp)
    567c:	e0bffe17 	ldw	r2,-8(fp)
}
    5680:	e037883a 	mov	sp,fp
    5684:	dfc00117 	ldw	ra,4(sp)
    5688:	df000017 	ldw	fp,0(sp)
    568c:	dec00204 	addi	sp,sp,8
    5690:	f800283a 	ret

00005694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5694:	defffd04 	addi	sp,sp,-12
    5698:	dfc00215 	stw	ra,8(sp)
    569c:	df000115 	stw	fp,4(sp)
    56a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    56a4:	00800034 	movhi	r2,0
    56a8:	109c9304 	addi	r2,r2,29260
    56ac:	10800017 	ldw	r2,0(r2)
    56b0:	1005003a 	cmpeq	r2,r2,zero
    56b4:	1000061e 	bne	r2,zero,56d0 <alt_get_errno+0x3c>
    56b8:	00800034 	movhi	r2,0
    56bc:	109c9304 	addi	r2,r2,29260
    56c0:	10800017 	ldw	r2,0(r2)
    56c4:	103ee83a 	callr	r2
    56c8:	e0bfff15 	stw	r2,-4(fp)
    56cc:	00000306 	br	56dc <alt_get_errno+0x48>
    56d0:	00800074 	movhi	r2,1
    56d4:	10a32d04 	addi	r2,r2,-29516
    56d8:	e0bfff15 	stw	r2,-4(fp)
    56dc:	e0bfff17 	ldw	r2,-4(fp)
}
    56e0:	e037883a 	mov	sp,fp
    56e4:	dfc00117 	ldw	ra,4(sp)
    56e8:	df000017 	ldw	fp,0(sp)
    56ec:	dec00204 	addi	sp,sp,8
    56f0:	f800283a 	ret
    56f4:	0000402c 	andhi	zero,zero,256
